[
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #include <string.h> int main(){ int n; int cnt = 0; scanf(\"%d\",&n); for(int i=1;i<=n;i++){ cnt += i; } printf(\"%d\",cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. cnt를 0으로 초기화하여 소요된 합계를 저장할 변수를 선언하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n6. cnt에 i를 더하여 합계를 계산하세요.\n7. [rep_end(1)]\n8. cnt를 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int N; int sum = 0; scanf(\"%d\", &N); for (int i = 1; i <= N; i++) { sum += i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a = 0; scanf(\"%d\", &a); int sum = 0; for (int i = 0; i <= a; i++) { sum += i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 a까지 반복하는 for 루프를 작성하세요.\n6. i를 sum에 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void my_swap(unsigned int* a, unsigned int* b){ int temp; temp=*a; *a=*b; *b=temp; } int main(void){ unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a, &b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 my_swap 함수를 정의하세요. (매개변수: unsigned int* a, unsigned int* b)\n2. int형 변수 temp를 선언하세요.\n3. temp에 a가 가리키는 값을 할당하세요.\n4. a가 가리키는 변수에 b가 가리키는 값을 할당하세요.\n5. b가 가리키는 변수에 temp의 값을 할당하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int형 변수 a와 b를 선언하세요.\n9. a와 b에 대한 입력을 받으세요.\n10. my_swap 함수를 호출하여 a와 b의 값을 서로 바꾸세요.\n11. a와 b의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n = 0; scanf(\"%d\", &n); int sum = 0; for (int i = 1; i <= n; i++) { sum += i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n에 대한 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n6. sum에 현재 i 값을 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; int sum = 0; scanf(\"%d\", &a); for (int i = 1; i < a+1; i++) { sum = sum + i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. 소수의 합을 저장할 정수형 변수 sum을 0으로 초기화하세요.\n4. a에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 a까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하여 누적합을 계산하세요.\n7. [rep_end(1)]\n8. sum의 결과를 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void my_swap(unsigned int* a, unsigned int* b) { int temp; temp = *a; *a = *b; *b = temp; } int main(void) { unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a, &b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 my_swap을 정의하세요. (매개변수: unsigned int* a, unsigned int* b)\n2. int형 변수 temp를 선언하세요.\n3. temp에 a가 가리키는 값을 저장하세요.\n4. a가 가리키는 값에 b가 가리키는 값을 저장하세요.\n5. b가 가리키는 값에 temp를 저장하세요. \n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int형 변수 a와 b를 선언하세요.\n9. a와 b에 입력을 받으세요.\n10. my_swap 함수를 호출하여 a와 b의 값을 서로 교환하세요.\n11. a와 b의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int n; int sum = 0; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { sum = sum + i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N = 0; int sum = 0; scanf(\"%d\", &N); for (int i = 1; i <= N; i++) { sum += i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. N값을 입력받기 위해 scanf를 사용하세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. i의 값을 sum에 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하기 위해 printf를 사용하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a = 0; scanf(\"%d\",&a); int b = 0; for(int i = 0;i<=a;i++){ b = b+i; } printf(\"%d\",b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. 정수형 변수 b를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 a까지 반복하는 for 루프를 작성하세요.\n6. b에 i를 더하세요.\n7. [rep_end(1)]\n8. b를 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { for (int j = 1; j <= i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n의 값을 입력 받으세요.\n4. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 1부터 i까지 반복하는 for 루프를 작성하세요.\n6. \"*\" 문자를 출력하세요.\n7. [rep_end(2)]\n8. 줄바꿈을 출력하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int a; int sum = 0; scanf(\"%d\", &a); for (int i = 1; i <= a; i++) { sum = sum + i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 선언하세요.  \n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n4. a에 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 1부터 a까지 반복하는 for 루프를 작성하세요.  \n6. sum에 i를 더하세요.  \n7. [rep_end(1)]  \n8. sum의 값을 출력하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int n=0; scanf(\"%d\", &n); int sum = 0; while (n > 0) { sum = sum + n; n = n - 1; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n에 대한 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] n이 0보다 클 때까지 반복하는 while 루프를 작성하세요.\n6. sum에 n을 더하세요.\n7. n을 1 감소시키세요.\n8. [rep_end(1)]\n9. sum을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N; scanf(\"%d\", &N); int sum = 0; for (int i = 1; i <= N; i++) { sum += i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int x; int sum = 0; scanf(\"%d\", &x); for (int i = 1; i <= x; i++) { sum += i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 x를 선언하세요.\n3. int형 변수 sum을 0으로 초기화하세요.\n4. x에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 x까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int x=0; int y=0; scanf(\"%d\", &x); for (int i = 1; i <= x; i++) { y = y + i; } printf(\"%d\", y); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 x를 0으로 초기화하세요.\n3. 정수형 변수 y를 0으로 초기화하세요.\n4. x에 대한 입력을 받아들이세요.\n5. [rep_start(1)] i를 1부터 x까지 반복하는 for 루프를 작성하세요.\n6. y에 i의 값을 더하세요.\n7. [rep_end(1)]\n8. y의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <stdlib.h> #if 1 int main() { int n; int sum = 0; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { sum = sum + i; } printf(\"%d\", sum); return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. 정수형 변수 sum을 0으로 초기화하세요.  \n4. n에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.  \n6. sum에 i를 더하는 연산을 수행하세요.  \n7. [rep_end(1)]  \n8. sum의 값을 출력하세요.  \n9. return 0;으로 프로그램을 종료하세요.  \n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char s[101]; scanf(\"%s\", s); printf(\"%d\", strlen(s)); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 s를 길이 101로 선언하여 문자열을 저장할 공간을 만드세요.\n3. scanf 함수를 사용하여 사용자로부터 문자열 입력을 받으세요.\n4. strlen 함수를 사용하여 문자열 s의 길이를 계산하여 출력하세요.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int input; scanf(\"%d\", &input); int sum = 0; for(int i = 0; i <= input; i++){ sum+=i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 input을 선언하세요.\n3. input에 값을 입력받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 input까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a=0; scanf(\"%d\", &a); int sum = 0; for (int i = 0; i < a + 1; i++) { sum = sum + i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 a까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int N=0; int sum=0; scanf(\"%d\",&N); for(int i=1;i<=N;i++){ sum=sum+i; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); int cnt = 0; for (int i = 0; i <= a; i++) { cnt += i; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 입력을 받으세요.\n4. 정수형 변수 cnt를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 a까지 반복하는 for 루프를 작성하세요.\n6. cnt에 i를 더하세요.\n7. [rep_end(1)]\n8. cnt의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int n; int a; int sum = 0; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a); sum += a; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 정수형 변수 a를 선언하세요.\n4. 정수형 변수 sum을 0으로 초기화하세요.\n5. n에 대해 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 반복적으로 a에 정수를 입력 받으세요.\n8. a의 값을 sum에 더하세요.\n9. [rep_end(1)]\n10. sum을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "void my_swap(unsigned int* a, unsigned int* b) { int tmp = *a; *a = *b; *b = tmp; } int main(void) { unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a, &b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 함수 my_swap을 정의하세요. (매개변수: unsigned int 포인터 a, unsigned int 포인터 b)\n2. 정수형 변수 tmp를 선언하고 a가 가리키는 값의 복사본을 할당하세요.\n3. a가 가리키는 값에 b가 가리키는 값을 할당하세요.\n4. b가 가리키는 값에 tmp를 할당하세요.\n5. [func_def_end(1)]\n6. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n7. unsigned int형 변수 a와 b를 선언하세요.\n8. a와 b에 대한 입력을 받으세요.\n9. my_swap 함수를 호출하여 a와 b의 값을 교환하세요.\n10. a와 b의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void my_swap(unsigned int* a, unsigned int* b) { int temp = *a; *a = *b; *b = temp; return; } int main(void) { unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a, &b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 my_swap을 정의하세요. (매개변수: unsigned int* a, unsigned int* b)\n2. 정수형 변수 temp를 선언하여 a의 값을 임시로 저장하세요.\n3. a에 b의 값을 할당하세요.\n4. b에 temp의 값을 할당하여 값을 교환하세요.\n5. return; 문으로 함수 실행을 종료하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int 형 변수 a와 b를 선언하세요.\n9. a와 b에 대한 입력을 받으세요.\n10. my_swap 함수를 호출하여 a와 b의 값을 교환하세요.\n11. a와 b의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; int b = 0; int sum = 0; scanf(\"%d\", &a); for (int i = 0; i < a; i++) { scanf(\"%d\", &b); sum = sum + b; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. 정수형 변수 b를 0으로 초기화하세요.\n4. 정수형 변수 sum을 0으로 초기화하세요.\n5. 사용자로부터 a의 값을 입력받으세요.\n6. [rep_start(1)] i를 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n7. 사용자로부터 b의 값을 입력받으세요.\n8. b를 sum에 더하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n = 0; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { for (int j = 0; j <= i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 i까지 반복하는 for 루프를 작성하세요.\n6. \"*\" 문자를 출력하세요.\n7. [rep_end(2)]\n8. 새로운 줄을 시작하기 위해 \"\\n\"을 출력하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void my_swap(unsigned int* a, unsigned int* b){ int* temp; *temp = *a; *a = *b; *b = *temp; } int main(void){ unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a, &b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 my_swap을 정의하세요. (매개변수: unsigned int 포인터 a, unsigned int 포인터 b)\n2. int형 포인터 temp를 선언하세요.\n3. [cond_start(1)] temp가 가리키는 값을 설정하는 조건문을 작성하세요.\n4. temp가 가리키는 값에 a가 가리키는 값을 저장하세요.\n5. a가 b의 값을 설정하세요.\n6. b가 temp가 가리키는 값을 저장하세요.\n7. [cond_end(1)]\n8. [func_def_end(1)]\n9. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n10. unsigned int형 변수 a와 b를 선언하세요.\n11. a와 b에 대한 입력을 받으세요.\n12. my_swap 함수를 호출하여 a와 b를 교환하세요.\n13. a와 b의 값을 출력하세요.\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N; int arr[102][102]; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%d\", &arr[i][j]); } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if (i == 0 || j == 0 || i== N-1 || j==N-1) arr[i][j] = 0; } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf(\"%d \", arr[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 102x102 크기의 2차원 배열 arr을 선언하세요.  \n4. N을 입력받으세요.  \n5. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. arr[i][j]에 정수를 입력받으세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] 현재 위치가 배열의 경계인지 확인하는 조건문을 작성하세요.  \n13. 배열의 첫 번째 행, 첫 번째 열, 마지막 행, 마지막 열이라면 arr[i][j]를 0으로 설정하세요.  \n14. [cond_end(2)]  \n15. [rep_end(2)]  \n16. [rep_end(1)]  \n17. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n18. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n19. arr[i][j]의 값을 출력하세요.  \n20. 공백을 추가하여 출력하세요.  \n21. [rep_end(2)]  \n22. 줄바꿈을 출력하세요.  \n23. [rep_end(1)]  \n24. return 0;으로 프로그램을 종료하세요.  \n25. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int n; unsigned int sum = 0; scanf(\"%d\", &n); for (unsigned int i = 1; i <= n; i++) sum += i; printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. unsigned int형 변수 sum을 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 1로 초기화하여 n까지 반복하는 for 루프를 작성하세요.\n6. i를 sum에 더하세요.\n7. [rep_end(1)]\n8. sum을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { char s[100]; gets(s); puts(s); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 문자형 배열 s를 100 크기로 선언하세요.  \n3. 사용자로부터 입력을 받기 위한 gets 함수를 호출하여 문자열을 s에 저장하세요.  \n4. puts 함수를 이용하여 s에 저장된 문자열을 출력하세요.  \n5. return 0;으로 프로그램을 종료하세요.  \n6. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a; scanf(\"%d\", &a); int b = 0; for (int i = 1; i <= a;i++) { b +=i; } printf(\"%d\", b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 사용자로부터 입력을 받으세요.\n4. 정수형 변수 b를 0으로 초기화하세요.\n5. [rep_start(1)] i를 1부터 a까지 반복하는 for 루프를 작성하세요.\n6. b에 i를 추가하여 합을 계산하세요.\n7. [rep_end(1)]\n8. b의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int a; int sum = 0; scanf(\"%d\", &a); for (int i = 0; i <= a;i++) { sum = sum + i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. a에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 a까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int ass[100]; int a; int cnt = 0; scanf(\"%d\", &a); for (int i = 0; i < a; i++) { scanf(\"%d\", &ass[i]); } for (int i = 0; i < a; i++) { cnt += ass[i]; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 배열 ass를 100 크기로 선언하세요.  \n3. 정수형 변수 a를 선언하세요.  \n4. 정수형 변수 cnt를 0으로 초기화하세요.  \n5. a에 대한 입력을 받으세요.  \n6. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n7. ass 배열의 i번째 요소에 대한 입력을 받으세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n10. cnt에 ass 배열의 i번째 요소를 더하세요.  \n11. [rep_end(1)]  \n12. cnt의 값을 출력하세요.  \n13. return 0;으로 프로그램을 종료하세요.  \n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> #include<string.h> int main() { char s[100]; gets(s); printf(\"%d\", strlen(s)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자 배열 s를 크기 100으로 선언하세요.\n3. 사용자로부터 문자열을 입력받기 위해 gets 함수를 호출하여 s에 저장하세요.\n4. s의 길이를 계산하여 출력하기 위해 printf 함수를 호출하며 %d 서식을 사용하세요.\n5. strlen(s)을 통해 s의 길이를 계산하고 결과를 출력하세요.\n6. return 0;으로 프로그램을 종료하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char s[101]; gets(s); printf(\"%s \", s); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자 배열 s를 크기 101로 선언하세요.\n3. 입력으로 문자열을 읽기 위해 gets 함수를 호출하세요.\n4. 입력된 문자열 s를 출력하기 위해 printf 함수를 사용합니다.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N; int i; int b = 0; scanf(\"%d\", &N); for(i=1; i <= N; i++) { b = b + i; } printf(\"%d\", b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 변수 i를 선언하세요.\n4. int형 변수 b를 0으로 초기화하여 합계를 저장할 준비를 하세요.\n5. N에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 1부터 N까지 반복하는 for 루프를 작성하세요.\n7. b에 i를 더하여 현재 합계를 업데이트하세요.\n8. [rep_end(1)]\n9. b의 값을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int n; int k; int sum = 0; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &k); sum = sum + k; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요. n은 입력 받을 정수의 개수입니다.\n3. 정수형 변수 k를 선언하세요. k는 각 입력 받은 숫자를 저장할 변수입니다.\n4. 정수형 변수 sum을 0으로 초기화하세요. sum은 입력 받은 숫자들의 총합을 저장할 것입니다.\n5. [cond_start(1)] n의 값을 입력 받는 조건문을 작성하세요.\n6. n의 값을 입력받으세요.\n7. [cond_end(1)]\n8. [rep_start(1)] i를 선언하여 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(2)] k의 값을 입력 받는 조건문을 작성하세요.\n10. k의 값을 입력 받으세요.\n11. [cond_end(2)]\n12. sum에 k를 더하여 업데이트하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int temp; int board[101][101]; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%d\", &temp); board[i][j] = temp; } } for (int i = 0; i < N; i++) { board[0][i] = 0; board[N-1][i] = 0; board[i][0] = 0; board[i][N - 1] = 0; } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf(\"%d \", board[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 변수 temp를 선언하세요.\n4. 101 x 101 크기의 이차원 배열 board를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n8. 각 위치에 대해 temp의 값을 입력받으세요.\n9. board[i][j]에 temp 값을 저장하세요.\n10. [rep_end(2)]\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n13. board의 첫 번째 행과 마지막 행을 0으로 설정하세요.\n14. board의 첫 번째 열과 마지막 열을 0으로 설정하세요.\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n17. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n18. board[i][j]의 값을 출력하세요.\n19. 공백을 포함하여 출력하세요.\n20. [rep_end(2)]\n21. 줄 바꿈을 출력하세요.\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N; scanf(\"%d\", &N); int sum = 0; for (int i = 0; i < N; i++) { int a; scanf(\"%d\", &a); sum = sum + a; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력을 받으세요.  \n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. int형 변수 a를 선언하세요.  \n7. a에 대한 입력을 받으세요.  \n8. sum에 a를 더하세요.  \n9. [rep_end(1)]  \n10. sum의 값을 출력하세요.  \n11. return 0;으로 프로그램을 종료하세요.  \n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); int a[n][n]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < n; i++) { a[0][i] = 0; a[n - 1][i] = 0; a[i][0] = 0; a[i][n - 1] = 0; } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { printf(\"%d \", a[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 2차원 배열 a[n][n]을 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. a[i][j]에 값 입력을 받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. a의 첫 번째 행을 0으로 설정하세요.\n12. a의 마지막 행을 0으로 설정하세요.\n13. a의 첫 번째 열을 0으로 설정하세요.\n14. a의 마지막 열을 0으로 설정하세요.\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n17. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n18. a[i][j]의 값을 출력하세요. \n19. 출력 후 공백을 추가하세요.\n20. [rep_end(2)]\n21. 줄바꿈을 출력하세요.\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a = 0; int sum = 0; scanf(\"%d\", &a); int i = 0; for (int i = 1; i <= a; i++) { sum = sum + i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. a에 정수를 입력받으세요.\n5. [rep_start(1)] i를 선언해 1부터 a까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> #include<string.h> int main() { char s[100]; gets(s); for (int i = 0; i < strlen(s) - 1; i++) { if (s[i] >= 'A' && s[i] <= 'Z') { printf(\"%c\", s[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 s를 100 크기로 선언하세요.\n3. 사용자로부터 문자열 입력을 받는 gets 함수 호출로 s에 값을 저장하세요.\n4. [rep_start(1)] i를 선언해 0부터 s의 길이 - 1까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] s 배열의 i번째 요소가 대문자 범위(A-Z)인지 확인하는 조건문을 작성하세요.\n6. 대문자라면 해당 문자를 출력하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define SECUREWARNINGS int main(){ int num; int sum=0; scanf(\"%d\",&num); for(int i=1;i<=num;i++){ sum=sum+i; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 num을 선언하세요.\n3. int형 변수 sum을 0으로 초기화하여 선언하세요.\n4. num에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 1부터 num까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하여 누적합을 계산하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int sum = 0; int a; scanf(\"%d\",&N); for(int i = 0;i < N; i++){ scanf(\"%d\",&a); sum = sum + a; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n4. 정수형 변수 a를 선언하세요.  \n5. N을 입력 받으세요.  \n6. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. 각 반복에서 정수 a를 입력 받으세요.  \n8. sum에 a를 더하여 값을 갱신하세요.  \n9. [rep_end(1)]  \n10. sum의 값을 출력하세요.  \n11. return 0;으로 프로그램을 종료하세요.  \n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N = 0; scanf(\"%d\", &N); for (int i = 1 ; i <= N ; i++) { for (int j = 0 ; j < i ; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 0으로 초기화하세요.  \n3. N에 대한 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.  \n6. 별 문자 \"*\"를 출력하세요.  \n7. [rep_end(2)]  \n8. 줄바꿈을 출력하세요.  \n9. [rep_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); for (int i = 0; i < a; i++) { for (int j = 0; j <= i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. 사용자로부터 a 값을 입력받으세요.\n4. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 i까지 반복하는 for 루프를 작성하세요.\n6. \"*\" 문자를 출력하세요.\n7. [rep_end(2)]\n8. 줄 바꿈을 위해 printf 함수를 호출하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; scanf(\"%d\", &a); for (int i = 0; i < a; i++) { for (int j = 0; j < i+1; j++) { printf(\"*\"); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 i까지 반복하는 for 루프를 작성하세요.\n6. 별 문자 '*'를 출력하세요.\n7. [rep_end(2)]\n8. 줄 바꿈을 위한 \\n을 출력하세요.\n9. [rep_end(1)]\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a; int sum = 0; scanf(\"%d\", &a); for (int i = a; i >= 1; i--) { sum += i; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. 정수형 변수 sum을 0으로 초기화하세요.\n4. a에 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 a부터 1까지 감소하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int arr[100][100]= {0, }; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%d\", &arr[i][j]); } } int arr2[100][100]={0, }; for (int i = 1; i < n - 1; i++) { for (int j = 1; j < n - 1; j++) { arr2[i][j] = arr[i][j]; } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { printf(\"%d \", arr2[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 정수를 입력받으세요.\n4. 100x100 크기의 2차원 배열 arr을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. arr[i][j]에 정수를 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. 100x100 크기의 2차원 배열 arr2를 0으로 초기화하세요.\n11. [rep_start(1)] i를 선언해 1부터 n-2까지 반복하는 for 루프를 작성하세요.\n12. [rep_start(2)] j를 선언해 1부터 n-2까지 반복하는 for 루프를 작성하세요.\n13. arr2[i][j]에 arr[i][j]의 값을 저장하세요.\n14. [rep_end(2)]\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n17. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n18. arr2[i][j]의 값을 출력하세요.\n19. 출력 후 공백을 추가하세요.\n20. [rep_end(2)]\n21. 개행 문자를 출력하세요.\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { char str[101]; gets(str); printf(\"%s\", str); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 str을 선언하여 최대 100개의 문자 저장을 위한 공간을 확보하세요.\n3. 입력된 문자열을 str에 저장하기 위해 gets 함수를 호출하세요.\n4. str의 내용을 출력하기 위해 printf 함수를 호출하세요.\n5. 프로그램을 정상 종료하기 위해 return 0;을 사용하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <stdlib.h> #if 1 int main() { int n; int a; int sum = 0; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a); sum += a; } printf(\"%d\", sum); return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 정수형 변수 a를 선언하세요.\n4. 합계를 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. 사용자로부터 n의 값을 입력 받으세요.\n6. [rep_start(1)] i를 선언하여 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 각 반복에서 사용자로부터 a의 값을 입력 받으세요.\n8. 입력받은 a를 sum에 더하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; int sum = 0; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { sum = sum+ i; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 sum을 0으로 초기화하세요.\n4. n의 값을 입력 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하여 누적합을 계산하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int array[100][100] = { -1, }; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%d \", &array[i][j]); } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { if (i == 0 || i == n - 1) { array[i][j] = 0; } if (j == 0 || j == n - 1) { array[i][j] = 0; } } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { printf(\"%d \", array[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. int형 2차원 배열 array를 선언하고 초기화하세요. (모든 요소를 -1로 설정)  \n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n7. array의 (i, j) 요소에 대한 입력을 받으세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] i가 0이거나 n-1인지 확인하는 조건문을 작성하세요.  \n13. 해당 조건이 참이면 array의 (i, j) 요소를 0으로 설정하세요.  \n14. [cond_end(2)]  \n15. [cond_start(2)] j가 0이거나 n-1인지 확인하는 조건문을 작성하세요.  \n16. 해당 조건이 참이면 array의 (i, j) 요소를 0으로 설정하세요.  \n17. [cond_end(2)]  \n18. [rep_end(2)]  \n19. [rep_end(1)]  \n20. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n21. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n22. array의 (i, j) 요소를 출력하세요.  \n23. 공백을 출력하세요.  \n24. [rep_end(2)]  \n25. 줄바꿈을 출력하세요.  \n26. [rep_end(1)]  \n27. return 0;으로 프로그램을 종료하세요.  \n28. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int sum = 0; for (int i = 0; i < n; i++) { int k; scanf(\"%d\", &k); sum = sum + k; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 정수형 변수 k를 선언하세요.\n7. k에 대한 입력을 받으세요.\n8. sum에 k를 더하세요.\n9. [rep_end(1)]\n10. sum을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); int a[n], b[n]; for (int i = 0; i < n; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; i++) { scanf(\"%d\", &b[i]); } for (int i = 0; i < n; i++) { if (b[i] <= 5) { printf(\"%d \", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 배열 a를 크기 n으로 선언하세요.\n5. 정수형 배열 b를 크기 n으로 선언하세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 요소에 값을 입력 받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. 배열 b의 i번째 요소에 값을 입력 받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] b의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.\n14. b[i]가 5 이하라면 배열 a의 i번째 요소를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { char str[101]; gets(str); int cnt = 0; for (int i = 0; str[i] != NULL; i++) { cnt++; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 저장하기 위한 char형 배열 str을 101 크기로 선언하세요.\n3. gets 함수를 사용하여 사용자로부터 입력을 받아 str에 저장하세요.\n4. int형 변수 cnt를 0으로 초기화하여 문자열의 길이를 셀 카운터를 선언하세요.\n5. [rep_start(1)] i를 선언해 str의 각 문자를 반복하여 확인하는 for 루프를 작성하세요.\n6. str[i]가 NULL이 아닌 동안 반복하세요.\n7. cnt를 1 증가시켜 현재 문자의 개수를 세세요.\n8. [rep_end(1)]\n9. cnt의 값을 출력하여 문자열의 길이를 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n = 0; scanf(\"%d\", &n); int arr[1000] = { 0 }; int sum = 0; for (int i = 0; i < n; i++) { scanf(\"%d\", &arr[i]); sum += arr[i]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n의 값을 입력 받으세요.\n4. 정수형 배열 arr를 크기 1000으로 선언하고 모든 요소를 0으로 초기화하세요.\n5. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. i번째 요소에 대한 입력을 받아 arr 배열에 저장하세요.\n8. sum에 arr[i]의 값을 더하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <stdlib.h> #if 1 int main() { int n; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { for (int j = 0; j < i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 메인 함수 int 반환형 main을 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 1부터 n까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n6. \"*\" 문자를 출력하세요.\n7. [rep_end(2)]\n8. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int n; unsigned int song[100]; unsigned int play[100]; scanf(\"%d\", &n); for(unsigned int i = 0; i < n; i++) scanf(\"%d\", &song[i]); for (unsigned int i = 0; i < n; i++) scanf(\"%d\", &play[i]); for (unsigned int i = 0; i < n; i++) { if (play[i] < 6) printf(\"%d \", song[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. unsigned int형 배열 song과 play를 각각 100 크기로 선언하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. song 배열의 i번째 요소에 값을 입력 받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. play 배열의 i번째 요소에 값을 입력 받으세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] play 배열의 i번째 요소가 6 미만인지 확인하는 조건문을 작성하세요.\n13. play[i]가 6 미만이면 song 배열의 i번째 요소를 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); if (n % 2 == 0) { printf(\"%d\", n); } if (n % 2 == 1) { printf(\"%d\", n - 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 정수형 입력을 받으세요.  \n4. [cond_start(1)] n이 짝수인지 확인하는 조건문을 작성하세요.  \n5. n이 짝수라면 n을 출력하세요.  \n6. [cond_end(1)]  \n7. [cond_start(1)] n이 홀수인지 확인하는 조건문을 작성하세요.  \n8. n이 홀수라면 n-1을 출력하세요.  \n9. [cond_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <string.h> int main() { char str[101]; scanf(\"%s\", str); printf(\"%d\", strlen(str)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열 배열 str을 크기 101로 선언하세요.\n3. str에 문자열을 입력 받으세요.\n4. str의 길이를 구하여 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0, c = 0; scanf(\"%u\", &a); for (int b = 1; b <= a; b++) { c = c + b; } printf(\"%d\", c); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 c를 0으로 초기화하세요.\n3. a에 대한 입력을 받기 위해 scanf 함수를 사용하세요.\n4. [rep_start(1)] b를 선언해 1부터 a까지 반복하는 for 루프를 작성하세요.\n5. c에 b를 더하여 업데이트하세요.\n6. [rep_end(1)]\n7. c의 값을 출력하기 위해 printf 함수를 사용하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int n; scanf(\"%d\", &n); int a; for (int i = 1; i <= n; i++) { for (int j = 0; j < i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 변수 a를 선언하세요.\n5. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n7. \"*\" 문자를 출력하세요.\n8. [rep_end(2)]\n9. 줄바꿈을 위해 printf(\"\\n\");를 호출하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { long int a[100][100]; int b; scanf(\"%d\", &b); for (int i = 0; i < b; i++) { for (int j = 0; j < b; j++) { scanf(\"%ld\", &a[i][j]); } } for (int i = 0; i < b; i++) { for (int j = 0; j < b; j++) { if (i == b-1 || j == b-1 || i == 0 || j == 0) { a[i][j] = 0; } else { continue; } } } for (int i = 0; i < b; i++) { for (int j = 0; j < b; j++) { printf(\"%ld \", a[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 2차원 배열 a를 크기 100x100으로 선언하세요.  \n3. 정수형 변수 b를 선언하세요.  \n4. b에 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n7. b x b 크기의 배열 a의 각 요소에 값을 입력받으세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] i가 b-1이거나 j가 b-1이거나 i가 0이거나 j가 0인지 확인하는 조건문을 작성하세요.  \n13. 해당 조건이 참이라면 a[i][j]를 0으로 설정하세요.  \n14. [cond_end(2)]  \n15. [rep_end(2)]  \n16. [rep_end(1)]  \n17. [rep_start(1)] i를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n18. [rep_start(2)] j를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.  \n19. 배열 a의 각 요소를 출력하세요.  \n20. 각 행의 출력이 끝날 때마다 줄바꿈을 하세요.  \n21. [rep_end(2)]  \n22. [rep_end(1)]  \n23. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { char str[101]; gets(str); for (int i = 0; str[i] != NULL; i++) { if (str[i] >= 65&& str[i]<97) { printf(\"%c\", str[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 str을 선언하여 최대 100자의 문자열을 저장할 공간을 만드세요.\n3. 사용자가 입력한 문자열을 str에 저장하세요.\n4. [rep_start(1)] i를 선언해 str의 각 문자를 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] str[i]가 NULL이 아닌지 확인하는 조건문을 작성하세요.\n6. [cond_start(3)] str[i]가 대문자인지 확인하는 조건문을 작성하세요.\n7. 대문자라면 해당 문자를 출력하세요.\n8. [cond_end(3)]\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102]; scanf(\"%s\", word); printf(\"%d\", strlen(word)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 선언하여 102개의 문자 공간을 만드세요.\n3. scanf 함수를 사용하여 사용자로부터 문자열을 입력받으세요.\n4. strlen 함수를 이용하여 입력받은 문자열의 길이를 계산하고 이를 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int N = 0; int sum = 0; scanf(\"%d\", &N); for(int i=0; i<=N; i++){ sum = sum + i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. 정수형 변수 sum을 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 N까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int x; scanf(\"%d\", &x); int a[100][100] = { 0 }; for (int i = 0; i < x; i++) { for (int k = 0; k < x; k++) { scanf(\"%d\", &a[i][k]); } } for (int i = 0; i < x; i++) { a[i][0] = 0; a[i][x-1] = 0; a[0][i] = 0; a[x-1][i] = 0; } for (int i = 0; i < x; i++) { for (int k = 0; k < x; k++) { printf(\"%d \", a[i][k]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 x를 선언하세요.  \n3. x의 값을 입력받으세요.  \n4. 100x100 크기의 2차원 배열 a를 0으로 초기화하세요.  \n5. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] k를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.  \n7. 배열 a의 각 요소에 값을 입력받으세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.  \n11. 배열 a의 첫 번째 열과 마지막 열, 첫 번째 행과 마지막 행의 값을 0으로 설정하세요.  \n12. [rep_end(1)]  \n13. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.  \n14. [rep_start(2)] k를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.  \n15. 배열 a의 각 요소를 출력하세요.  \n16. [rep_end(2)]  \n17. printf(\"\\n\")으로 줄 바꿈을 수행하세요.  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a; scanf(\"%u\", &a); a = a & 0xfffffffe; printf(\"%u\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 a를 선언하세요.  \n3. a에 양의 정수를 입력받으세요.  \n4. a의 가장 오른쪽 비트를 0으로 설정하기 위해 0xfffffffe와 비트 AND 연산을 수행하세요.  \n5. 결과를 다시 a에 저장하세요.  \n6. a의 값을 출력하세요.  \n7. return 0;으로 프로그램을 종료하세요.  \n8. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define _CRT_SECURE_NO_WARNINGS int main(void) { int N,i; int sum = 0; scanf(\"%d\", &N); for (i = 1; i <= N; i++) { sum = sum + i; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N과 i를 선언하세요.\n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n4. N에 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. sum에 i를 더하여 누적합을 계산하세요.\n7. [rep_end(1)]\n8. sum의 값을 출력하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int arr[101] = { 0, }; int n; unsigned int k; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%u\", &k); arr[i] = k; } for (int i = n-1; i >= 0; i--) { printf(\"%u \", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 arr를 크기 101로 선언하고 0으로 초기화하세요.\n3. 정수형 변수 n을 선언하세요.\n4. 부호 없는 정수형 변수 k를 선언하세요.\n5. n에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. k에 대한 입력을 받으세요.\n8. arr[i]에 k의 값을 저장하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 n-1부터 0까지 반복하는 for 루프를 작성하세요.\n11. arr[i]의 값을 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i, N, A; int sum = 0; scanf(\"%d\", &N); for (i = 1; i <= N; i++) { scanf(\"%d\", &A); sum += A; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i, N, A를 선언하세요.  \n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n4. N의 값을 입력받으세요.  \n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.  \n6. 각 반복에서 A의 값을 입력받으세요.  \n7. sum에 A를 더하세요.  \n8. [rep_end(1)]  \n9. sum을 출력하세요.  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int arr[5][5] = { 0 }; int sum = 0; for (int i = 0; i < 5; i++) { for (int j = 0; j < 5; j++) { scanf(\"%d\", &arr[i][j]); } } int n = 0; scanf(\"%d\", &n); for (int i = 0; i < 5; i++) { for (int j = 0; j < 5; j++) { if (arr[i][j] >= n) { sum++; } } } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 5x5 크기의 2차원 정수 배열 arr을 0으로 초기화하여 선언하세요.  \n3. 정수형 변수 sum을 0으로 초기화하세요.  \n4. [rep_start(1)] i를 선언해 0부터 4까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 선언해 0부터 4까지 반복하는 for 루프를 작성하세요.  \n6. 배열 arr[i][j]에 값을 입력받기 위해 scanf 함수를 사용하세요.  \n7. [rep_end(2)]  \n8. [rep_end(1)]  \n9. 정수형 변수 n을 선언하고 입력받으세요.  \n10. [rep_start(1)] i를 선언해 0부터 4까지 반복하는 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 선언해 0부터 4까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] arr[i][j]의 값이 n 이상인지 확인하는 조건문을 작성하세요.  \n13. n 이상이라면 sum을 1 증가시키세요.  \n14. [cond_end(2)]  \n15. [rep_end(2)]  \n16. [rep_end(1)]  \n17. sum의 값을 출력하세요.  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102]; gets(word); printf(\"%s\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 102 크기로 선언하여 입력된 문자열을 저장할 공간을 만드세요.\n3. gets 함수를 사용하여 사용자로부터 문자열을 입력받으세요.\n4. printf 함수를 이용해 입력받은 문자열을 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a = 0; scanf(\"%d\", &a); for (int i = 0; i <= a-1; i++) { for (int j = 0; j <= i; j++) { printf(\"*\"); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 i까지 반복하는 for 루프를 작성하세요.\n6. \"*\"를 출력하세요.\n7. [rep_end(2)]\n8. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n9. [rep_end(1)]\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define SECUREWORNINGS void my_swap(unsigned int* a, unsigned int* b){ int tmp; tmp=*a; *a=*b; *b=tmp; } int main(void){ unsigned int a, b; scanf(\"%u %u\", &a, &b); my_swap(&a,&b); printf(\"%d %d\", a, b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형의 my_swap 함수를 정의하세요. (매개변수: unsigned int* a, unsigned int* b)\n2. int형 변수 tmp를 선언하세요.\n3. a가 가리키는 값을 tmp变量에 저장하세요.\n4. a가 가리키는 위치에 b가 가리키는 값을 저장하세요.\n5. b가 가리키는 위치에 tmp 값을 저장하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int형 변수 a와 b를 선언하세요.\n9. a와 b에 대한 입력을 scanf 함수를 통해 받으세요.\n10. my_swap 함수를 호출하여 a와 b의 값을 서로 변경하세요.\n11. a와 b의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); int ass[100][100] = { 0 }; for (int i = 0; i < a; i++) { for (int j = 0; j < a; j++) { scanf(\"%d\", &ass[i][j]); } } for (int i = 0; i < a; i++) { ass[0][i] = 0; ass[i][0] = 0; ass[a - 1][i] = 0; ass[i][a - 1] = 0; } for (int i = 0; i < a; i++) { for (int j = 0; j < a; j++) { printf(\"%d \", ass[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 대한 입력을 받으세요.\n4. 100x100 크기의 2차원 배열 ass를 0으로 초기화하여 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n7. ass[i][j]에 입력 값을 읽어 저장하세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n11. ass의 첫 번째 행 (ass[0][i]) 값을 0으로 설정하세요.\n12. ass의 첫 번째 열 (ass[i][0]) 값을 0으로 설정하세요.\n13. ass의 마지막 행 (ass[a-1][i]) 값을 0으로 설정하세요.\n14. ass의 마지막 열 (ass[i][a-1]) 값을 0으로 설정하세요.\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n17. [rep_start(2)] j를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n18. ass[i][j]를 출력하세요. \n19. 공백을 출력하세요.\n20. [rep_end(2)]\n21. 한 줄 바꿈을 출력하세요.\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a; scanf(\"%d\", &a); for(int i=0;i<a;i++){ for(int j=0;j<=i;j++){ printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 선언하세요.  \n3. 사용자로부터 a 값을 입력받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 선언해 0부터 i까지 반복하는 for 루프를 작성하세요.  \n6. 별표(*)를 출력하세요.  \n7. [rep_end(2)]  \n8. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.  \n9. [rep_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int cnt = 0; char str[100]; scanf(\"%s\", str); for (int i = 0; str[i] != '\\0'; i++) { cnt++; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 cnt를 0으로 초기화하세요.  \n3. char형 배열 str을 선언하여 크기를 100으로 설정하세요.  \n4. str에 문자열을 입력받기 위해 scanf 함수를 사용하세요.  \n5. [rep_start(1)] i를 선언하여 str의 각 문자에 대해 반복하는 for 루프를 작성하세요.  \n6. 루프의 종료 조건으로 str[i]가 널 문자('\\0')가 아닌지 확인하세요.  \n7. 반복하는 동안 cnt를 1 증가시켜 문자열의 길이를 세세요.  \n8. [rep_end(1)]  \n9. cnt를 출력하세요.  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; scanf(\"%d\", &N); int S = 0; for (int i = 1; i <= N; i++) { S = S + i; } printf(\"%d\", S); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 입력을 받으세요.\n4. 소수의 합을 저장할 int형 변수 S를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n6. S에 i의 값을 더하세요.\n7. [rep_end(1)]\n8. S의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); for (int i = 1; i <= n; i++) { for (int j = 0; j < i; j++) { printf(\"*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 1부터 n까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.  \n6. '*' 문자를 출력하세요.  \n7. [rep_end(2)]  \n8. 줄바꿈을 출력하세요.  \n9. [rep_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <string.h> int main() { char str[101]; gets(str); printf(\"%s\", str); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 str을 선언하여 길이는 101로 설정하세요.\n3. 입력을 받기 위해 gets 함수를 사용하여 str에 문자열을 읽어오세요.\n4. 읽어온 문자열 str을 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int n; scanf(\"%d\",&n); int a[n]; int sum = 0; for(int i=0;i<n;i++){ scanf(\"%d\", &a[i]); sum += a[i]; } printf(\"%d\\n\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. 정수형 배열 a를 n 크기로 선언하세요.  \n5. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n7. 배열 a의 i번째 요소에 대한 입력을 받으세요.  \n8. 해당 요소를 sum에 더하세요.  \n9. [rep_end(1)]  \n10. sum을 출력하세요.  \n11. return 0;으로 프로그램을 종료하세요.  \n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int num[102] = { 0 }; for (int i = 0; i < n; i++) { scanf(\"%d\", &num[i]); } printf(\"%d\", num[n / 2]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. 정수형 배열 num을 크기 102로 선언하고 모두 0으로 초기화하세요.  \n5. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. 각 반복마다 num 배열의 i번째 요소에 대한 입력을 받으세요.  \n7. [rep_end(1)]  \n8. n이 짝수일 때, num[n / 2]는 중앙값이므로 이를 출력하세요.  \n9. return 0;으로 프로그램을 종료하세요.  \n10. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int a; scanf(\"%d\", &a); int arr[101]; int sum = 0; for (int i = 0; i < a; i++) { scanf(\"%d\", &arr[i]); sum += arr[i]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 대한 입력을 받으세요.\n4. 정수형 배열 arr[101]을 선언하세요.\n5. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n7. 루프 안에서 arr[i]에 대한 입력을 받으세요.\n8. 입력받은 값을 sum에 더하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n = 0; scanf(\"%d\", &n); int arr[2][100]={0, }; for (int i = 0; i < 2; i++) { for (int j = 0; j < n; j++) { scanf(\"%d\", &arr[i][j]); } } for (int i = 0; i < n; i++) { if (arr[1][i] <= 5) { printf(\"%d \", arr[0][i]); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n의 값을 입력받으세요.\n4. 2x100 크기의 정수형 배열 arr을 0으로 초기화하여 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. arr[i][j]에 값을 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[1][i]가 5 이하인지 확인하는 조건문을 작성하세요.\n12. arr[1][i]가 5 이하라면 arr[0][i]를 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #include <string.h> int main(){ char ch[101]; gets(ch); printf(\"%s\",ch); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 ch를 101 크기로 선언합니다.  \n3. 사용자로부터 입력을 받기 위한 gets 함수를 호출하여 ch 배열에 저장하세요.  \n4. ch 배열에 저장된 문자열을 출력하기 위해 printf 함수를 사용하세요.  \n5. return 0;으로 프로그램을 종료하세요.  \n6. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int A[7][7]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%d\", &A[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i + j == 5) { A[i][j] = 999; } } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (A[i][j] == 999) { printf(\" \"); continue; } printf(\"%d \", A[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 7x7 정수형 배열 A를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. A[i][j]에 입력값을 저장하기 위해 scanf 함수를 호출하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.\n11. i와 j의 합이 5라면 A[i][j]에 999를 할당하세요.\n12. [cond_end(2)]\n13. [rep_end(2)]\n14. [rep_end(1)]\n15. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n16. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n17. [cond_start(2)] A[i][j]가 999인지 확인하는 조건문을 작성하세요.\n18. A[i][j]가 999라면 공백을 출력하고, continue로 다음 반복을 진행하세요.\n19. A[i][j]의 값을 출력하세요.\n20. [rep_end(2)]\n21. printf 함수를 호출하여 새 줄을 출력하세요.\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int N; scanf(\"%d\",&N); for(int i = 1; i<=N; i++){ for(int j = 0; j < i; j++){ printf(\"\\*\"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n6. \"*\"를 출력하세요.\n7. [rep_end(2)]\n8. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <stdlib.h> #if 1 int main() { int n; int arr[100][100]; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%d\", &arr[i][j]); } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { if (i == 0 || i == n-1) { printf(\"0 \"); } else if (j == 0 || j == n-1) { printf(\"0 \"); } else { printf(\"%d \", arr[i][j]); } } } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 100x100 크기의 2차원 배열 arr를 선언하세요.\n4. n의 값을 입력받으세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. arr 배열의 각 요소에 대한 값을 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] i가 0이거나 n-1인지 확인하는 조건문을 작성하세요.\n13. i가 0이거나 n-1이면 0을 출력하세요.\n14. [cond_end(2)]\n15. [cond_start(2)] j가 0이거나 n-1인지 확인하는 조건문을 작성하세요.\n16. j가 0이거나 n-1이면 0을 출력하세요.\n17. [cond_end(2)]\n18. 그렇지 않다면 arr 배열의 요소를 출력하세요.\n19. [rep_end(2)]\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int a; scanf(\"%d\", &a); if (a & 0b01) a--; printf(\"%d\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. a에 정수를 입력받으세요.\n4. [cond_start(1)] a의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.\n5. a의 최하위 비트가 1이라면 a에서 1을 빼세요.\n6. [cond_end(1)]\n7. a의 값을 출력하세요.\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int Alist[100]; int Blist[100]; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &Alist[i]); } for (int i = 0; i < N; i++) { scanf(\"%d\", &Blist[i]); } for (int i = 0; i < N; i++) { if (Blist[i] <= 5) { printf(\"%d \", Alist[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 배열 Alist[100]과 Blist[100]을 선언하세요.\n4. N의 값을 입력받기 위해 scanf 함수를 사용하세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. Alist 배열에 i번째 값으로 입력받은 정수 값을 저장하세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n9. Blist 배열에 i번째 값으로 입력받은 정수 값을 저장하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] Blist[i]가 5 이하인지 확인하는 조건문을 작성하세요.\n13. Blist[i]가 5 이하라면 Alist[i]의 값을 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #include <string.h> int main(){ char ch[101]; gets(ch); printf(\"%d\\n\",strlen(ch)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자 배열 ch를 크기 101로 선언하세요.\n3. 사용자로부터 입력을 받기 위해 gets 함수를 호출하여 ch에 문자열을 저장하세요.\n4. ch의 길이를 계산하기 위해 strlen 함수를 호출하고, 그 결과를 출력하세요.\n5. 프로그램을 종료하기 위해 return 0;을 사용하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int number[102] = { 0 }; for (int i = 0; i < n; i++) { int k; scanf(\"%d\", &k); number[k]++; } for (int i = 1; i < 102; i++) { if (number[i] != 0) { printf(\"%d:%d\\n\", i, number[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 배열 number[102]를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 정수형 변수 k를 선언하세요.\n7. k에 대한 입력을 받으세요.\n8. number[k]의 값을 1 증가시키세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 1부터 101까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] number[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n12. number[i]가 0이 아니라면 i와 number[i]를 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); printf(\"%X\", N); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력 값을 받으세요.  \n4. 입력된 N을 16진수 형식으로 출력하세요.  \n5. return 0;으로 프로그램을 종료하세요.  \n6. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int N=0; int sum=0; int list[30]={0}; scanf(\"%d\",&N); for(int i=0;i<N;i++){ scanf(\"%d\",&list[i]); sum=sum+list[i]; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. 정수형 변수 sum을 0으로 초기화하세요.\n4. 크기가 30인 정수형 배열 list를 0으로 초기화하여 선언하세요.\n5. N에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. list 배열의 i번째 인덱스에 정수형 값을 입력받으세요.\n8. sum에 list[i]를 더하세요.\n9. [rep_end(1)]\n10. sum을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a = 0; scanf(\"%d\", &a); int s = 1; for (int i = 0; i < a; i++) { for (int j = 0; j < s; j++) { printf(\"*\"); } printf(\"\\n\"); s++; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 값을 입력받으세요.\n4. 정수형 변수 s를 1로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 s-1까지 반복하는 for 루프를 작성하세요.\n7. \"*\" 문자를 출력하세요.\n8. [rep_end(2)]\n9. 줄바꿈을 위해 printf(\"\\n\")을 호출하세요.\n10. s를 1 증가시키세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void){ int N; int sum = 0; scanf(\"%d\",&N); for(int i = 1;i<=N;i++) { sum = sum+i; } printf(\"%d\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.  \n4. N에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 1부터 N까지 반복하는 for 루프를 작성하세요.  \n6. sum에 i를 더하여 누적합을 계산하세요.  \n7. [rep_end(1)]  \n8. sum을 출력하세요.  \n9. return 0;으로 프로그램을 종료하세요.  \n10. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <string.h> int main() { char str[101]; scanf(\"%s\", str); int length = strlen(str); printf(\"%d\", length); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 사용할 char형 배열 str을 크기 101로 선언하세요.\n3. str에 문자열 입력을 받으세요.\n4. str의 길이를 계산하는 int형 변수 length를 선언하고, strlen 함수를 호출하여 str의 길이를 가져옵니다.\n5. length를 출력하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n; scanf(\"%d\", &n); int k = 0; int sum = 0; for (int i = 0; i < n; i++) { scanf(\"%d\", &k); sum += k; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. int형 변수 k를 0으로 초기화하세요.\n5. 소수의 합을 저장할 int형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. i에 대한 입력을 받아 k에 저장하세요.\n8. sum에 k를 더하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; long int A[2][100]; scanf(\"%d\", &N); for(int i = 0;i<2;i++){ for (int j = 0; j < N; j++) { scanf(\"%d\", &A[i][j]); } } for (int i = 0; i < N; i++) { if (A[1][i] <= 5) { printf(\"%d \", A[0][i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 이차원 배열 A를 2x100 크기로 선언하세요.\n4. N의 값을 입력받기 위해 scanf 함수를 사용하세요.\n5. [rep_start(1)] i를 0부터 1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 각 요소에 값을 입력받기 위해 scanf 함수를 사용하세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] A[1][i]가 5 이하인지 확인하는 조건문을 작성하세요.\n12. A[1][i]가 5 이하라면 배열 A의 첫 번째 행의 값을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; int arr[10000] = { 0 }; int mid = 0; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &arr[i]); } mid = N / 2; printf(\"%d\",arr[mid]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 길이가 10000인 정수형 배열 arr을 0으로 초기화하여 선언하세요.\n4. 정수형 변수 mid를 선언합니다. 초기값은 0입니다.\n5. N에 대해 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 arr의 i번째 요소에 입력을 받으세요.\n8. [rep_end(1)]\n9. mid를 N을 2로 나눈 값으로 설정하세요.\n10. 중간 값 arr[mid]를 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char str[100]; gets(str); printf(\"%s\",str); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자형 배열 str을 크기 100으로 선언하세요.\n3. 문자열을 입력받기 위해 gets 함수를 호출하세요.\n4. str에 입력된 문자열을 저장하세요.\n5. str에 저장된 문자열을 출력하기 위해 printf 함수를 호출하세요.\n6. str의 내용을 출력하세요.\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; scanf(\"%d\", &N); if (N % 2 == 1) { N= N-1; } printf(\"%d\", N); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력을 받으세요.  \n4. [cond_start(1)] N이 홀수인지 확인하는 조건문을 작성하세요.  \n5. N이 홀수라면 1을 빼서 N을 짝수로 만드세요.  \n6. [cond_end(1)]  \n7. N의 값을 출력하세요.  \n8. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char str[1000]; gets(str); printf(\"%s\", str); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 저장할 char 배열 str을 크기 1000으로 선언하세요.\n3. 사용자로부터 문자열을 입력 받기 위해 gets 함수를 호출하세요.\n4. 입력받은 문자열을 출력하기 위해 printf 함수를 사용하세요.\n5. [func_def_end(1)]\n6. return 0;으로 프로그램을 종료하세요."
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #include <math.h> int main() { int a[100] = {}; int b= 0; scanf(\"%d\", &b); for (int i = 0; i < b; i++) { scanf(\"%d\", &a[i]); } int mid = round(b / 2); printf(\"%d\", a[mid]); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 a를 선언하고 100개의 요소를 가진 배열을 초기화하세요.\n3. 정수형 변수 b를 선언하세요.\n4. 사용자로부터 정수 하나를 입력받아 b에 저장하세요.\n5. [rep_start(1)] i를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.\n6. 사용자로부터 b개의 정수를 입력받아 a 배열에 저장하세요.\n7. [rep_end(1)]\n8. b를 2로 나눈 값의 반올림 결과를 mid 변수에 저장하세요.\n9. mid 인덱스에 해당하는 a 배열의 값을 출력하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 int main() { int n; int arr[100]; int brr[100]; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &arr[i]); } for (int i = 0; i < n; i++) { scanf(\"%d\", &brr[i]); } for (int i = 0; i < n; i++) { if (brr[i] <= 5) { printf(\"%d \", arr[i]); } } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. 정수형 배열 arr과 brr를 각각 100 크기로 선언하세요.  \n4. n의 값을 입력받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. 각 arr 배열의 i번째 요소에 정수를 입력받으세요.  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n9. 각 brr 배열의 i번째 요소에 정수를 입력받으세요.  \n10. [rep_end(1)]  \n11. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] brr[i]가 5 이하인지를 확인하는 조건문을 작성하세요.  \n13. brr[i]가 5 이하라면 arr[i]를 출력하세요.  \n14. [cond_end(2)]  \n15. [rep_end(1)]  \n16. return 0;으로 프로그램을 종료하세요.  \n17. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int a; int b; int sum = 0; scanf(\"%d\", &a); for (int i = 0; i < a; i++) { scanf(\"%d\",&b); sum = sum + b; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. 정수형 변수 b를 선언하세요.\n4. int형 변수 sum을 0으로 초기화하여 선언하세요.\n5. scanf를 사용하여 사용자로부터 a의 값을 입력받으세요.\n6. [rep_start(1)] i를 0으로 초기화하여 a보다 작을 때까지 반복하는 for 루프를 작성하세요.\n7. scanf를 사용하여 사용자로부터 b의 값을 입력받으세요.\n8. sum에 b를 더하여 업데이트하세요.\n9. [rep_end(1)]\n10. sum의 값을 출력하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); int a[n], b[n]; for (int i = 0; i < n; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; i++) { scanf(\"%d\", &b[i]); } for (int i = 0; i < n; i++) { if (b[i] <= 5) { printf(\"%d \", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 배열 a[n]을 선언하여 n개의 요소를 저장할 공간을 만드세요.\n5. 정수형 배열 b[n]을 선언하여 n개의 요소를 저장할 공간을 만드세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 요소에 대한 입력을 받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. 배열 b의 i번째 요소에 대한 입력을 받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] b의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.\n14. b[i]가 5 이하라면 배열 a의 i번째 요소를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a, b; scanf(\"%u %u\", &a, &b); unsigned int c = ~(a & b); unsigned int d = (a | b); unsigned int q = (c & d); printf(\"%u %u %u\", c, d, q); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 두 개의 unsigned int형 변수 a와 b를 선언하세요.\n3. a와 b에 대한 입력을 받으세요. \n4. unsigned int형 변수 c를 선언하고 a와 b의 비트 AND 연산에 NOT을 적용하여 초기화하세요.\n5. unsigned int형 변수 d를 선언하고 a와 b의 비트 OR 연산으로 초기화하세요.\n6. unsigned int형 변수 q를 선언하고 c와 d의 비트 AND 연산으로 초기화하세요.\n7. c, d, q의 값을 출력하세요.\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; unsigned int A[100]; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } for (int j = N - 1; j >= 0; j--) { printf(\"%u \", A[j]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 부호 없는 정수형 배열 A를 크기 100으로 선언하세요.\n4. N의 값을 입력받으세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. i번째 배열 A의 요소에 부호 없는 정수 값을 입력받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] j를 선언해 N-1부터 0까지 반복하는 for 루프를 작성하세요.\n9. j번째 배열 A의 요소를 출력하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a; scanf(\"%u\", &a); a = a & 0xFFFFFFFE; printf(\"%u\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. a에 대한 입력을 받기 위해 scanf 함수를 호출하세요.\n4. a의 가장 하위 비트를 0으로 만들기 위해 a와 0xFFFFFFFE 비트 연산을 수행하세요.\n5. 수정된 a의 값을 출력하기 위해 printf 함수를 호출하세요.\n6. return 0;으로 프로그램을 종료하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ unsigned int N; scanf(\"%u\",&N); printf(\"%X\", N); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 N을 선언하세요.\n3. N에 대한 입력을 받기 위해 scanf 함수를 호출하세요.\n4. 사용자로부터 입력된 값을 N에 저장하세요.\n5. N의 값을 16진수 형식으로 출력하기 위해 printf 함수를 호출하세요.\n6. [func_def_end(1)]\n7. return 0;으로 프로그램을 종료하세요."
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N = 6; unsigned int a[N][N]; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if ((i + j) == 5) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 6으로 초기화하세요.  \n3. N x N 크기의 unsigned int 배열 a를 선언하세요.  \n4. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. a 배열의 a[i][j] 위치에 정수를 입력받아 저장하세요.  \n7. [rep_end(2)]  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n10. [rep_start(2)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n11. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.  \n12. i와 j의 합이 5일 경우, 공백을 출력하세요.  \n13. [cond_end(2)]  \n14. [cond_start(2)] i와 j의 합이 5가 아닐 경우를 처리하는 조건문을 작성하세요.  \n15. a[i][j] 값을 출력하세요.  \n16. [cond_end(2)]  \n17. printf(\"\\n\")을 호출하여 줄 바꿈을 출력하세요.  \n18. [rep_end(2)]  \n19. [rep_end(1)]  \n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); unsigned int a[N][N]; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if ((i + j) == N - 1) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 값을 입력받으세요.  \n4. unsigned int형 2D 배열 a를 N×N 크기로 선언하세요.  \n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. a[i][j]에 값을 입력받으세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 또 다른 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] (i + j)가 N-1인지 확인하는 조건문을 작성하세요.  \n13. 만약 조건이 참이라면 공백을 출력하세요.  \n14. [cond_end(2)]  \n15. 조건이 거짓일 경우, a[i][j]를 출력하되 공백을 추가하세요.  \n16. [rep_end(2)]  \n17. 줄 바꿈을 위해 개행 문자를 출력하세요.  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void swap(int *a, int *b); void swap_us(unsigned int *a, unsigned int *b); int main() { int N, k = 0; scanf(\"%d\", &N); unsigned int arr[N]; unsigned int a1[N]; int a2[N]; for (int i = 0; i < N; i++) { a1[i] = 0; a2[i] = 0; } for (int i = 0; i < N; i++) { scanf(\"%u\", &arr[i]); int duplicated = 0, j; for (j = 0; j < i; j++) { if (arr[i] == arr[j]) { if (duplicated) { continue; } duplicated = 1; for (int x = 0; x < i; x++) { if (a1[x] == arr[j]) { a2[x]++; break; } } } } if (duplicated == 0) { a1[k] = arr[i]; a2[k]++; k++; } } for (int i = 0; i < N - 1; i++) { for (int j = 0; j < N - i - 1; j++) { if (a1[j] > a1[j + 1] && (a2[j + 1] != 0)) { swap_us(&a1[j], &a1[j + 1]); swap(&a2[j], &a2[j + 1]); } } } for (int i = 0; i < N; i++) { if (a2[i] == 0) { continue; } else { printf(\"%d:%d\\n\", a1[i], a2[i]); } } return 0; } void swap(int *a, int *b) { int tmp = *a; *a = *b; *b = tmp; } void swap_us(unsigned int *a, unsigned int *b) { unsigned int tmp = *a; *a = *b; *b = tmp; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 swap을 정의하세요. (매개변수: int *a, int *b)\n2. 두 정수 a와 b의 값을 서로 교환하는 tmp 변수를 선언하세요.\n3. *a의 값을 tmp에 저장하세요.\n4. *b의 값을 *a에 저장하세요.\n5. tmp의 값을 *b에 저장하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] void 반환형 함수 swap_us을 정의하세요. (매개변수: unsigned int *a, unsigned int *b)\n8. 두 unsigned int a와 b의 값을 서로 교환하는 tmp 변수를 선언하세요.\n9. *a의 값을 tmp에 저장하세요.\n10. *b의 값을 *a에 저장하세요.\n11. tmp의 값을 *b에 저장하세요.\n12. [func_def_end(1)]\n13. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n14. 정수형 변수 N을 선언하고, k를 0으로 초기화하세요.\n15. N의 값을 입력받으세요.\n16. unsigned int형 배열 arr[N], a1[N]을 선언하세요.\n17. int형 배열 a2[N]을 선언하세요.\n18. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n19. a1[i]와 a2[i]를 0으로 초기화하세요.\n20. [rep_end(1)]\n21. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n22. unsigned int형 arr[i]에 값을 입력받으세요.\n23. int형 변수를 duplicated를 0으로 초기화하고, j를 선언하세요.\n24. [rep_start(2)] j를 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n25. [cond_start(2)] arr[i]가 arr[j]와 같은지 확인하는 조건문을 작성하세요.\n26. [cond_start(3)] 이전에 중복이 있었는지 확인하는 조건문을 작성하세요.\n27. 중복이 있었으면 다음 반복으로 넘어가세요.\n28. 중복이 없었던 경우 duplicated를 1로 설정하세요.\n29. [rep_start(3)] x를 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n30. [cond_start(4)] a1[x]가 arr[j]와 같은지 확인하는 조건문을 작성하세요.\n31. a2[x]를 증가시키고 반복문을 종료하세요.\n32. [cond_end(4)]\n33. [rep_end(3)]\n34. [cond_end(3)]\n35. [cond_end(2)]\n36. [cond_start(2)] duplicated가 0일 때, a1[k]에 arr[i]를 저장하고 a2[k]를 증가시키세요.\n37. k를 증가시키세요.\n38. [cond_end(2)]\n39. [rep_end(1)]\n40. [rep_start(1)] i를 0부터 N-2까지 반복하는 for 루프를 작성하세요.\n41. [rep_start(2)] j를 0부터 N-i-2까지 반복하는 for 루프를 작성하세요.\n42. [cond_start(2)] a1[j]가 a1[j+1]보다 큰지 확인하는 조건문을 작성하세요.\n43. [cond_start(3)] a2[j+1]이 0이 아닌지 확인하는 조건문을 작성하세요.\n44. swap_us 함수를 호출하여 a1[j]와 a1[j+1]을 스왑하세요.\n45. swap 함수를 호출하여 a2[j]와 a2[j+1]을 스왑하세요.\n46. [cond_end(3)]\n47. [cond_end(2)]\n48. [rep_end(2)]\n49. [rep_end(1)]\n50. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n51. [cond_start(2)] a2[i]가 0인지 확인하는 조건문을 작성하세요.\n52. 중복이 없다면 다음 반복으로 넘어가세요.\n53. 아니면 a1[i]와 a2[i]의 값을 출력하세요.\n54. [cond_end(2)]\n55. [rep_end(1)]\n56. return 0;으로 프로그램을 종료하세요.\n57. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define MAX 100 int main(){ char s[MAX]; gets(s); int len = 0; while(1){ if(s[len] == '\\0'){break;} else{len++;} } for(int i=0;i<len;i++){ if((s[i] >= 'A') && (s[i] <= 'Z')){ printf(\"%c\", s[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. MAX 상수를 100으로 정의하세요.  \n3. char형 배열 s를 선언하여 최대 100개의 문자를 저장할 수 있도록 합니다.  \n4. gets 함수를 사용하여 입력된 문자열을 배열 s에 저장하세요.  \n5. int형 변수 len을 0으로 초기화하여 문자열 길이를 카운트할 준비를 하세요.  \n6. [rep_start(1)] 무한 루프를 시작하세요.  \n7. [cond_start(2)] 문자열의 끝('\\0')을 확인하는 조건문을 작성하세요.  \n8. 문자열의 끝에 도달하면 루프를 종료하세요.  \n9. [cond_end(2)]  \n10. len 변수를 1 증가시켜 문자열 길이를 카운트하세요.  \n11. [rep_end(1)]  \n12. [rep_start(1)] i를 0으로 초기화하고 len까지 반복하는 for 루프를 시작하세요.  \n13. [cond_start(2)] s[i]가 대문자 범위(A~Z)에 있는지 확인하는 조건문을 작성하세요.  \n14. 대문자라면 해당 문자를 출력하세요.  \n15. [cond_end(2)]  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> const int N = 5; int main() { unsigned int M[N][N]; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%u\", &M[i][j]); if (i == j) M[i][j] = 0; } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf(\"%u \", M[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 상수 N을 5로 설정합니다.\n3. unsigned int형 2차원 배열 M을 N x N 크기로 선언합니다.\n4. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. M 배열의 i번째 행, j번째 열에 입력값을 저장하기 위해 scanf 함수를 호출합니다.\n7. [cond_start(3)] i와 j가 같은지 비교하는 조건문을 작성하세요.\n8. i와 j가 같다면 M[i][j]의 값을 0으로 설정합니다.\n9. [cond_end(3)]\n10. [rep_end(2)]\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n13. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n14. M 배열의 i번째 행, j번째 열의 값을 출력하기 위해 printf 함수를 호출합니다.\n15. 공백을 출력합니다.\n16. [rep_end(2)]\n17. 줄바꿈을 위해 printf 함수를 빈 문자열로 호출합니다.\n18. [rep_end(1)]\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> const int N = 6; int main() { unsigned int M[N][N]; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%u\", &M[i][j]); } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf(\"%u \", M[i][j]); if (j == 2) printf(\" \"); } printf(\"\\n\"); if (i == 2) printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 상수 N을 6으로 정의하세요.\n3. [rep_start(1)] 2차원 unsigned int 배열 M을 선언해 N x N 크기로 초기화하세요.\n4. [rep_start(2)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(3)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. M[i][j]에 사용자의 입력을 받아 저장하세요.\n7. [rep_end(3)]\n8. [rep_end(2)]\n9. [rep_start(1)] i를 다시 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. M[i][j]의 값을 출력하세요.\n12. [cond_start(3)] j가 2와 같은지 확인하는 조건문을 작성하세요.\n13. j가 2라면 추가적으로 공백을 출력하세요.\n14. [cond_end(3)]\n15. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n16. [cond_start(4)] i가 2와 같은지 확인하는 조건문을 작성하세요.\n17. i가 2라면 추가적으로 줄 바꿈을 출력하세요.\n18. [cond_end(4)]\n19. [rep_end(2)]\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> void deleteValue(unsigned int arr[], unsigned int index) { for (int i = index; i < 9; i++) { arr[i] = arr[i + 1]; } } int main(void) { unsigned int arr[10]; unsigned int index; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } scanf(\"%u\", &index); deleteValue(arr, index); for (int i = 0; i < 9; i++) { printf(\"%u \", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 deleteValue를 정의하세요. (매개변수: unsigned int arr[], unsigned int index)\n2. [rep_start(1)] index부터 9까지 반복하는 for 루프를 작성하세요.\n3. arr의 index 위치부터 배열의 요소를 앞으로 한 칸씩 이동시키세요.\n4. [rep_end(1)]\n5. [func_def_end(1)]\n6. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n7. unsigned int형 배열 arr를 크기 10으로 선언하세요.\n8. unsigned int형 변수 index를 선언하세요.\n9. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n10. 배열 arr의 각 요소에 대해 사용자로부터 unsigned int값을 입력받으세요.\n11. [rep_end(1)]\n12. 배열에서 삭제할 요소의 인덱스를 입력받으세요.\n13. deleteValue 함수를 호출하여 주어진 index의 값을 삭제하세요.\n14. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n15. 배열 arr의 요소를 공백으로 구분하여 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int number[102] = { 0 }; for (int i = 0; i < n; i++) { int k; scanf(\"%d\", &k); number[k]++; } for (int i = 1; i < 102; i++) { if (number[i] != 0) { printf(\"%d:%d\\n\", i, number[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 배열 number의 크기를 102로 하여 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 정수형 변수 k를 선언하세요.\n7. k에 대한 입력을 받으세요.\n8. number[k]를 1 증가시켜 k의 개수를 카운트하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 1부터 101까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] number[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n12. number[i]가 0이 아닐 경우, i와 number[i]를 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int x; int a[101] = { 0 }; int b[101] = { 0 }; scanf(\"%d\", &x); for (int i = 0; i < x; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < x; i++) { scanf(\"%d\", &b[i]); } for (int i = 0; i < x; i++) { if (b[i] > 5) { a[i] = 0; b[i] = 0; } } for (int i = 0; i < x; i++) { if (a[i] != 0) { printf(\"%d \", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 x를 선언하세요.\n3. 정수형 배열 a와 b를 각각 크기 101로 선언하고, 모든 요소를 0으로 초기화하세요.\n4. x에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n6. a 배열의 i 번째 요소에 정수를 입력받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n9. b 배열의 i 번째 요소에 정수를 입력받으세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] b[i]가 5보다 큰지 확인하는 조건문을 작성하세요.\n13. b[i]가 5보다 크면 a[i]와 b[i]를 0으로 설정하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. [rep_start(1)] i를 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n17. [cond_start(2)] a[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n18. a[i]가 0이 아니라면 a[i]를 출력하세요.\n19. [cond_end(2)]\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int x; scanf(\"%d\", &x); if (x % 2 == 1) { x = x - 1; } printf(\"%d\", x); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 x를 선언하세요.  \n3. x에 입력을 받으세요.  \n4. [cond_start(1)] x가 홀수인지 확인하는 조건문을 작성하세요.  \n5. x가 홀수라면 x에서 1을 빼세요.  \n6. [cond_end(1)]  \n7. x의 값을 출력하세요.  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a[6][6] = { 0 }; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i + j == 5) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 6x6 크기의 정수형 2차원 배열 a를 0으로 초기화하여 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. scanf 함수를 이용하여 a[i][j]에 정수 값을 입력받으세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.  \n11. 내부 조건이 참이라면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. 그렇지 않으면 a[i][j] 값을 출력하세요.  \n14. [rep_end(2)]  \n15. printf 함수를 이용하여 줄 바꿈을 하세요.  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); unsigned int music[102]; unsigned int round[102]; for (int i = 0; i < n; i++) { scanf(\"%u\", &music[i]); } for (int i = 0; i < n; i++) { scanf(\"%u\", &round[i]); } for (int i = 0; i < n; i++) { if (round[i] <= 5) { printf(\"%u \", music[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n의 값을 입력받으세요.\n4. unsigned int형 배열 music 크기 102를 선언하세요.\n5. unsigned int형 배열 round 크기 102를 선언하세요.\n6. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. music 배열의 i번째 요소에 값을 입력받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. round 배열의 i번째 요소에 값을 입력받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] round[i]가 5 이하인지 확인하는 조건문을 작성하세요.\n14. round[i]가 5 이하라면 music[i]를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%u\", &n); unsigned int result = n & (~1); printf(\"%u\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int 타입의 변수 n을 선언하세요.  \n3. n에 대한 입력을 받기 위해 scanf 함수를 호출하세요.  \n4. n의 마지막 비트를 0으로 설정한 값을 result에 저장하세요. (n & (~1) 연산을 사용)  \n5. result를 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); if (N % 2 == 0) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if ((i + j) % 2 == 0) { printf(\"0 \"); } else { printf(\"1 \"); } } printf(\"\\n\"); } } else { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if ((i + j) % 2 == 0) { printf(\"1 \"); } else { printf(\"0 \"); } } printf(\"\\n\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 정수를 입력 받으세요.\n4. [cond_start(1)] N이 짝수인지 확인하는 조건문을 작성하세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] (i + j)가 짝수인지 확인하는 조건문을 작성하세요.\n8. (i + j)가 짝수라면 \"0 \"을 출력하세요.\n9. [cond_end(2)]\n10. [cond_start(2)] (i + j)가 짝수가 아니라면 \"1 \"을 출력하세요.\n11. [cond_end(2)]\n12. [rep_end(2)]\n13. 줄 바꿈을 위한 printf(\"\\n\")을 호출하세요.\n14. [rep_end(1)]\n15. [cond_end(1)]\n16. [cond_start(1)] N이 홀수인 경우를 처리하는 조건문을 작성하세요.\n17. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n18. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] (i + j)가 짝수인지 확인하는 조건문을 작성하세요.\n20. (i + j)가 짝수라면 \"1 \"을 출력하세요.\n21. [cond_end(2)]\n22. [cond_start(2)] (i + j)가 짝지가 아니면 \"0 \"을 출력하세요.\n23. [cond_end(2)]\n24. [rep_end(2)]\n25. 줄 바꿈을 위한 printf(\"\\n\")을 호출하세요.\n26. [rep_end(1)]\n27. [cond_end(1)]\n28. return 0;으로 프로그램을 종료하세요.\n29. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int x; scanf(\"%d\", &x); printf(\"%X\", x); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 x를 선언하세요.  \n3. x에 대한 입력을 받으세요.  \n4. 입력받은 x를 16진수 형식으로 출력하세요.  \n5. return 0;으로 프로그램을 종료하세요.  \n6. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int n; unsigned int play[101]; unsigned int cnt[101]; scanf(\"%u\", &n); for (unsigned int i = 0; i < n; i++) scanf(\"%u\", &play[i]); for (unsigned int i = 0; i < n; i++) scanf(\"%u\", &cnt[i]); for (unsigned int i = 0; i < n; i++) if (cnt[i] < 6) printf(\"%u \", play[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. unsigned int형 배열 play[101]을 선언하여 플레이어의 점수를 저장할 공간을 만드세요.\n4. unsigned int형 배열 cnt[101]을 선언하여 주어진 값을 저장할 공간을 만드세요.\n5. n의 값(플레이어 수)을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. play 배열에 점수를 입력받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. cnt 배열에 값을 입력받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] cnt[i]가 6 미만인지 확인하는 조건문을 작성하세요.\n14. cnt[i]가 6 미만이라면 play[i]를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n; scanf(\"%u\", &n); if (n & 0b01) --n; printf(\"%d\", n); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 입력을 받으세요. (부호 없는 정수 입력)  \n4. [cond_start(1)] n이 홀수인지 확인하는 조건문을 작성하세요.  \n5. n이 홀수라면 n에서 1을 빼세요.  \n6. [cond_end(1)]  \n7. n의 값을 출력하세요.  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int n; unsigned int arr[101]; scanf(\"%u\", &n); for (unsigned int i = 0; i < n; i++) scanf(\"%u\", &arr[i]); for (int i = (n - 1); i >= 0; i--) printf(\"%u \", arr[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. unsigned int형 배열 arr를 크기 101로 선언하세요.  \n4. n에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. arr의 i번째 요소에 대한 입력을 받으세요.  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 n-1부터 0까지 감소하는 for 루프를 작성하세요.  \n9. arr의 i번째 요소를 출력하세요.  \n10. [rep_end(1)]  \n11. return 0;으로 프로그램을 종료하세요.  \n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT arr[6][6]; for (UINT i = 0; i < 6; i++) for (UINT j = 0; j < 6; j++) scanf(\"%u\", &arr[i][j]); for (UINT i = 0; i < 6; i++) { for (UINT j = 0; j < 6; j++) { if (j == (6 - i - 1)) printf(\" \"); else printf(\"%u\", arr[i][j]); printf(\" \"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT 형식의 6x6 배열 arr을 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. arr 배열의 각 요소에 정수를 입력받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] j가 (6 - i - 1)과 같은지 확인하는 조건문을 작성하세요.\n11. j가 (6 - i - 1)이라면 공백을 출력하세요.\n12. [cond_end(2)]\n13. 그 외의 경우에는 arr[i][j]를 출력하세요.\n14. 출력 후 공백을 추가로 출력하세요.\n15. [rep_end(2)]\n16. 각 행의 끝에서 줄 바꿈을 출력하세요.\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT n; UINT arr[101][101]; scanf(\"%u\", &n); for (UINT i = 0; i < n; i++) for (UINT j = 0; j < n; j++) scanf(\"%u\", &arr[i][j]); for (UINT i = 0; i < n; i++) { for (UINT j = 0; j < n; j++) { if (j == (n - i - 1)) printf(\" \"); else printf(\"%u\", arr[i][j]); printf(\" \"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT형 변수 n을 선언하세요. (unsigned int의 약어)\n3. UINT형 2D 배열 arr[101][101]을 선언하세요.\n4. n의 값을 입력받으세요. (unsigned int 형식)\n5. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. arr[i][j]에 값을 입력받으세요. (unsigned int 형식)\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [rep_start(2)] j를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] j가 n-i-1과 같은지 확인하는 조건문을 작성하세요.\n13. j가 n-i-1이라면 단순히 공백을 출력하세요.\n14. [cond_end(2)]\n15. 그렇지 않다면 arr[i][j]의 값을 출력하세요.\n16. 공백을 출력하세요.\n17. [rep_end(2)]\n18. 줄 바꿈을 출력하세요.\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); printf(\"%X\", n); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. 입력 받은 n을 16진수 형식으로 출력하세요.  \n5. return 0;으로 프로그램을 종료하세요.  \n6. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT arr[6][6]; for (UINT i = 0; i < 6; i++) for (UINT j = 0; j < 6; j++) scanf(\"%u\", &arr[i][j]); for (UINT i = 0; i < 6; i++) { for (UINT j = 0; j < 6; j++) { if (i == 3 && j == 0) printf(\"\\n\"); else if (j == 3) printf(\" \"); printf(\"%u \", arr[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. UINT형 2차원 배열 arr을 선언하세요. (크기: 6x6)  \n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. 사용자의 입력을 받아 arr[i][j]에 저장하세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i가 3이고 j가 0인지 확인하는 조건문을 작성하세요.  \n11. 해당 조건이 참이면 줄 바꿈을 출력하세요.  \n12. [cond_end(2)]  \n13. [cond_start(2)] j가 3인지 확인하는 조건문을 작성하세요.  \n14. 해당 조건이 참이면 공백을 출력하세요.  \n15. [cond_end(2)]  \n16. arr[i][j]의 값을 출력하세요.  \n17. [rep_end(2)]  \n18. 줄 바꿈을 출력하세요.  \n19. [rep_end(1)]  \n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT a, b; UINT c, d, q; scanf(\"%u %u\", &a, &b); c = ~(a & b); d = (a | b); q = (c & d); printf(\"%u %u %u\", c, d, q); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 두 개의 UINT형 변수 a와 b를 선언하세요.  \n3. UINT형 변수 c, d, q를 선언하세요.  \n4. a와 b에 대해 입력을 받으세요.  \n5. c에 a와 b의 AND 연산 결과를 반전한 값을 저장하세요.  \n6. d에 a와 b의 OR 연산 결과를 저장하세요.  \n7. q에 c와 d의 AND 연산 결과를 저장하세요.  \n8. c, d, q의 값을 출력하세요.  \n9. return 0;으로 프로그램을 종료하세요.  \n10. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { char str[101]; gets(str); UINT idx = 0; while (str[idx] != '\\0') { if (str[idx] >= 'A' && str[idx] <= 'Z') printf(\"%c\", str[idx]); idx++; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 101자의 문자열을 저장할 char 형 배열 str을 선언하세요.  \n3. gets 함수를 이용하여 사용자로부터 문자열을 입력받으세요.  \n4. UINT 형 변수 idx를 0으로 초기화하여 문자열 인덱스를 시작합니다.  \n5. [rep_start(1)] 문자열의 끝('\\0')에 도달할 때까지 반복하는 while 루프를 시작하세요.  \n6. [cond_start(2)] 현재 문자가 대문자 A에서 Z 사이인지 확인하는 조건문을 작성하세요.  \n7. 대문자라면 해당 문자를 출력하세요.  \n8. idx를 1 증가시켜 다음 문자로 이동하세요.  \n9. [cond_end(2)]  \n10. [rep_end(1)]  \n11. return 0;으로 프로그램을 종료하세요.  \n12. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT n; UINT arr[101]; scanf(\"%u\", &n); for (UINT i = 0; i < 101; i++) arr[i] = 0; for (UINT i = 0; i < n; i++) { UINT temp = 0; scanf(\"%u\", &temp); ++arr[temp]; } for (UINT i = 0; i < 101; i++) if (arr[i] != 0) printf(\"%u:%u\\n\", i, arr[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT 자료형 n을 선언하세요.\n3. UINT형 배열 arr를 선언하여 크기를 101로 설정하세요.\n4. n에 대한 입력을 받아오기 위해 scanf를 사용하세요.\n5. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n6. arr[i]를 0으로 초기화하세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. UINT형 temp를 선언하세요.\n10. temp에 대한 입력을 받아오기 위해 scanf를 사용하세요.\n11. arr[temp]의 값을 1 증가시키세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n14. [cond_start(2)] arr[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n15. arr[i]가 0이 아니면 i와 arr[i]를 포맷에 맞추어 출력하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { UINT n; UINT arr[101]; UINT biggest = 0; scanf(\"%u\", &n); for (UINT i = 0; i < 101; i++) arr[i] = 0; for (UINT i = 0; i < n; i++) { UINT temp = 0; scanf(\"%u\", &temp); ++arr[temp]; } for (UINT i = 0; i < 101; i++) if (arr[i] > biggest) biggest = arr[i]; for (UINT i = 0; i < 101; i++) { if (arr[i] == biggest) { printf(\"%d\", i); break; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT 형 변수 n을 선언하세요.\n3. UINT 형 배열 arr을 101 크기로 선언하세요.\n4. UINT 형 변수 biggest를 0으로 초기화하세요.\n5. n에 대한 입력을 받으세요. (입력 형식: unsigned int)\n6. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n7. arr[i]를 0으로 초기화하세요. (모든 배열 요소를 0으로 설정)\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. UINT 형 변수 temp를 0으로 선언하세요.\n11. temp에 대한 입력을 받으세요. (입력 형식: unsigned int)\n12. arr[temp]의 값을 1 증가시키세요.\n13. [rep_end(1)]\n14. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(2)] arr[i]가 biggest 보다 큰지 확인하는 조건문을 작성하세요.\n16. 가장 큰 빈도수를 biggest에 저장하세요.\n17. [cond_end(2)]\n18. [rep_end(1)]\n19. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n20. [cond_start(2)] arr[i]가 biggest와 같은지 확인하는 조건문을 작성하세요.\n21. 가장 큰 빈도수를 가진 i를 출력하세요.\n22. 루프를 종료하세요.\n23. [cond_end(2)]\n24. [rep_end(1)]\n25. return 0;으로 프로그램을 종료하세요.\n26. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int num = 0; int play_list[100] = { 0 }; int play_count[100] = { 0 }; scanf(\"%d\", &num); for (int i = 0; i < num; i++) { scanf(\"%d\", &play_list[i]); } for (int i = 0; i < num; i++) { scanf(\"%d\", &play_count[i]); } for (int i = 0; i < num; i++) { if (play_count[i] <= 5) { printf(\"%d \", play_list[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 num을 0으로 초기화하세요.\n3. 정수형 배열 play_list를 크기 100으로 선언하고 0으로 초기화하세요.\n4. 정수형 배열 play_count를 크기 100으로 선언하고 0으로 초기화하세요.\n5. num에 사용자로부터 정수를 입력 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 num-1까지 반복하는 for 루프를 작성하세요.\n7. i번째에 play_list 배열에 사용자가 입력한 값을 저장하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 num-1까지 반복하는 for 루프를 작성하세요.\n10. i번째에 play_count 배열에 사용자가 입력한 값을 저장하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 num-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] play_count[i]가 5 이하인지 확인하는 조건문을 작성하세요.\n14. play_count[i]가 5 이하라면 play_list[i]를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n[14] = {0}; int std_y = 2024; int std_d = 3; int std_m = 9; int age = 0; for (int i = 0; i < 13; i++) { scanf(\"%1d\", &n[i]); } int y = n[0] * 10 + n[1]; int t = n[6]; int m = n[2] * 10 + n[3]; int d = n[4] * 10 + n[5]; if (t == 9 || t == 0) { y += 1800; } else if (t == 1 || t == 2 || t == 5 || t == 6) { y += 1900; } else { y += 2000; } age = std_y - y - 1; if (m < std_m) { age += 1; } else if (m == std_m) { if (d <= std_d) { age += 1; } } printf(\"%d \", age); if (age >= 19 || y==5) { printf(\"yes\"); } else { printf(\"no\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 n을 14개의 원소로 초기화하여 선언하세요.\n3. 표준 연도 std_y를 2024로 설정하세요.\n4. 표준일 std_d를 3으로 설정하세요.\n5. 표준월 std_m을 9로 설정하세요.\n6. 나이를 저장할 int형 변수 age를 0으로 초기화하세요.\n7. [rep_start(1)] i를 선언하여 0부터 12까지 반복하는 for 루프를 작성하세요.\n8. 각 반복에서 n 배열의 i번째 원소에 1자리 정수를 입력받으세요.\n9. [rep_end(1)]\n10. y를 n[0]과 n[1]을 조합하여 두 자릿수 정수로 설정하세요.\n11. t를 n[6]으로 설정하여 성별을 저장하세요.\n12. m을 n[2]와 n[3]을 조합하여 두 자릿수 정수로 설정하세요.\n13. d를 n[4]와 n[5]을 조합하여 두 자릿수 정수로 설정하세요.\n14. [cond_start(1)] t가 9 또는 0인지 확인하는 조건문을 작성하세요.\n15. t가 해당 조건을 만족하면 y에 1800을 더하세요.\n16. [cond_end(1)]\n17. [cond_start(1)] t가 1, 2, 5, 또는 6인지 확인하는 조건문을 작성하세요.\n18. t가 해당 조건을 만족하면 y에 1900을 더하세요.\n19. [cond_end(1)]\n20. y에 2000을 더하는 기본 조건을 설정하세요.\n21. age를 std_y에서 y를 빼고 1을 빼거나 설정하세요.\n22. [cond_start(1)] m이 std_m보다 작은지 확인하는 조건문을 작성하세요.\n23. m이 작은 경우 age에 1을 추가하세요.\n24. [cond_end(1)]\n25. [cond_start(1)] m이 std_m과 같은지 확인하는 조건문을 작성하세요.\n26. [cond_start(2)] d가 std_d보다 작거나 같은지 확인하는 조건문을 작성하세요.\n27. 조건이 참인 경우 age에 1을 추가하세요.\n28. [cond_end(2)]\n29. [cond_end(1)]\n30. printf(\"%d \", age);로 나이를 출력하세요.\n31. [cond_start(1)] age가 19 이상이거나 y가 5인지 확인하는 조건문을 작성하세요.\n32. 조건이 참이면 \"yes\"를 출력하세요.\n33. [cond_end(1)]\n34. [cond_start(1)] 조건이 거짓인 경우를 처리하는 조건문을 작성하세요.\n35. \"no\"를 출력하세요.\n36. [cond_end(1)]\n37. return 0;으로 프로그램을 종료하세요.\n38. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a = 0; scanf(\"%d\", &a); int b[101] = { 0 }; int c[101] = { 0 }; for (int i = 0; i < a; i++) { scanf(\"%d\", &b[i]); } for (int i = 0; i < a; i++) { scanf(\"%d\", &c[i]); } for (int i = 0; i < a; i++) { if (c[i] <= 5) { printf(\"%d \", b[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. 정수형 배열 b와 c를 101개의 요소로 선언하고 모두 0으로 초기화하세요.\n5. [rep_start(1)] i를 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 b의 i번째 요소에 대한 입력을 받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n9. 배열 c의 i번째 요소에 대한 입력을 받으세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] c의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.\n13. c의 i번째 요소가 5 이하라면 배열 b의 i번째 요소를 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(){ int a = 0; scanf(\"%d\",&a); printf(\"%X \",a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 0으로 초기화하세요.  \n3. a에 사용자로부터 정수를 입력받기 위한 scanf 함수를 호출하세요.  \n4. a의 값을 16진수 형식으로 출력하기 위해 printf 함수를 호출하세요.  \n5. [cond_end(1)]  \n6. 프로그램을 종료하기 위해 return 0;을 호출하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNIGS #include <stdio.h> int main() { char a[100] = { 0 }; gets(a); char b[100] = { 0 }; for (int i = 0; i < 100; i++) { for (int j = 0; j < 100; j++) { if (a[j] >= 'A' && a[j] <= 'Z') { b[i] = a[j]; a[j] = NULL; break; } } } printf(\"%s\", b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 a를 선언하고 0으로 초기화하여 최대 100개의 문자를 저장할 수 있도록 설정하세요.\n3. 입력으로 a에 문자열을 저장하세요.\n4. char형 배열 b를 선언하고 0으로 초기화하여 최대 100개의 문자를 저장할 수 있도록 설정하세요.\n5. [rep_start(1)] i를 선언하고 0부터 99까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언하고 0부터 99까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(3)] a 배열의 j번째 문자가 대문자인지 확인하는 조건문을 작성하세요.\n8. a 배열의 j번째 문자가 대문자라면, b 배열의 i번째 인덱스에 a[j]를 저장하세요.\n9. a[j]를 NULL로 설정하여 이미 처리된 문자를 비워줍니다.\n10. 반복문의 끝에서 b 배열에 저장한 대문자를 출력하기 위해 루프를 종료하세요.\n11. [cond_end(3)]\n12. [rep_end(2)]\n13. [rep_end(1)]\n14. b 배열의 내용을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int mat[7][7]; for (int i = 1; i <= 6; i++) { for (int j = 1; j <= 6; j++) { scanf(\"%u\", &mat[i][j]); } } for (int i = 1; i <= 6; i++) { mat[i][7 - i] = '*'; } for (int i = 1; i <= 6; i++) { for (int j = 1; j <= 6; j++) { if (mat[i][j]=='*') { printf(\" \"); } else { printf(\"%u \", mat[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 7x7 크기의 unsigned int형 2차원 배열 mat을 선언하세요.\n3. [rep_start(1)] i를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n5. mat 배열의 각 원소에 대한 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 1부터 6까지 반복하는 또 다른 for 루프를 작성하세요.\n9. mat 배열의 대각선(왼쪽 아래에서 오른쪽 위) 원소에 '*'를 할당하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 1부터 6까지 반복하는 또 다른 for 루프를 작성하세요.\n12. [rep_start(2)] j를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] mat 배열의 원소가 '*'인지 확인하는 조건문을 작성하세요.\n14. 배열 원소가 '*'이라면 공백을 출력하세요.\n15. [cond_end(2)]\n16. 배열 원소가 '*'가 아니라면 그 원소를 출력하세요.\n17. [rep_end(2)]\n18. 줄바꿈을 위해 printf(\"\\n\")을 호출하세요.\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); unsigned int mat[102][102]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%u\", &mat[i][j]); } } for (int i = 0; i < n; i++) { mat[i][n-1 - i] = '*'; } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { if (mat[i][j] == '*') { printf(\" \"); } else { if (j < n - 1) printf(\"%u \", mat[i][j]); else printf(\"%u\", mat[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n의 값을 입력받으세요.\n4. unsigned int형 2차원 배열 mat[102][102]를 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. mat[i][j]에 값을 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. mat[i][n-1 - i]에 '*'를 할당하세요. (대각선 방향)\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n14. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(2)] mat[i][j]가 '*'인지 확인하는 조건문을 작성하세요.\n16. mat[i][j]가 '*'라면 공백을 출력하세요.\n17. [cond_end(2)]\n18. [cond_start(2)] j가 n-1이 아닐 때의 조건문을 작성하세요.\n19. j가 n-1이 아니면 mat[i][j]의 값을 출력하세요.\n20. [cond_end(2)]\n21. mat[i][j]가 n-1이라면 mat[i][j]의 값을 출력하세요.\n22. [rep_end(2)]\n23. 각 행의 끝에서 줄바꿈을 출력하세요.\n24. [rep_end(1)]\n25. return 0;으로 프로그램을 종료하세요.\n26. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> const int N = 5; int main() { unsigned int mat_ori[N][N], mat_copy[N][N], n; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%u\", &mat_ori[i][j]); mat_copy[i][j] = mat_ori[i][j]; } } scanf(\"%d\", &n); n = n % 4; for (int x = 0; x < n; x++) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { mat_copy[j][N - 1 - i] = mat_ori[i][j]; } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { mat_ori[i][j] = mat_copy[i][j]; } } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { printf(\"%u \", mat_copy[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 상수 N을 5로 정의하세요.\n3. unsigned int형의 2차원 배열 mat_ori와 mat_copy를 N x N 크기로 선언하세요.\n4. unsigned int형 변수 n을 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 사용자로부터 mat_ori[i][j]에 대한 입력을 받으세요.\n8. mat_copy[i][j]에 mat_ori[i][j]의 값을 복사하세요.\n9. [rep_end(2)]\n10. [rep_end(1)]\n11. 사용자로부터 n에 대한 입력을 받으세요.\n12. n을 4로 나눈 나머지를 계산하여 n에 저장하세요.\n13. [rep_start(1)] x를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n14. [rep_start(2)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n15. [rep_start(3)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n16. mat_copy[j][N - 1 - i]에 mat_ori[i][j]의 값을 대입하세요. (90도 회전)\n17. [rep_end(3)]\n18. [rep_end(2)]\n19. [rep_start(2)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n20. [rep_start(3)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n21. mat_ori[i][j]에 mat_copy[i][j]의 값을 복사하세요.\n22. [rep_end(3)]\n23. [rep_end(2)]\n24. [rep_end(1)]\n25. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n26. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n27. mat_copy[i][j]의 값을 출력하세요.\n28. 출력 후 공백을 추가하세요.\n29. [rep_end(2)]\n30. 한 줄 특수 문자를 출력하세요.\n31. [rep_end(1)]\n32. return 0;으로 프로그램을 종료하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int N; int A[100]; int B[100]; scanf(\"%d\",&N); for(int i=0;i<N;i++) { scanf(\"%d \",&A[i]); } for(int i=0;i<N;i++) { scanf(\"%d \",&B[i]); } for(int i=0;i<N;i++) { if(B[i]<=5) { printf(\"%d \",A[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 크기가 100인 정수형 배열 A를 선언하세요.\n4. 크기가 100인 정수형 배열 B를 선언하세요.\n5. N에 사용자로부터 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. A 배열의 i번째 요소에 사용자로부터 입력을 받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. B 배열의 i번째 요소에 사용자로부터 입력을 받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(1)] B 배열의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.\n14. B[i]가 5 이하라면 A 배열의 i번째 요소를 출력하세요.\n15. [cond_end(1)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); int ass1[100] = { 0 }; int ass2[100] = { 0 }; for (int i = 0; i < a; i++) { scanf(\"%d\", &ass1[i]); } for (int i = 0; i < a; i++) { scanf(\"%d\", &ass2[i]); } for (int i = 0; i < a; i++) { if (ass2[i] <= 5)printf(\"%d \", ass1[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 대한 입력을 받으세요.\n4. int형 배열 ass1을 크기 100으로 선언하고 모든 요소를 0으로 초기화하세요.\n5. int형 배열 ass2을 크기 100으로 선언하고 모든 요소를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n7. ass1 배열의 i번째 요소에 대한 입력을 받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n10. ass2 배열의 i번째 요소에 대한 입력을 받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] ass2 배열의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.\n14. ass2[i]가 5 이하라면 ass1 배열의 i번째 요소를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char ch[1001], c; int len = 0; fgets(ch, sizeof(ch), stdin); scanf(\"%c\", &c); while (1) { if (ch[len] != '\\0') { len++; } else { break; } } for (int i = 0; i < len; i++) { if (ch[i] == c) { printf(\"#\"); } else { printf(\"%c\", ch[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char 배열 ch를 1001 크기로 선언하세요.  \n3. 문자형 변수 c를 선언하세요.  \n4. 정수형 변수 len을 0으로 초기화하세요.  \n5. fgets 함수를 사용하여 stdin에서 문자열을 ch 배열에 읽어들입니다.  \n6. scanf 함수를 사용하여 단일 문자를 c에 입력받습니다.  \n7. [rep_start(1)] 무한 루프를 시작합니다.  \n8. [cond_start(2)] ch 배열의 len 인덱스에 있는 값이 널 문자가 아닌지 확인하는 조건문을 작성하세요.  \n9. len이 널 문자가 아닌 경우, len을 1 증가시킵니다.  \n10. [cond_end(2)]  \n11. [cond_start(2)] len이 널 문자일 경우, 루프를 종료합니다.  \n12. [cond_end(2)]  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 0으로 초기화하고 len보다 작을 때까지 반복하는 for 루프를 시작합니다.  \n15. [cond_start(2)] ch 배열의 i번째 값이 c와 같은지 확인하는 조건문을 작성하세요.  \n16. ch[i]가 c와 같다면 '#'을 출력합니다.  \n17. [cond_end(2)]  \n18. 그렇지 않으면, ch[i] 값을 출력합니다.  \n19. [rep_end(1)]  \n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int N; int A[2][100]; scanf(\"%d\",&N); for(int i = 0;i<2;i++){ for(int j=0;j<N;j++){ scanf(\"%d\",&A[i][j]); } } for(int i=0;i<N;i++){ if(A[1][i]<=5){ printf(\"%d \",A[0][i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 2행 100열의 정수형 배열 A를 선언하세요.\n4. N의 값을 입력받으세요.\n5. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. N개의 정수를 배열 A의 (i, j) 위치에 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] A[1][i]가 5 이하인지 확인하는 조건문을 작성하세요.\n12. A[1][i]가 5 이하라면, 배열 A의 (0, i) 위치의 값을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char ch[1001], c; int len = 0; gets(ch); scanf(\"%c\", &c); while (1) { if (ch[len] != '\\0') { len++; } else { break; } } for (int i = 0; i < len; i++) { if (ch[i] == c) { printf(\"#\"); } else { printf(\"%c\", ch[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 문자열을 저장할 char형 배열 ch를 1001 크기로 선언하세요.  \n3. char형 변수 c를 선언하세요.  \n4. 정수형 변수 len을 0으로 초기화하세요.  \n5. 사용자로부터 문자열을 입력받으세요.  \n6. c에 사용자로부터 한 문자를 입력받으세요.  \n7. [rep_start(1)] 무한 루프를 시작합니다.  \n8. [cond_start(2)] ch[len]이 널 종료 문자가 아닌지 확인하세요.  \n9. ch[len]이 널 종료 문자가 아니라면 len을 증가시키세요.  \n10. [cond_end(2)]  \n11. [cond_start(2)] ch[len]이 널 종료 문자라면 루프를 종료하세요.  \n12. [cond_end(2)]  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 0으로 초기화하여 len까지 반복하는 for 루프를 시작하세요.  \n15. [cond_start(2)] ch[i]가 c와 같은지 확인하세요.  \n16. ch[i]가 c와 같다면 '#'을 출력하세요.  \n17. [cond_end(2)]  \n18. [cond_start(2)] ch[i]가 c와 같지 않다면 ch[i]를 출력하세요.  \n19. [cond_end(2)]  \n20. [rep_end(1)]  \n21. return 0;으로 프로그램을 종료하세요.  \n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int y; int m; int d; int f; int a; scanf(\"%02d%02d%02d%01d%d\", &y, &m, &d, &f, &a); if (f == 9 || f == 0) { y = y + 1800; } else if (f == 1 || f == 2 || f == 5 || f == 6) { y = y + 1900; } else { y = y + 2000; } if ((m == 9 && d < 3) || (m < 9)) { printf(\"%d\", 2024 - y); } else { printf(\"%d\", 2023 - y); } if (y <= 2005) { printf(\" yes\"); } else { printf(\" no\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 y, m, d, f, a를 선언하세요.\n3. y, m, d, f, a에 대한 입력을 받으세요. (형식: 02d, 02d, 02d, 01d, d)\n4. [cond_start(1)] f가 9 또는 0인지 확인하는 조건문을 작성하세요.\n5. f가 9 또는 0이라면 y에 1800을 더하세요.\n6. [cond_end(1)]\n7. [cond_start(1)] f가 1, 2, 5, 6 중 하나인지 확인하는 조건문을 작성하세요.\n8. f가 1, 2, 5, 6이라면 y에 1900을 더하세요.\n9. [cond_end(1)]\n10. 그렇지 않으면 y에 2000을 더하세요.\n11. [cond_start(1)] m이 9이고 d가 3보다 작은지, 혹은 m이 9보다 작은지 확인하는 조건문을 작성하세요.\n12. 조건이 참이라면 2024에서 y를 빼고 출력하세요.\n13. [cond_end(1)]\n14. 그렇지 않으면 2023에서 y를 빼고 출력하세요.\n15. [cond_start(1)] y가 2005 이하인지 확인하는 조건문을 작성하세요.\n16. y가 2005 이하라면 \"yes\"를 출력하세요.\n17. [cond_end(1)]\n18. 그렇지 않으면 \"no\"를 출력하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); int a[100][100] = {0}; for (int i = 0; i < 2; i++) { for (int j = 0; j < N; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < N; i++) { if (a[1][i] <= 5) { printf(\"%d \", a[0][i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 값을 입력받으세요.\n4. 100x100 크기의 2차원 배열 a를 0으로 초기화합니다.\n5. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 행과 j번째 열에 값을 입력받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] a의 1번째 행의 i번째 열의 값이 5 이하인지 확인하는 조건문을 작성하세요.\n12. 조건이 true라면 a의 0번째 행의 i번째 열의 값을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int N; int a[2][100] = {0}; scanf(\"%d\", &N); for (int i = 0; i < 2; i++) { for (int j = 0; j < N; j++) { scanf(\"%d\", &a[i][j]); if(i==1){ if (a[1][j] <= 5) { printf(\"%d \", a[0][j]); } } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 2행 100열의 배열 a를 0으로 초기화하여 선언하세요.  \n4. N에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. j번째 요소에 대한 입력을 받으세요.  \n8. [cond_start(3)] i가 1인지 확인하는 조건문을 작성하세요.  \n9. [cond_start(4)] a[1][j]가 5보다 작거나 같은지 확인하는 조건문을 작성하세요.  \n10. a[0][j]를 출력하세요.  \n11. [cond_end(4)]  \n12. [cond_end(3)]  \n13. [rep_end(2)]  \n14. [rep_end(1)]  \n15. return 0;으로 프로그램을 종료하세요.  \n16. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int ass[7][7] = { 0 }; for (int i = 1; i < 7; i++) { for (int j = 1; j < 7; j++) { scanf(\"%d\", &ass[i][j]); } } for (int i = 1; i < 7; i++) { for (int j = 1; j < 7; j++) { if (i + j == 7)printf(\" \"); else printf(\"%d \", ass[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 7x7 정수형 배열 ass를 선언하고 초기화하세요.\n3. [rep_start(1)] i를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n5. 사용자로부터 입력을 받아 ass 배열의 [i][j]에 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 1부터 6까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j의 합이 7인지 확인하는 조건문을 작성하세요.\n11. 합이 7이면 공백을 출력하세요.\n12. [cond_end(2)]\n13. 그렇지 않으면 ass[i][j]의 값을 출력하세요.\n14. [rep_end(2)]\n15. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a; unsigned int b; scanf(\"%u %u\", &a, &b); unsigned int c; unsigned int d; unsigned int e; c = ~(a & b); d = a | b; e = c & d; printf(\"%u %u %u\", c, d, e); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 변환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. unsigned int형 변수 b를 선언하세요.\n4. a와 b에 대한 입력을 받으세요.\n5. unsigned int형 변수 c를 선언하세요.\n6. unsigned int형 변수 d를 선언하세요.\n7. unsigned int형 변수 e를 선언하세요.\n8. a와 b의 비트 AND 결과에 대한 보수를 c에 저장하세요.\n9. a와 b의 비트 OR 결과를 d에 저장하세요.\n10. c와 d의 비트 AND 결과를 e에 저장하세요.\n11. c, d, e의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; scanf(\"%u\", &n); printf(\"%X\", n); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. n에 대한 입력을 scanf를 사용하여 받으세요.  \n4. n을 16진수 형식으로 출력하기 위해 printf를 사용하세요.  \n5. [func_def_end(1)]  \n6. return 0;으로 프로그램을 종료하세요."
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int n; scanf(\"%d\",&n); printf(\"%d\",n&(~1)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. n의 가장 낮은 비트를 0으로 만드는 비트 연산을 수행하고 결과를 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if ((i + j) == 5) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 6x6 크기의 정수형 2차원 배열 a를 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. 배열 a의 각 요소에 입력 값을 저장하기 위해 scanf 함수를 사용하세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.  \n11. i와 j의 합이 5라면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. i와 j의 합이 5가 아니라면 배열의 요소 a[i][j]를 출력하세요.  \n14. [rep_end(2)]  \n15. 한 줄을 내려서 출력하기 위해 새로운 줄 문자를 출력하세요.  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a; scanf(\"%d\", &a); int d[100]; int e[100]; for (int i = 0; i < a; i++) { scanf(\"%d\", &d[i]); } for (int i = 0; i < a; i++) { scanf(\"%d\", &e[i]); } for (int i = 0; i < a; i++) { if (e[i] <= 5) { printf(\"%d \", d[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 선언하세요.  \n3. a에 대한 입력을 받으세요.  \n4. 정수형 배열 d를 100 크기로 선언하세요.  \n5. 정수형 배열 e를 100 크기로 선언하세요.  \n6. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n7. d 배열의 i번째 요소에 입력을 받으세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n10. e 배열의 i번째 요소에 입력을 받으세요.  \n11. [rep_end(1)]  \n12. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.  \n13. [cond_start(2)] e 배열의 i번째 요소가 5 이하인지 확인하는 조건문을 작성하세요.  \n14. e[i]가 5 이하라면 d 배열의 i번째 요소를 출력하세요.  \n15. [cond_end(2)]  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int a[100][100]; scanf(\"%d\",&N); for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if ((i + j) == N-1) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 100x100 크기의 2차원 배열 a를 선언하세요.  \n4. N에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. 2차원 배열 a의 i행 j열에 입력값을 저장하세요.  \n8. [rep_end(2)]  \n9. [rep_end(1)]  \n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n11. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(2)] i와 j의 합이 N-1인지 확인하는 조건문을 작성하세요.  \n13. 만약 (i + j) == N-1이라면 공백을 출력하세요.  \n14. [cond_end(2)]  \n15. 그렇지 않다면 a[i][j]의 값을 출력하세요.  \n16. [rep_end(2)]  \n17. 줄 바꿈을 출력하세요.  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102] = { 0 }; gets(word); for (int i = 0; word[i]!=0; i++) { if (word[i] >= 'A' && word[i] <= 'Z') { printf(\"%c\", word[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형 int의 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 선언하고 초기화하여 입력받을 공간을 마련하세요.\n3. gets 함수를 이용해 사용자로부터 문자열을 입력받으세요.\n4. [rep_start(1)] i를 초기화하고 word의 끝(0)을 만날 때까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] word[i]가 대문자 A부터 Z 사이에 있는지 확인하는 조건문을 작성하세요.\n6. 대문자일 경우 word[i]를 출력하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); int A[100]; int B[100]; for (int i = 0; i < N; i++) { scanf(\"%d\", &A[i]); } for (int i = 0; i < N; i++) { scanf(\"%d\", &B[i]); } for (int i = 0; i < N; i++) { if (B[i] <= 5) { printf(\"%d \", A[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. 두 개의 배열 A와 B를 각각 100크기로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 A에 N개의 정수를 입력받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n9. 배열 B에 N개의 정수를 입력받으세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] B[i]가 5 이하인지 확인하는 조건문을 작성하세요.\n13. B[i]가 5 이하라면 배열 A의 해당 요소를 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n; scanf(\"%d\", &n); unsigned int num[102]; for (int i = 0; i < n; i++) { scanf(\"%u\", &num[i]); } for (int i = n-1; i >= 0; i--) { printf(\"%u \", num[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. unsigned int형 배열 num을 크기 102로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 num의 i번째 요소에 대해 입력을 받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 n-1부터 0까지 역방향으로 반복하는 for 루프를 작성하세요.\n9. 배열 num의 i번째 요소를 출력하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); printf(\"%X\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 선언하세요.\n3. a에 정수 입력을 받으세요.\n4. 입력받은 a의 값을 16진수 형식으로 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a = 0; scanf(\"%d\", &a); printf(\"%X\", a); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 0으로 초기화하세요.  \n3. a에 대해 사용자로부터 입력을 받으세요.  \n4. a의 값을 16진수 형태로 출력하세요.  \n5. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char ch[101], c, c1; int len = 0; scanf(\"%[^\\n]s\", ch); getchar(); scanf(\"%c\", &c); while (1) { if (ch[len] == '\\0') { break; } else { len++; } } for (int i = 0; i < len; i++) { if (ch[i] == c) { printf(\"#\"); } else { printf(\"%c\", ch[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 ch를 선언하여 최대 100개의 문자와 null 문자를 저장할 수 있도록 합니다.  \n3. char형 변수 c와 c1을 선언합니다.  \n4. 정수형 변수 len을 0으로 초기화합니다.  \n5. [cond_start(1)] 사용자로부터 줄을 입력받는 scanf 함수를 호출합니다.  \n6. getchar()를 호출하여 입력 버퍼를 비웁니다.  \n7. [cond_end(1)]\n8. [rep_start(1)] 무한 루프를 시작합니다.  \n9. [cond_start(2)] ch 배열의 현재 위치(len)가 null 문자인지 확인합니다.  \n10. null 문자라면 루프를 종료합니다.  \n11. [cond_end(2)]\n12. len을 증가시킵니다.  \n13. [rep_end(1)]\n14. [rep_start(1)] i를 0으로 초기화하고 len까지 반복하는 for 루프를 시작합니다.  \n15. [cond_start(2)] ch 배열의 i번째 요소가 c와 같은지 확인합니다.  \n16. c와 같다면 '#'을 출력합니다.  \n17. [cond_end(2)]\n18. c와 같지 않다면 ch[i]의 값을 그대로 출력합니다.  \n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); n = n >> 1; n = n << 1; printf(\"%d\", n); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 값을 입력받으세요.  \n4. n을 1비트 오른쪽으로 시프트하여 n에 저장하세요.  \n5. n을 1비트 왼쪽으로 시프트하여 n에 저장하세요.  \n6. n의 값을 출력하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); if (N % 2 != 0) { printf(\"%d\", N - 1); } else { printf(\"%d\", N); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력을 받으세요.  \n4. [cond_start(1)] N이 홀수인지 확인하는 조건문을 작성하세요.  \n5. N이 홀수라면 N에서 1을 뺀 값을 출력하세요.  \n6. [cond_end(1)]  \n7. [cond_start(1)] N이 짝수인 경우를 처리하는 조건문을 작성하세요.  \n8. N이 짝수라면 N을 그대로 출력하세요.  \n9. [cond_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char a[100] = \"\"; char b[100] = \"\"; int c = 0; gets(a); for (int i = 0; i < strlen(a); i++) { if (a[i] >= 'A'&&a[i]<='Z') { b[c] = a[i]; c++; } } puts(b); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 저장할 char형 배열 a를 크기 100으로 선언하고 초기화하세요.\n3. 문자열을 저장할 char형 배열 b를 크기 100으로 선언하고 초기화하세요.\n4. int형 변수 c를 선언하고 0으로 초기화하세요.\n5. a에 사용자로부터 입력을 받으세요.\n6. [rep_start(1)] i를 선언하여 0부터 a의 문자열 길이까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] a[i]가 대문자인지 확인하는 조건문을 작성하세요.\n8. a[i]가 대문자라면 b[c]에 a[i]를 저장하세요.\n9. b[c]에 저장한 후 c를 1 증가시키세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. b에 저장된 문자열을 출력하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int i; scanf(\"%d\", &i); printf(\"%X\",i); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 i를 선언하세요.\n3. i에 대한 입력을 받기 위해 scanf 함수를 호출하세요.\n4. 입력받은 i의 값을 16진수 형식으로 출력하기 위해 printf 함수를 호출하세요.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int array[101] = { 0, }; int n; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { int k; scanf(\"%d\", &k); array[k] = array[k] + 1; } for (int i = 0; i < 101; i++) { if (array[i] > 0) { printf(\"%d:%d\\n\", i, array[i]); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 0으로 초기화된 unsigned int형 배열 array[101]을 선언하세요. \n3. 정수형 변수 n을 선언하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 정수형 변수 k를 선언하세요.\n7. k에 대한 입력을 받으세요.\n8. array[k]의 값을 1 증가시켜 해당 수의 발생 횟수를 기록하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] array[i]의 값이 0보다 큰지 확인하는 조건문을 작성하세요.\n12. array[i]가 0보다 크면 i와 array[i]를 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a; scanf(\"%d\", &a); if (a % 2 != 0) { printf(\"%d\", a - 1); } else printf(\"%d\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a를 선언하세요.  \n3. a에 값을 입력받기 위해 scanf 함수를 사용하세요.  \n4. [cond_start(1)] a가 홀수인지 확인하는 조건문을 작성하세요.  \n5. a가 홀수라면 a에서 1을 빼서 출력하세요.  \n6. [cond_end(1)]  \n7. 그렇지 않으면 a를 그대로 출력하세요.  \n8. 프로그램을 종료하기 위해 return 0;을 사용하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102] = { 0 }; gets(word); char w; scanf(\"%c\", &w); for (int i = 0; word[i] != 0; i++) { if (w == word[i]) { printf(\"#\"); } else { printf(\"%c\", word[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 word를 선언하고 0으로 초기화하세요.  \n3. gets 함수를 사용하여 word 배열에 문자열을 입력받으세요.  \n4. char형 변수 w를 선언하세요.  \n5. w에 문자 하나를 입력받기 위해 scanf를 사용하세요.  \n6. [rep_start(1)] i를 사용하여 word 배열의 각 문자를 순회하는 for 루프를 작성하세요.  \n7. [cond_start(2)] 현재 문자가 w와 같은지 확인하는 조건문을 작성하세요.  \n8. w와 같다면 \"#\"을 출력하세요.  \n9. [cond_end(2)]  \n10. 그렇지 않다면 현재 문자를 그대로 출력하세요.  \n11. [rep_end(1)]  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int n; scanf(\"%d\", &n); printf(\"%X\", n); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 입력을 받으세요.\n4. n을 16진수로 변환하여 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char a[100]; gets(a); for (int i = 0; a[i] != '\\0'; i++) { if (a[i] >= 'A' && a[i]<='Z') { printf(\"%c\", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자 배열 a를 크기 100으로 선언하세요.\n3. 사용자로부터 입력을 받기 위해 gets(a)를 호출하세요.\n4. [rep_start(1)] a 배열의 각 문자를 검사하기 위해 인덱스 i를 사용하여 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] 현재 문자 a[i]가 대문자인지 확인하는 조건문을 작성하세요.\n6. a[i]가 대문자라면 해당 문자를 출력하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ char A[100]; gets(A); for(int i = 0;A[i]!='\\0';i++){ if(A[i]<='Z' && A[i]>='A'){ printf(\"%c\",A[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 문자형 배열 A를 크기 100으로 선언하세요.  \n3. A에 사용자 입력을 받기 위해 gets 함수를 호출하세요.  \n4. [rep_start(1)] i를 선언해 A의 문자 배열을 탐색하는 for 루프를 작성하세요.  \n5. A[i]가 널 문자('\\0')가 아닐 때까지 반복하세요.  \n6. [cond_start(2)] A[i]가 대문자 알파벳인지 확인하는 조건문을 작성하세요.  \n7. A[i]가 대문자라면 A[i]를 출력하세요.  \n8. [cond_end(2)]  \n9. [rep_end(1)]  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char str[101] = { 0 }; gets(str); for (int i = 0; str[i] != '\\0'; i++) { if (str[i] >= 'A' && str[i] <= 'Z') { printf(\"%c\", str[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열 배열 str을 크기 101로 선언하고 초기화하세요.\n3. 사용자로부터 입력을 받기 위해 gets 함수를 사용하여 str에 값을 저장하세요.\n4. [rep_start(1)] i를 선언해 str 배열의 각 문자를 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] str[i]가 대문자 알파벳인지 확인하는 조건문을 작성하세요.\n6. 대문자 알파벳이라면 해당 문자를 출력하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int num[101]; int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) { scanf(\"%u\", &num[i]); } for(int i=n-1;i>=0;i--) { printf(\"%u \",num[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 num을 크기 101로 선언하세요.  \n3. int형 변수 n을 선언하세요.  \n4. n에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 선언하여 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. 배열 num의 i번째 요소에 대해 입력을 받으세요.  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 n-1부터 0까지 반복하는 for 루프를 작성하세요.  \n9. num 배열의 i번째 요소를 출력하세요.  \n10. [rep_end(1)]  \n11. 프로그램을 종료합니다.  \n12. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int A[14]; char B[14]; int c = 0; scanf(\"%s\", &B); for(int i=0;i<14;i++) { A[i] = B[i]-48; } if(A[2]>0 || A[3]>9) { c = 1; } else if(A[2] == 0 && A[3]==9) { if(A[4]>0 || A[5]>3) { c= 1; } } if (A[6] == 3 || A[6] == 4 || A[6] == 7 || A[6] == 8) { if (A[0] >= 1) { printf(\"%d no\", 24 - (A[0] * 10 + A[1])-c); } else if (A[0] < 1 && A[1]>5) { printf(\"%d no\", 24 - A[1]-c); } else { printf(\"%d yes\", 24 - A[1]-c); } } else if (A[6] == 1 || A[6] == 2 || A[6] == 5 || A[6] == 6) { printf(\"%d yes\", 124 - (A[0] * 10 + A[1])-c); } else { printf(\"%d yes\", 224 - (A[0] * 10 + A[1])-c); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 A를 14개의 요소로 선언하세요.\n3. 문자형 배열 B를 14개의 요소로 선언하세요.\n4. 정수형 변수 c를 0으로 초기화하세요.\n5. B 배열에 문자열을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 13까지 반복하는 for 루프를 작성하세요.\n7. B 배열의 각 문자를 정수로 변환하여 A 배열에 저장하세요. (ASCII 코드에서 '0'을 빼줌)\n8. [rep_end(1)]\n9. [cond_start(1)] A[2]가 0보다 크거나 A[3]가 9보다 큰지 확인하는 조건문을 작성하세요.\n10. 조건이 참이라면 c를 1로 설정하세요.\n11. [cond_end(1)]\n12. [cond_start(1)] A[2]가 0이고 A[3]가 9인지 확인하는 조건문을 작성하세요.\n13. [cond_start(2)] 조건이 참이라면 A[4]가 0보다 크거나 A[5]가 3보다 큰지 확인하는 조건문을 작성하세요.\n14. 조건이 참이라면 c를 1로 설정하세요.\n15. [cond_end(2)]\n16. [cond_end(1)]\n17. [cond_start(1)] A[6]이 3, 4, 7, 8 중 하나인지 확인하는 조건문을 작성하세요.\n18. [cond_start(2)] A[0]이 1 이상인 경우를 처리하는 조건문을 작성하세요.\n19. A[0]이 1 이상이라면 잔여 시간을 출력하세요. (24 - (A[0] * 10 + A[1]) - c)\n20. [cond_end(2)]\n21. [cond_start(2)] A[0]이 1 미만이고 A[1]이 5보다 큰 경우를 처리하는 조건문을 작성하세요.\n22. 해당 조건을 만족하면 잔여 시간을 출력하세요. (24 - A[1] - c)\n23. [cond_end(2)]\n24. 나머지 경우에 대해 잔여 시간을 출력하세요. (24 - A[1] - c)\n25. [cond_end(1)]\n26. [cond_start(1)] A[6]이 1, 2, 5, 6 중 하나인지 확인하는 조건문을 작성하세요.\n27. 조건이 참이라면 특정 잔여 시간을 출력하세요. (124 - (A[0] * 10 + A[1]) - c)\n28. [cond_end(1)]\n29. 나머지 경우에 대해 특정 잔여 시간을 출력하세요. (224 - (A[0] * 10 + A[1]) - c)\n30. [cond_end(1)]\n31. return 0;으로 프로그램을 종료하세요.\n32. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102] = { 0 }; gets(word); char w; scanf(\"%c\", &w); for (int i = 0; word[i] != 0; i++) { if (word[i] == w) { word[i] = '#'; } } printf(\"%s\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 선언하고 102 크기의 메모리를 할당하여 초기화하세요.\n3. 사용자로부터 입력을 받아 word 배열에 저장하세요.\n4. char형 변수 w를 선언하세요.\n5. w에 사용자로부터 한 문자를 입력받으세요.\n6. [rep_start(1)] i를 선언해 word 배열의 각 문자를 반복하여 확인하는 for 루프를 작성하세요.\n7. [cond_start(2)] word의 i번째 문자가 w와 같은지 확인하는 조건문을 작성하세요.\n8. w와 같다면 해당 문자를 '#'로 변경하세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. word 배열을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102]; gets(word); char w; scanf(\"%c\", &w); for (int i = 0; i<101; i++) { if (word[i] == w) { word[i] = '#'; } } printf(\"%s\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 문자열을 저장할 char형 배열 word를 102 크기로 선언하세요.  \n3. gets 함수로 사용자로부터 문자열을 입력받으세요.  \n4. char형 변수 w를 선언하여 한 문자를 저장할 준비를 합니다.  \n5. scanf를 사용하여 사용자로부터 문자를 입력받으세요.  \n6. [rep_start(1)] i를 선언하여 0부터 100까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] word의 i번째 문자가 w와 같은지 비교하는 조건문을 작성하세요.  \n8. word의 i번째 문자가 w와 같다면 해당 문자를 '#'으로 바꾸세요.  \n9. [cond_end(2)]  \n10. [rep_end(1)]  \n11. printf를 사용하여 수정된 word를 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int N,cal; scanf(\"%d\",&N); if(N%2==0){ printf(\"%d\",N); } else{ cal=N-1; printf(\"%d\",cal); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N과 cal을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. [cond_start(1)] N이 짝수인지 확인하는 조건문을 작성하세요.\n5. N이 짝수라면 N을 출력하세요.\n6. [cond_end(1)]\n7. [cond_start(1)] N이 홀수인 경우를 처리하는 조건문을 작성하세요.\n8. cal에 N-1의 값을 저장하세요.\n9. cal을 출력하세요.\n10. [cond_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main(void) { char str[101]; char wrd[101]; UINT sIdx = 0; UINT wIdx = 0; gets(str); gets(wrd); while (str[sIdx] != '\\0') { if (str[sIdx] == wrd[wIdx]) ++wIdx; else wIdx = 0; if (wrd[wIdx] == '\\0') { printf(\"%s!\", wrd); return 0; } ++sIdx; } printf(\"%s?\", wrd); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 저장할 char 배열 str을 길이 101로 선언하세요.\n3. 문자열을 저장할 char 배열 wrd를 길이 101로 선언하세요.\n4. UINT 타입의 sIdx 변수를 0으로 초기화하세요.\n5. UINT 타입의 wIdx 변수를 0으로 초기화하세요.\n6. str 배열에 문자열을 입력받기 위해 gets 함수를 호출하세요.\n7. wrd 배열에 문자열을 입력받기 위해 gets 함수를 호출하세요.\n8. [rep_start(1)] str의 끝(NULL)까지 반복하는 while 루프를 작성하세요.\n9. [cond_start(2)] str의 현재 문자와 wrd의 현재 문자를 비교하는 조건문을 작성하세요.\n10. str의 현재 문자와 wrd의 현재 문자가 같다면 wIdx를 1 증가시키세요.\n11. 그렇지 않다면 wIdx를 0으로 초기화하세요.\n12. [cond_start(2)] wrd의 현재 문자가 NULL인지 확인하는 조건문을 작성하세요.\n13. wrd가 끝에 도달하면 wrd를 출력하고 \"!\"를 붙여 출력하세요.\n14. 프로그램을 종료하기 위해 0을 반환하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. wrd가 str에 존재하지 않는 경우, wrd를 출력하고 \"?\"를 붙여 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int A[101] = { 0 }; int B; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { B = 0; scanf(\"%d\", &B); A[B]++; } for (int i = 0; i < 101; i++) { if (A[i] != 0) { printf(\"%d:%d\\n\", i, A[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 크기가 101인 정수형 배열 A를 0으로 초기화하며 선언하세요.\n4. 정수형 변수 B를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. B를 0으로 초기화하세요.\n8. B의 값을 입력받으세요.\n9. A[B]의 값을 1 증가시키세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 100까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] A[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n13. A[i]가 0이 아니면 i와 A[i]의 값을 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n = 0; scanf(\"%d\", &n); int arr[2][100]={0, }; for (int i = 0; i < 2; i++) { for (int j = 0; j < n; j++) { scanf(\"%d\", &arr[i][j]); } } for (int i = 0; i < n; i++) { if (arr[1][i] <= 5) { printf(\"%d \", arr[0][i]); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. n에 대한 입력을 받으세요.\n4. 2행 100열의 정수형 다차원 배열 arr을 선언하고 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 arr의 각 요소에 대한 입력을 받으세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[1][i]가 5 이하인지 확인하는 조건문을 작성하세요.\n12. arr[1][i]가 5 이하라면 arr[0][i]를 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 프로그램을 종료하세요. (리턴 값 없음)\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int A[101] = { 0 }; int B; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { B = 0; scanf(\"%d\", &B); A[B]++; } int max = 0; for (int i = 0; i < 101; i++) { if (A[max] < A[i]) { max = i; } } printf(\"%d\",max); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 배열 A를 101로 초기화하여 선언하세요.\n4. 정수형 변수 B를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. B를 0으로 초기화하세요.\n8. B의 값을 입력받으세요.\n9. A[B]의 값을 1 증가시키세요.\n10. [rep_end(1)]\n11. 정수형 변수 max를 0으로 초기화하세요.\n12. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] A[max]가 A[i]보다 작은지 확인하는 조건문을 작성하세요.\n14. max의 값을 i로 업데이트하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. max의 값을 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char S[101]; char T; gets(S); scanf(\"%c\", &T); for (int i = 0; i < sizeof(S); i++) { if (S[i] == T) { S[i] = '#'; } else if (S[i] == \"\\0\") { break; } } puts(S); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 S를 선언하여 최대 100자의 문자 집합을 준비하세요.\n3. char형 변수 T를 선언하여 문자 하나를 저장할 준비를 하세요.\n4. gets 함수를 사용하여 사용자로부터 문자열 S를 입력 받으세요.\n5. scanf 함수를 사용하여 사용자로부터 문자 T를 입력 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 S의 크기만큼 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] S의 i번째 문자가 T와 같은지 비교하는 조건문을 작성하세요.\n8. S의 i번째 문자가 T라면 해당 문자를 '#'으로 대체하세요.\n9. [cond_end(2)]\n10. [cond_start(2)] S의 i번째 문자가 널 문자('\\0')인지 확인하는 조건문을 작성하세요.\n11. 널 문자가 발견되면 반복문을 종료하세요.\n12. [cond_end(2)]\n13. [rep_end(1)]\n14. puts 함수를 사용하여 수정된 문자열 S를 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102] = { 0}; gets(word); char w; scanf(\"%c\", &w); for (int i = 0; word[i]!=0; i++) { if (word[i] == w) { word[i] = '#'; } } for (int i = 0; word[i] != 0; i++) { printf(\"%c\", word[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 102 크기로 선언하고, 초기값을 0으로 설정하세요.\n3. gets 함수를 사용하여 사용자로부터 한 줄의 문자열을 입력 받으세요.\n4. char형 변수 w를 선언하세요.\n5. scanf를 사용하여 사용자로부터 하나의 문자를 입력 받으세요.\n6. [rep_start(1)] i를 0으로 초기화하고, word[i]가 0이 아닐 때까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] 현재 문자 word[i]가 w와 같은지 확인하는 조건문을 작성하세요.\n8. 같다면 word[i]를 '#'으로 변경하세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0으로 초기화하고, word[i]가 0이 아닐 때까지 반복하는 for 루프를 작성하세요.\n12. 해당 루프에서 word[i] 문자를 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102]; gets(word); char w; scanf(\"%c\", &w); for (int i = 0; word[i]!='\\0'; i++) { if (word[i] == w) { word[i] = '#'; } } for (int i = 0; word[i] != '\\0'; i++) { printf(\"%c\", word[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 word를 선언하여 102개의 문자를 저장할 수 있도록 합니다.  \n3. gets 함수를 사용하여 사용자로부터 입력받은 문자열을 word 배열에 저장하세요.  \n4. char형 변수 w를 선언하여 단일 문자를 저장합니다.  \n5. scanf를 사용하여 사용자로부터 하나의 문자를 입력받아 w에 저장하세요.  \n6. [rep_start(1)] i를 선언하여 word 배열의 각 문자를 확인하는 for 루프를 작성하세요.  \n7. [cond_start(2)] 현재 문자가 null 문자('\\0')인지 확인하는 조건문을 작성하세요.  \n8. [cond_end(2)]  \n9. [cond_start(2)] word 배열의 현재 문자가 w와 같은지 확인하는 조건문을 작성하세요.  \n10. word의 현재 문자가 w와 같으면 '#'로 변경하세요.  \n11. [cond_end(2)]  \n12. [rep_end(1)]  \n13. [rep_start(1)] i를 선언하여 word 배열의 각 문자를 출력하는 for 루프를 작성하세요.  \n14. [cond_start(2)] 현재 문자가 null 문자('\\0')인지 확인하는 조건문을 작성하세요.  \n15. printf를 사용하여 현재 문자를 출력하세요.  \n16. [cond_end(2)]  \n17. [rep_end(1)]  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char s[101]; gets(s); char t = 0; scanf(\"%c\", &t); for (int i = 0; i <101; i++) { if (s[i] == t) { s[i] = '#'; } } printf(\"%s\", s); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 s를 크기 101로 선언하세요.\n3. 입력을 받아 배열 s에 저장하시오.\n4. char형 변수 t를 0으로 초기화하고 입력을 받아 t에 저장하세요.\n5. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] 배열 s의 i번째 요소가 t와 같은지 확인하는 조건문을 작성하세요.\n7. s의 i번째 요소가 t와 같다면, 해당 요소를 '#'으로 변경하세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. 수정된 문자열 s를 출력하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; int k; int arr1[100] = {}; int arr2[100] = {}; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &k); arr1[i] = k; } for (int i = 0; i < N; i++) { scanf(\"%d\", &k); arr2[i] = k; if (k <= 5) printf(\"%d \", arr1[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 변수 k를 선언하세요.\n4. 크기가 100인 정수형 배열 arr1을 초기화하여 선언하세요.\n5. 크기가 100인 정수형 배열 arr2를 초기화하여 선언하세요.\n6. N에 대한 입력을 받으세요.\n7. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n8. 배열 arr1의 i번째 인덱스에 k의 값을 저장하기 위해 입력을 받으세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. 배열 arr2의 i번째 인덱스에 k의 값을 저장하기 위해 입력을 받으세요.\n12. [cond_start(2)] k가 5 이하인지 확인하는 조건문을 작성하세요.\n13. k가 5 이하라면 arr1의 i번째 값을 출력하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char word[102]; fgets(word, sizeof(word), stdin); int i = 0; while (word[i] != '\\0') { if (word[i] == '\\n') { word[i] = '\\0'; break; } i++; } char w; scanf(\" %c\", &w); for (i = 0; word[i] != '\\0'; i++) { if (word[i] == w) { word[i] = '#'; } } printf(\"%s\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char 타입의 배열 word를 102개 크기로 선언하세요.\n3. fgets 함수를 사용하여 표준 입력에서 word 배열에 문자열을 읽어옵니다.\n4. int형 변수 i를 0으로 초기화합니다.\n5. [rep_start(1)] word 배열의 각 문자를 '\\0'이 아닐 때까지 반복하는 while 루프를 시작합니다.\n6. [cond_start(2)] 현재 문자가 줄 바꿈 문자('\\n')인지 확인하는 조건문을 작성하세요.\n7. 만약 현재 문자가 줄 바꿈 문자라면, 해당 문자를 널 문자('\\0')로 변경하고 반복을 종료합니다.\n8. [cond_end(2)]\n9. i를 증가시킵니다.\n10. [rep_end(1)]\n11. char 타입의 변수 w를 선언합니다.\n12. scanf 함수를 사용하여 문자 하나를 입력받아 w에 저장합니다.\n13. [rep_start(1)] i를 0으로 초기화하고 word 배열의 각 문자가 '\\0'이 아닐 때까지 반복하는 for 루프를 시작합니다.\n14. [cond_start(2)] 현재 문자가 w와 같은지 확인하는 조건문을 작성하세요.\n15. 만약 현재 문자가 w라면, 해당 문자를 '#'으로 변경합니다.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. word 배열의 문자열을 출력합니다.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char a[100] = { 0 }; gets(a); for (int i = 0; a[i] != '\\0'; i++) { if (a[i] >= 'A' && a[i] <= 'Z') { printf(\"%c\", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 a를 생성하여 100개의 요소를 초기화합니다.\n3. 사용자로부터 문자열을 입력받기 위해 gets 함수를 호출합니다.\n4. [rep_start(1)] i를 선언하여 배열 a의 문자열이 끝날 때까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] a[i]가 대문자 알파벳인지 확인하는 조건문을 작성하세요.\n6. a[i]가 대문자라면 해당 문자를 출력하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char S[101]; char T; gets(S); scanf(\"%c\", &T); for (int i = 0; i < 101; i++) { if (S[i] == T)S[i] = '#'; } printf(\"%s\", S); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char 배열 S를 101 크기로 선언하세요.  \n3. char 변수 T를 선언하세요.  \n4. S에 문자열을 입력받는 함수 gets(S)를 호출하세요.  \n5. T에 문자를 입력받는 scanf 함수로 입력을 받으세요.  \n6. [rep_start(1)] i를 0으로 초기화하여 0부터 100까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] S[i]가 T와 같은지 확인하는 조건문을 작성하세요.  \n8. S[i]가 T와 같다면 S[i]를 '#'으로 변경하세요.  \n9. [cond_end(2)]  \n10. [rep_end(1)]  \n11. 변경된 문자열 S를 출력하세요.  \n12. 프로그램을 종료하기 위해 return 0;를 작성하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { char S[101]; char T; gets(S); scanf(\"%c\", &T); for (int i = 0; S[i] != '\\0'; i++) { if (S[i]==T) { S[i] = '#'; } } printf(\"%s\", S); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자형 배열 S를 크기 101로 선언하세요.\n3. 문자형 변수 T를 선언하세요.\n4. S에 문자열을 입력받기 위해 gets 함수를 호출하세요.\n5. T에 하나의 문자를 입력받기 위해 scanf 함수를 호출하세요.\n6. [rep_start(1)] i를 선언해 S의 각 문자를 반복하는 for 루프를 작성하세요. (S[i]가 NULL 문자가 아닐 때까지)\n7. [cond_start(2)] S의 현재 문자 S[i]가 T와 같은지 확인하는 조건문을 작성하세요.\n8. S[i]가 T와 같다면 S[i]를 '#'으로 변경하세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. S를 출력하기 위해 printf 함수를 호출하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char word[102]; for (int i = 0; i < 101; i++) { word[i] = '*'; } word[101] = '\\0'; fgets(word, sizeof(word), stdin); char w; scanf(\" %c\", &w); for (int i = 0; word[i] != '\\0'; i++) { if (word[i] == w) { word[i] = '#'; } } printf(\"%s\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자형 배열 word를 102 크기로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 100까지 반복하는 for 루프를 작성하세요.\n4. word 배열의 i번째 요소를 '*'로 초기화하세요.\n5. [rep_end(1)]\n6. word 배열의 101번째 요소에 널 문자를 할당하여 문자열의 끝을 표시하세요.\n7. 표준 입력으로부터 word 배열에 문자열을 읽어들이세요.\n8. 문자형 변수 w를 선언하세요.\n9. w에 대한 입력을 받으세요.\n10. [rep_start(1)] i를 선언해 word 배열의 각 문자를 확인하는 반복문을 작성하세요.\n11. [cond_start(2)] word[i]가 w와 같은지 확인하는 조건문을 작성하세요.\n12. word[i]가 w와 같다면 해당 위치에 '#'을 할당하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 변경된 word 배열을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char a[100]; char b[100]; gets(a); gets(b); int c = 0; int v = 0; for (int i = 0; a[i] != '\\0'; i++) { if (a[i] == b[c]) { c++; } } for (int i = 0; b[i] != '\\0'; i++) { v++; } if (v == c) { printf(\"%s!\", b); } else { printf(\"%s?\", b); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 a와 b를 각각 100 크기로 선언하세요.  \n3. a와 b에 문자열을 입력받기 위해 gets 함수를 사용하여 사용자로부터 입력을 받으세요.  \n4. 정수형 변수 c를 0으로 초기화하여 첫 번째 문자열에서 찾은 b의 문자 개수를 세도록 합니다.  \n5. 정수형 변수 v를 0으로 초기화하여 두 번째 문자열의 길이를 저장하도록 합니다.  \n6. [rep_start(1)] a의 문자가 '\\0'이 아닐 때까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] a의 현재 문자와 b의 c번째 문자가 같은지 확인하는 조건문을 작성하세요.  \n8. a의 문자와 b의 문자가 같다면 c를 1 증가시키세요.  \n9. [cond_end(2)]  \n10. [rep_end(1)]  \n11. [rep_start(1)] b의 문자가 '\\0'이 아닐 때까지 반복하는 for 루프를 작성하세요.  \n12. v를 1 증가시켜 b의 문자 개수를 센다.  \n13. [rep_end(1)]  \n14. [cond_start(1)] b의 문자 개수 v와 a에서 찾은 b의 문자 개수 c가 같은지 확인하는 조건문을 작성하세요.  \n15. 개수가 같다면 b를 출력하되 '!'를 덧붙이세요.  \n16. [cond_end(1)]  \n17. [cond_start(1)] 개수가 다르면 b를 출력하되 '?'를 덧붙이세요.  \n18. [cond_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 정수 을 입력한다. 그 다음 줄에 개의 정수를 입력한다. 입력한 개의 정수들을 역순으로 출력하는 프로그램을 작성하시오. 입력 설명 (정수) : 처리할 정수의 개수 (정수) : 처리할 정수들 출력 설명 둘째 줄에 입력한 개의 정수를 역순으로 출력한다. 입력 예시 복사 4 1 4 8 32 출력 예시 복사 32 8 4 1 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int n; int num[100]; unsigned int k; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%u\", &k); num[i] = k; } for (int i = n - 1; i >= 0; i--) { printf(\"%u \", num[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하여 처리할 정수의 개수를 저장할 준비를 합니다.\n3. 정수형 배열 num을 선언하여 최대 100개의 정수를 저장할 공간을 마련합니다.\n4. unsigned int 형 변수 k를 선언하여 입력받은 정수를 저장할 준비를 합니다.\n5. n에 정수 개수를 입력받으세요.\n6. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. k에 unsigned int 형의 정수를 입력받으세요.\n8. num 배열의 i번째 요소에 k를 저장하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 n-1부터 0까지 감소시키며 반복하는 for 루프를 작성하세요.\n11. 두 번째 for 루프의 각 반복에서 num 배열의 i번째 요소를 출력하며 공백을 추가하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char word[102]; for (int i = 0; i < 102; i++) { word[i] = 0; } gets(word); char w; scanf(\"%c\", &w); for (int i = 0; word[i]!=0; i++) { if (word[i] == w) { word[i] = '#'; } } for (int i = 0; word[i] != 0; i++) { printf(\"%c\", word[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 길이가 102인 것으로 선언하세요.\n3. [rep_start(1)] i를 0으로 초기화하고 102까지 반복하는 for 루프를 작성하세요.\n4. 각 word 배열의 요소를 0으로 초기화하세요.\n5. [rep_end(1)]\n6. gets 함수를 사용하여 사용자로부터 문자열을 입력받으세요.\n7. char형 변수 w를 선언하고 scanf를 통해 하나의 문자를 입력받으세요.\n8. [rep_start(1)] i를 0으로 초기화하고, word[i]가 0이 아닐 때까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(2)] 현재 word[i]와 변수 w가 같은지 비교하는 조건문을 작성하세요.\n10. 만약 같다면 word[i]를 '#'으로 변경하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. [rep_start(1)] i를 0으로 초기화하고, word[i]가 0이 아닐 때까지 반복하는 for 루프를 작성하세요.\n14. word[i]의 값을 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int A; unsigned int B; scanf(\"%u\",&A); scanf(\"%u\",&B); unsigned int C = ~(A&B); unsigned int D = A|B; unsigned int Q = C&D; printf(\"%u %u %u\",C,D,Q); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 부호 없는 정수형 변수 A와 B를 선언하세요.\n3. A에 사용자로부터 입력을 받으세요.\n4. B에 사용자로부터 입력을 받으세요.\n5. 부호 없는 정수형 변수 C를 A와 B의 비트 AND의 비트를 반전하여 초기화하세요.\n6. 부호 없는 정수형 변수 D를 A와 B의 비트 OR로 초기화하세요.\n7. 부호 없는 정수형 변수 Q를 C와 D의 비트 AND로 초기화하세요.\n8. C, D, Q의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char word[102]; char w; if (fgets(word, sizeof(word), stdin) == NULL) { return 1; } int i; for (i = 0; word[i] != '\\0'; i++) { if (word[i] == '\\n') { word[i] = '\\0'; break; } } if (scanf(\" %c\", &w) != 1) { return 1; } for (i = 0; word[i] != '\\0'; i++) { if (word[i] == w) { word[i] = '#'; } } printf(\"%s\\n\", word); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 word를 102 길이로 선언하세요.\n3. char형 변수 w를 선언하세요.\n4. [cond_start(1)] fgets 함수를 사용하여 사용자로부터 입력받은 문자열을 word에 저장하는 조건문을 작성하세요.\n5. 입력이 실패하면 1을 반환하여 프로그램을 종료하세요.\n6. [cond_end(1)]\n7. int형 변수 i를 선언하세요.\n8. [rep_start(1)] word의 각 문자를 탐색하는 for 루프를 작성하세요. (문자가 '\\0'이 아닐 때까지)\n9. [cond_start(2)] 현재 문자(word[i])가 줄바꿈 문자인지 확인하는 조건문을 작성하세요.\n10. 줄바꿈 문자를 만났다면, 해당 위치의 문자를 널 종료 문자('\\0')로 바꾸고 루프를 종료하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. [cond_start(1)] scanf 함수를 사용하여 사용자로부터 문자 w를 입력받는 조건문을 작성하세요.\n14. 입력이 실패하면 1을 반환하여 프로그램을 종료하세요.\n15. [cond_end(1)]\n16. [rep_start(1)] word의 각 문자를 다시 탐색하는 for 루프를 작성하세요. (문자가 '\\0'이 아닐 때까지)\n17. [cond_start(2)] 현재 문자(word[i])가 w와 같은지 확인하는 조건문을 작성하세요.\n18. w와 같다면 해당 문자를 '#'으로 바꾸세요.\n19. [cond_end(2)]\n20. [rep_end(1)]\n21. word의 내용을 출력하면서 줄 바꿈을 추가하세요.\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]+1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned형 배열 a를 10개의 요소로 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n4. 배열 a의 각 요소에 대해 사용자로부터 unsigned int형 입력을 받으세요.  \n5. [rep_end(1)]  \n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n7. 배열 a의 각 요소를 출력하세요. 각 출력 후에 공백을 추가하세요.  \n8. [rep_end(1)]  \n9. 줄바꿈을 출력하세요.  \n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n11. 배열 a의 각 요소에 1을 더한 값을 출력하세요.  \n12. [rep_end(1)]  \n13. return 0;으로 프로그램을 종료하세요.  \n14. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a[11]; unsigned int b[11]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]+1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a와 b를 선언하세요. 두 배열의 크기는 11입니다.\n3. [rep_start(1)] i를 선언하여 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. scanf를 사용하여 a 배열의 각 요소에 정수를 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언하여 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. a 배열의 각 요소를 출력하세요. 각 요소는 공백으로 구분됩니다.\n8. [rep_end(1)]\n9. printf를 사용하여 줄 바꿈을 추가하세요.\n10. [rep_start(1)] i를 선언하여 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. a 배열의 각 요소에 1을 더한 값을 출력하세요. 각 요소는 공백으로 구분됩니다.\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 10개 크기 1차원 배열의 각 요소마다 + 1을 하는 프로그램을 작성하시오. 입력 설명 (정수) : 배열에 저장할 정수들 출력 설명 입력한 10개의 값들을 띄어쓰기로 구분하여 출력하고, 그 다음 줄에 각각 + 1한 값들을 띄어쓰기로 구분하여 출력한다. 입력 예시 복사 1 2 3 4 5 6 7 8 9 10 출력 예시 복사 1 2 3 4 5 6 7 8 9 10 2 3 4 5 6 7 8 9 10 11 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int arr[10] = { 0, }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의합니다. (매개변수 없음)\n2. unsigned int형 크기가 10인 배열 arr를 0으로 초기화합니다.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 시작합니다.\n4. arr 배열에 정수를 입력받습니다.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 시작합니다.\n7. arr 배열의 각 요소를 공백을 두고 출력합니다.\n8. 줄을 바꿉니다.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 시작합니다.\n11. arr 배열의 각 요소에 1을 더한 값을 공백을 두고 출력합니다.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료합니다.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main(void) { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { a[i] = a[i] + 1; printf(\"%u \", a[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 10개 크기로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소를 출력하세요. (공백으로 구분)\n8. [rep_end(1)]\n9. 한 줄을 출력하여 newline을 추가하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 a의 각 요소에 1을 더한 후 출력하세요. (공백으로 구분)\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main() { UINT arr[10]; for (UINT i = 0; i < 10; i++) scanf(\"%u\", &arr[i]); for (UINT i = 0; i < 10; i++) printf(\"%u \", arr[i]); printf(\"\\n\"); for (UINT i = 0; i < 10; i++) printf(\"%u \", arr[i] + 1); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 메인 함수인 main을 정의하세요. (매개변수 없음)\n2. UINT형 배열 arr을 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 사용자로부터 UINT형 숫자를 입력받아 arr 배열에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. arr 배열의 값을 출력하세요. (각 값 뒤에 공백 포함)\n8. [rep_end(1)]\n9. 줄을 바꾸기 위해 개행 문자를 출력하세요.\n10. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. arr 배열의 각 요소에 1을 더한 값을 출력하세요. (각 값 뒤에 공백 포함)\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 정상 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned A[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", A[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", A[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned형 배열 A를 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 루프 내에서 사용자로부터 배열 A의 각 요소를 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 루프 내에서 배열 A의 요소를 출력하세요. (요소 뒤에 공백을 추가)\n8. [rep_end(1)]\n9. 줄바꿈 문자를 출력하세요.\n10. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 루프 내에서 배열 A의 각 요소에 1을 더한 값을 출력하세요. (요소 뒤에 공백을 추가)\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int list[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &list[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", list[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", list[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 list를 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. list[i]에 사용자로부터 입력 받은 부호 없는 정수를 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. list[i]의 값을 공백과 함께 출력하세요.\n8. [rep_end(1)]\n9. 줄바꿈을 출력하세요.\n10. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. list[i]의 값을 1 더한 후 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { a[i]++; } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 a를 선언하고, 10개의 요소를 0으로 초기화하세요.  \n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n4. scanf를 이용해 사용자로부터 unsigned int형 값들을 입력받아 배열 a의 각 요소에 저장하세요.  \n5. [rep_end(1)]  \n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n7. 배열 a의 각 요소를 출력하기 위해 printf 함수를 사용하세요.  \n8. 출력 후에 공백을 하나 추가하세요.  \n9. [rep_end(1)]  \n10. printf 함수를 이용하여 줄바꿈을 추가하세요.  \n11. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n12. 배열 a의 각 요소를 1씩 증가시키세요.  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n15. 증가된 배열 a의 각 요소를 출력하기 위해 printf 함수를 사용하세요.  \n16. 출력 후에 공백을 하나 추가하세요.  \n17. [rep_end(1)]  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { const int n = 10; unsigned int a[n]; for(int i=0;i<n;i++){ scanf(\"%u\", &a[i]); } for(int i=0;i<n;i++){ printf(\"%u \", (a[i])); } printf(\"\\n\"); for(int i=0;i<n;i++){ printf(\"%u \", (a[i] + 1)); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 상수 int형 변수 n을 10으로 정의하세요.\n3. unsigned int형 배열 a를 n 크기로 선언하세요.\n4. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n5. 각 배열 요소 a[i]에 대한 입력을 받으세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n8. 배열 a의 각 요소를 출력하세요. (공백으로 구분)\n9. [rep_end(1)]\n10. 줄바꿈을 출력하세요.\n11. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n12. 배열 a의 각 요소에 1을 더한 값을 출력하세요. (공백으로 구분)\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int arr[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i]+1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 10개의 unsigned int형 배열 arr를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 arr의 각 요소에 사용자로부터 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 arr의 각 요소를 출력하세요.\n8. 공백을 추가하여 출력 형식을 설정하세요.\n9. [rep_end(1)]\n10. 줄 바꿈을 위해 printf를 호출하세요.\n11. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. 배열 arr의 각 요소에 1을 더한 값을 출력하세요.\n13. [rep_end(1)]\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int arr[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 arr을 크기 10으로 선언하고 모든 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 arr의 i번째 요소에 대해 정수를 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. i번째 요소의 값을 공백과 함께 출력하세요.\n8. [rep_end(1)]\n9. 새로운 줄을 출력하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. i번째 요소의 값에 1을 더한 후 공백과 함께 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int arr[11]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", arr[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 arr를 11개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 루프 내에서 사용자로부터 10개의 unsigned int 값을 받아 arr[i]에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 루프 내에서 arr[i]의 값을 공백과 함께 출력하세요.\n8. [rep_end(1)]\n9. 출력 후 줄을 바꾸세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 루프 내에서 arr[i]에 1을 더한 값을 공백과 함께 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]+1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 10 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 각 요소에 대해 입력을 받는 scanf 함수를 호출하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소를 출력하는 printf 함수를 호출하세요.\n8. 공백을 출력하기 위해 printf에 \" \"를 사용하세요.\n9. [rep_end(1)]\n10. printf 함수를 호출하여 줄 바꿈을 출력하세요.\n11. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. 배열 a의 각 요소에 1을 더한 값을 출력하는 printf 함수를 호출하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int data[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &data[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", data[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", data[i] + 1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 data를 선언하여 크기를 10으로 설정하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 data의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. data 배열의 각 요소를 출력하세요. (각 요소 사이에 공백을 추가)\n8. [rep_end(1)]\n9. 한 줄 바꿈을 출력하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. data 배열의 각 요소에 1을 더한 값을 출력하세요. (각 요소 사이에 공백을 추가)\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 각 요소에 대해 사용자로부터 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소를 출력하세요.\n8. 출력 후 줄바꿈을 하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 a의 각 요소에 1을 더한 값을 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int num[11]; int n; for (int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); } scanf(\"%d\", &n); unsigned int sum = 0; for (int i = 0; i < n; i++) { int k; scanf(\"%d\", &k); sum += num[k]; } printf(\"%u\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 num을 11개의 요소로 선언하세요.\n3. int형 변수 n을 선언하세요.\n4. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n5. num 배열의 i번째 요소에 대해 사용자로부터 unsigned int 입력을 받으세요.\n6. [rep_end(1)]\n7. n에 대해 사용자로부터 int형 입력을 받으세요.\n8. unsigned int형 변수 sum을 0으로 초기화하세요.\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. int형 변수 k를 선언하세요.\n11. 사용자로부터 k 값을 입력받으세요.\n12. sum에 num[k] 값을 더하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main() { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i] + 1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 루프 내에서 배열 a의 i번째 요소에 대한 사용자 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 루프 내에서 배열 a의 i번째 요소를 출력하세요. (각 요소 사이에 공백이 포함됨)\n8. [rep_end(1)]\n9. 출력 후 줄바꿈을 수행하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 루프 내에서 배열 a의 i번째 요소에 1을 더한 값을 출력하세요. (각 요소 사이에 공백이 포함됨)\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", A[i]); A[i]++; } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", A[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. A 배열의 i번째 요소에 값을 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. A 배열의 i번째 요소를 출력하세요.\n8. A 배열의 i번째 요소를 1 증가시키세요.\n9. [rep_end(1)]\n10. 줄 바꿈을 출력하세요.\n11. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. A 배열의 i번째 요소를 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int num[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); num[i] = num[i] + 1; } for (int i = 0; i < 10; i++) { printf(\"%u \", num[i]-1); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", num[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 num을 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. scanf 함수를 이용해 사용자로부터 num 배열의 각 요소에 입력을 받으세요.\n5. 입력받은 값에 1을 더하여 num 배열의 현재 요소를 업데이트하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n8. num 배열의 각 요소에서 1을 빼고 출력하세요.\n9. [rep_end(1)]\n10. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.\n11. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. num 배열의 각 요소를 출력하세요.\n13. [rep_end(1)]\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int ary[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &ary[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", ary[i]); } for (int i = 0; i < 10; i++) { ary[i]++; } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", ary[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 ary를 크기 10으로 선언하고, 모든 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. i가 가리키는 배열 요소에 대한 사용자 입력을 받기 위해 scanf 함수를 호출하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열의 각 요소를 공백과 함께 출력하기 위해 printf 함수를 호출하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n10. 현재 배열 요소에 1을 더하여 증가시키세요.\n11. [rep_end(1)]\n12. 줄 바꿈을 위해 printf 함수를 호출하세요.\n13. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n14. 증가된 배열의 각 요소를 공백과 함께 출력하기 위해 printf 함수를 호출하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); printf(\"%u \", A[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { A[i] = A[i] + 1; printf(\"%u \", A[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 A를 크기 10으로 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n4. 배열 A의 i번째 요소에 대해서 정수형 입력을 받으세요.  \n5. A[i]의 값을 출력하세요.  \n6. [rep_end(1)]  \n7. 줄바꿈을 위해 \\n을 출력하세요.  \n8. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n9. 배열 A의 i번째 요소에 1을 더한 값을 다시 A[i]에 저장하세요.  \n10. A[i]의 값을 출력하세요.  \n11. [rep_end(1)]  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main() { UINT n; UINT count = 0; scanf(\"%u\", &n); for(UINT i = 0; i < 32; i++) if((n >> (32 - i)) & 0b01) ++count; printf(\"%u\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. UINT형 변수 n을 선언하세요.  \n3. UINT형 변수 count를 0으로 초기화하세요.  \n4. n에 사용자로부터 입력을 받으세요.  \n5. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n6. [cond_start(2)] n의 특정 비트가 1인지 확인하는 조건문을 작성하세요.  \n7. n의 (32 - i)번째 비트를 오른쪽으로 이동시키고 0b01과 AND 연산을 수행하세요.  \n8. 해당 비트가 1이라면 count를 1 증가시키세요.  \n9. [cond_end(2)]  \n10. [rep_end(1)]  \n11. count의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int A[11] = { 0, }; unsigned int B[11] = { 0, }; for (int i = 1; i < 11; i++) { scanf(\"%u\", &A[i]); B[i] = A[i] + 1; } for (int j = 1; j < 11; j++) { printf(\"%u \", A[j]); } printf(\"\\n\"); for (int j = 1; j < 11; j++) { printf(\"%u \", B[j]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 int인 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 크기 11로 선언하고 초기화하세요.\n3. unsigned int형 배열 B를 크기 11로 선언하고 초기화하세요.\n4. [rep_start(1)] i를 선언하여 1부터 10까지 반복하는 for 루프를 작성하세요.\n5. A[i]에 대한 입력을 받으세요.\n6. B[i]에 A[i]에 1을 더한 값을 저장하세요.\n7. [rep_end(1)]\n8. [rep_start(1)] j를 선언하여 1부터 10까지 반복하는 for 루프를 작성하세요.\n9. A[j]의 값을 출력하세요.\n10. 출력 후 줄바꿈을 하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] j를 선언하여 1부터 10까지 반복하는 for 루프를 작성하세요.\n13. B[j]의 값을 출력하세요.\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int A[10]; unsigned int B[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } for (int i = 0; i < 10; i++) { B[i] = A[i] + 1; } for (int i = 0; i < 10; i++) { printf(\"%u \", A[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", B[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 10개 크기로 선언하세요.\n3. unsigned int형 배열 B를 10개 크기로 선언하고 모든 요소를 0으로 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n5. A[i]에 대해 사용자로부터 정수를 입력받아 저장하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n8. B[i] 요소에 A[i]에 1을 더한 값을 저장하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. A[i] 값을 공백과 함께 출력하세요.\n12. [rep_end(1)]\n13. 새 줄을 출력하세요.\n14. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n15. B[i] 값을 공백과 함께 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a[10] = {0}; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i] + 1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 a를 선언하고 10개의 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소를 공백을 두고 출력하세요.\n8. [rep_end(1)]\n9. 새 줄을 출력하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 a의 각 요소에 1을 더한 값을 공백을 두고 출력하세요.\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned int A[10] = { 0 }; scanf(\"%u %u %u %u %u %u %u %u %u %u\", &A[0], &A[1], &A[2], &A[3], &A[4], &A[5], &A[6], &A[7], &A[8], &A[9]); for (int i = 0; i < 10; i++) { printf(\"%u \", A[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", A[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 크기 10으로 선언하고 0으로 초기화하세요.\n3. scanf 함수를 사용하여 사용자로부터 10개의 unsigned int 값을 배열 A에 입력받으세요.\n4. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n5. 배열 A의 각 요소를 출력하세요.\n6. [rep_end(1)]\n7. printf 함수를 사용하여 줄바꿈을 출력하세요.\n8. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n9. 배열 A의 각 요소에 1을 더한 값을 출력하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%u\", &n); int cnt = 0; for (int i = 0; i < 32; i++) { if (n & 0x01) { cnt++; } n = n >> 1; } printf(\"%d\\n\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. n에 사용자로부터 unsigned int 형식의 입력을 받으세요.  \n4. int형 변수 cnt를 0으로 초기화하여 비트의 1의 개수를 세는 카운터 역할을 하게 하세요.  \n5. [rep_start(1)] i를 0으로 초기화하고 32까지 반복하는 for 루프를 작성하세요.  \n6. [cond_start(2)] n의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.  \n7. n의 최하위 비트가 1이라면 cnt를 증가시키세요.  \n8. [cond_end(2)]  \n9. n을 오른쪽으로 1비트 시프트하여 다음 비트를 확인할 준비를 하세요.  \n10. [rep_end(1)]  \n11. n의 비트에서 1의 개수를 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int num[11]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); } unsigned int num1[11]; for (int i = 0; i < 10; i++) { num1[i] = num[i] + 1; } for (int i = 0; i < 10; i++) { printf(\"%u \", num[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", num1[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 num을 11개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. i번째 요소에 사용자로부터 입력받은 값을 num 배열에 저장하세요.\n5. [rep_end(1)]\n6. unsigned int형 배열 num1을 11개의 요소로 선언하세요.\n7. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n8. num 배열의 i번째 요소에 1을 더하여 num1 배열의 i번째 요소에 저장하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. num 배열의 i번째 요소를 출력하세요.\n12. [rep_end(1)]\n13. 줄바꿈을 위해 printf(\"\\n\");를 호출하세요.\n14. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n15. num1 배열의 i번째 요소를 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(){ unsigned int a[10] = {0}; for(int i = 0;i<10;i++){ scanf(\"%d\",&a[i]); } for(int i = 0;i<10;i++){ printf(\"%u \",a[i]); } printf(\"\\n\"); for(int i = 0;i<10;i++){ a[i] = a[i] + 1; } for(int i = 0;i<10;i++){ printf(\"%u \",a[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 10개의 요소로 초기화합니다.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 i번째 요소에 정수를 입력받습니다.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 요소들을 출력하세요. (각 요소를 공백으로 구분)\n8. [rep_end(1)]\n9. 줄 바꾸기 출력 합니다.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 a의 각 요소에 1을 더합니다.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n14. 업데이트된 배열 a의 요소들을 출력하세요. (각 요소를 공백으로 구분)\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); unsigned int tmp[100] = { 0 }; for (int i = 0; i < 100; i++) { tmp[i] = data[i]; } for (int i = 0; i < 100; i++) { data[99 - i] = tmp[i]; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 선언하고 100개의 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. data 배열의 i번째 요소에 사용자 입력을 받아 저장하세요.\n5. [rep_end(1)]\n6. unsigned int형 배열 tmp를 선언하고 100개의 요소를 0으로 초기화하세요.\n7. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n8. tmp 배열의 i번째 요소에 data 배열의 i번째 요소를 복사하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n11. data 배열의 99 - i번째 요소에 tmp 배열의 i번째 요소를 저장하여 역순으로 배치하세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n14. data 배열의 i번째 요소를 출력하세요. (공백으로 구분)\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int array[3][11]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &array[0][i]); array[1][i] = array[0][i] + 1; } for (int i = 0; i < 2; i++) { for (int j = 0; j < 10; j++) { printf(\"%u \", array[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 2차원 배열 array를 선언하세요. (3행 11열)\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열의 첫 번째 행에 사용자로부터 정수형 값을 입력받아 저장하세요.\n5. 첫 번째 행의 값에 1을 더하여 배열의 두 번째 행에 저장하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 1까지 반복하는 for 루프를 작성하세요.\n8. [rep_start(2)] j를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n9. 배열에서 i번째 행의 j번째 요소를 출력하세요.\n10. [rep_end(2)]\n11. 줄바꿈을 위해 printf 함수를 호출하세요.\n12. [rep_end(1)]\n13. 프로그램의 실행을 종료하기 위해 return 0;을 작성하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> void main() { unsigned int a[11]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { a[i]++; printf(\"%u \", a[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 배열 a를 11개의 원소로 선언하세요.\n3. [rep_start(1)] i를 0으로 초기화하고 10보다 작을 때까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 i번째 원소에 사용자로부터 입력받은 값을 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0으로 초기화하고 10보다 작을 때까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 원소를 출력하세요.\n8. [rep_end(1)]\n9. 줄 바꿈을 위한 printf 함수를 호출하세요.\n10. [rep_start(1)] i를 0으로 초기화하고 10보다 작을 때까지 반복하는 for 루프를 작성하세요.\n11. 배열 a의 i번째 원소를 1 증가시키고, 증가된 값을 출력하세요.\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(){ unsigned int A[11]; for(int i=0; i<10;i++){ scanf(\"%u\",&A[i]); } for(int i=0; i<10;i++){ printf(\"%u \",A[i]); } printf(\"\\n\"); for(int i=0; i<10;i++){ printf(\"%u \",A[i]+1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 11개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 A의 각 요소에 값을 입력받기 위해 사용자로부터 unsigned int형 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 각 요소를 공백을 두고 출력하세요.\n8. [rep_end(1)]\n9. 줄 바꿈을 위해 printf(\"\\n\");을 호출하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 A의 각 요소에 1을 더한 값을 공백을 두고 출력하세요.\n12. [rep_end(1)]\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const *argv[]) { unsigned int data[100] = {0}; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); for(int j=0;j<50;j++){ int tmp = data[j]; data[j] = data[99 - j]; data[99-j] = tmp; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const *argv[])\n2. unsigned int형 배열 data를 크기 100으로 선언하고 모든 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. 각 반복에서 data 배열의 i번째 요소에 정수를 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] j를 선언해 0부터 49까지 반복하는 for 루프를 작성하세요.\n7. 현재 j에 해당하는 data[j] 값을 tmp에 저장하세요.\n8. data 배열의 j번째 요소를 data[99 - j]의 값으로 변경하세요.\n9. data 배열의 99 - j번째 요소를 tmp의 값으로 설정하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n12. 각 반복에서 data 배열의 i번째 요소를 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main(void) { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } int N; int sum = 0; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { int b; scanf(\"%d\", &b); sum = sum + a[b]; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 배열 a를 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 a의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n5. [rep_end(1)]\n6. int형 변수 N을 선언하세요.\n7. int형 변수 sum을 0으로 초기화하세요.\n8. N의 값을 사용자로부터 입력받으세요.\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. int형 변수 b를 선언하세요.\n11. 사용자로부터 b의 값을 입력받으세요.\n12. 배열 a의 b번째 요소를 sum에 추가하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); { UINT arr[100] = { 0 }; for (UINT i = 0; i < 100; ++i) arr[i] = data[99 - i]; for (UINT i = 0; i < 100; ++i) data[i] = arr[i]; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 정의하고, 0으로 초기화하여 100개의 요소를 할당하세요.\n3. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. 각 반복에서 사용자로부터 unsigned int형 데이터를 입력받아 data 배열에 저장하세요.\n5. [rep_end(1)]\n6. { 블록을 시작합니다.\n7. UINT형 배열 arr을 정의하고, 0으로 초기화하여 100개의 요소를 할당하세요.\n8. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n9. data 배열을 역순으로 arr 배열에 저장하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n12. arr 배열의 값을 data 배열로 복사하여 역순으로 되돌립니다.\n13. [rep_end(1)]\n14. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n15. data 배열의 각 요소를 공백과 함께 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int arr1[10]; unsigned int arr2[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr1[i]); } for (int i = 0; i < 10; i++) { arr2[i] = arr1[i] + 1; } for (int i = 0; i < 10; i++) { printf(\"%u \", arr1[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", arr2[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 두 개의 unsigned int형 배열 arr1과 arr2를 각각 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 사용자의 입력을 받아 arr1 배열의 각 요소에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. arr1의 각 요소에 1을 더한 값을 arr2의 각 요소에 저장하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n10. arr1의 각 요소를 출력하세요.\n11. [rep_end(1)]\n12. arr1의 출력이 끝난 후 줄바꿈을 하세요.\n13. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n14. arr2의 각 요소를 출력하세요.\n15. [rep_end(1)]\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int arr[100] = { 0 }; int n = 0; for (int i = 0; i < 10; i++) { scanf(\"%d\", &arr[i]); } scanf(\"%d\", &n); int index = 0; int sum = 0; for (int i = 0; i < n; i++) { scanf(\"%d\", &index); sum += arr[index]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 arr을 크기 100으로 선언하고, 모든 요소를 0으로 초기화하세요.\n3. 정수형 변수 n을 선언하세요.\n4. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n5. 사용자가 입력한 값을 배열 arr의 i번째 인덱스에 저장하세요.\n6. [rep_end(1)]\n7. 사용자가 입력한 값을 정수형 변수 n에 저장하세요.\n8. 정수형 변수 index를 0으로 선언하세요.\n9. 정수형 변수 sum을 0으로 초기화하세요.\n10. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. 사용자가 입력한 값을 index에 저장하세요.\n12. sum에 arr의 index번째 값을 더하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "# define _CRT_SECURE_NO_WARNINGS # include <stdio.h> int main() { unsigned int num[10] = { 0 }; for (unsigned int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); } for (unsigned int j = 0; j < 10; j++) { printf(\"%u \", num[j]); num[j] = num[j] + 1; } printf(\"\\n\"); for (unsigned int k = 0; k < 10; k++) { printf(\"%u \", num[k]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 num을 10개의 원소로 선언하고 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 num의 각 원소에 대해 사용자로부터 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] j를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 num의 각 원소를 출력하세요.\n8. 배열의 각 원소에 1을 더하세요.\n9. [rep_end(1)]\n10. 행을 바꾸는 출력을 수행하세요.\n11. [rep_start(1)] k를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. 배열 num의 각 원소를 다시 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); for (int i = 0; i < 50; i++) { int tmp; tmp = data[i]; data[i] = data[99 - i]; data[99 - i] = tmp; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 100개의 요소로 0으로 초기화하여 선언하세요.\n3. [rep_start(1)] i를 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. 배열 data의 각 요소에 정수를 입력받아 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 49까지 반복하는 for 루프를 작성하세요.\n7. int형 변수를 선언하여 배열 data의 i번째 요소를 tmp에 저장하세요.\n8. data의 i번째 요소를 data의 99-i번째 요소로 대체하세요.\n9. data의 99-i번째 요소를 tmp에 저장한 값으로 대체하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 99까지 반복하는 for 루프를 작성하세요.\n12. 배열 data의 각 요소를 공백으로 구분하여 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A = 0; unsigned int num[13] = { 0 }; for (int i = 1; i <= 10; i++) { scanf(\"%u\", &num[i]); } for (int i = 1; i <= 10; i++) { printf(\"%u \", num[i]); } printf(\"\\n\"); for (int i = 1; i <= 10; i++) { printf(\"%u \", num[i] + 1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 A를 0으로 초기화하세요.\n3. unsigned int형 배열 num을 13개의 요소로 0으로 초기화하여 선언하세요.\n4. [rep_start(1)] i를 선언해 1부터 10까지 반복하는 for 루프를 작성하세요.\n5. 사용자로부터 unsigned int형 값을 입력받아 num 배열의 i번째 요소에 저장하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 1부터 10까지 반복하는 for 루프를 작성하세요.\n8. num 배열의 i번째 요소를 출력하세요. (공백 포함)\n9. [rep_end(1)]\n10. 출력 후 줄바꿈을 위해 printf를 호출하세요.\n11. [rep_start(1)] i를 선언해 1부터 10까지 반복하는 for 루프를 작성하세요.\n12. num 배열의 i번째 요소에 1을 더한 값을 출력하세요. (공백 포함)\n13. [rep_end(1)]\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[10], B[10]; for(int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } for(int i = 0; i < 10; i++) { B[i] = A[i] + 1; } for(int i = 0; i < 10; i++) { printf(\"%u \", A[i]); } printf(\"\\n\"); for(int i = 0; i < 10; i++) { printf(\"%u \", B[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 A와 B를 각각 10개의 원소로 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n4. A 배열의 각 원소에 대해 사용자로부터 unsigned int 값을 입력받으세요.  \n5. [rep_end(1)]  \n6. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n7. B 배열의 각 원소에 A 배열의 원소에 1을 더한 값을 저장하세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n10. A 배열의 각 원소를 출력하세요.  \n11. printf 함수를 사용하여 다음 줄로 이동하세요.  \n12. [rep_end(1)]  \n13. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n14. B 배열의 각 원소를 출력하세요.  \n15. [rep_end(1)]  \n16. return 0;으로 프로그램을 종료하세요.  \n17. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int cnt = 0; unsigned int n = N; while (1) { unsigned int a = n % 2; if (a == 1) { cnt++; } unsigned int b = n / 2; if (b == 0) { break; } n = b; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하여 홀수의 개수를 셀 준비를 하세요.\n5. unsigned int형 변수 n을 N으로 초기화하여 n을 설정하세요.\n6. [rep_start(1)] 무한 루프를 실행하기 위해 while(1)을 작성하세요.\n7. n을 2로 나눈 나머지를 a에 저장하세요.\n8. [cond_start(2)] a가 1인지 확인하는 조건문을 작성하세요.\n9. a가 1이라면 cnt를 1 증가시키세요.\n10. [cond_end(2)]\n11. n을 2로 나눈 값을 b에 저장하세요.\n12. [cond_start(2)] b가 0인지 확인하는 조건문을 작성하세요.\n13. b가 0이라면 루프를 종료하세요.\n14. [cond_end(2)]\n15. n을 b로 업데이트하세요.\n16. [rep_end(1)]\n17. cnt를 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; int cnt = 0; scanf(\"%u\", &n); for (int i = 0; n>=1; i++) { if (n & 1) { cnt++; n = n >> 1; } else { n = n >> 1; } } printf(\"%d\", cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 cnt를 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 n이 1 이상일 때까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] n이 홀수인지 확인하는 조건문을 작성하세요.\n7. n이 홀수라면 cnt를 1 증가시키세요.\n8. n을 오른쪽으로 1비트 시프트하세요.\n9. [cond_end(2)]\n10. [else_start(2)] n이 짝수인 경우를 처리하세요.\n11. n을 오른쪽으로 1비트 시프트하세요.\n12. [else_end(2)]\n13. [rep_end(1)]\n14. cnt의 값을 출력하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> void swap(unsigned int data[]) { int tmp[100] = { 0, }; for (int i = 0; i < 100; i++) { tmp[i] = data[100 - 1 - i]; } for (int i = 0; i < 100; i++) { data[i] = tmp[i]; } } int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); swap(data); for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 배열을 인자로 받는 swap 함수를 정의하세요.\n2. 정수형 배열 tmp를 0으로 초기화하여 선언하세요. (크기: 100)\n3. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. 배열 data의 요소를 tmp 배열의 반전된 위치에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n7. tmp 배열의 값을 data 배열로 복사하세요.\n8. [rep_end(1)]\n9. [func_def_end(1)]\n10. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n11. unsigned int형 배열 data를 0으로 초기화하여 선언하세요. (크기: 100)\n12. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n13. 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n14. [rep_end(1)]\n15. swap 함수를 호출하여 data 배열의 요소를 반전시키세요.\n16. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n17. 반전된 data 배열의 요소를 출력하세요.\n18. [rep_end(1)]\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int arr1[10]; int n; unsigned int arr2[10]; for (int i = 0; i < 10; i++) { scanf(\"%d\", &arr1[i]); } scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &arr2[i]); } int sum = 0; for (int i = 0; i < n; i++) { sum += arr1[arr2[i]]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 배열 arr1을 크기 10으로 선언하세요.\n3. int 형 변수 n을 선언하세요.\n4. unsigned int 형 배열 arr2를 크기 10으로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n6. 배열 arr1의 각 요소에 입력받은 정수값을 저장하세요.\n7. [rep_end(1)]\n8. n의 값을 입력받으세요.\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. 배열 arr2의 각 요소에 입력받은 정수값을 저장하세요.\n11. [rep_end(1)]\n12. int 형 변수 sum을 0으로 초기화하세요.\n13. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n14. sum에 arr1의 arr2[i] 인덱스에 해당하는 값을 더하세요.\n15. [rep_end(1)]\n16. sum의 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int hr = 6; unsigned int M[101][101] = { 0 }; for (int i = 0; i < hr; i++) { for (int j = 0; j < hr; j++) { scanf(\"%d\", &M[i][j]); } } for (int i = 0; i < hr; i++) { for (int j = 0; j < hr; j++) { if (i == j) { printf(\" \"); } else if(i + j == 5) { printf(\" \"); } else { printf(\"%u \", M[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 hr을 6으로 초기화하세요.\n3. unsigned int형 2차원 배열 M을 101x101 크기로 선언하고 0으로 초기화하세요.\n4. [rep_start(1)] i를 0부터 hr-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 0부터 hr-1까지 반복하는 for 루프를 작성하세요.\n6. scanf 함수를 사용하여 M[i][j]에 정수를 입력받으세요.\n7. [rep_end(2)]\n8. [rep_end(1)]\n9. [rep_start(1)] i를 0부터 hr-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 0부터 hr-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n12. i와 j가 같다면 공백을 출력하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.\n15. i와 j의 합이 5라면 공백을 출력하세요.\n16. [cond_end(2)]\n17. [cond_start(2)] 위의 두 조건이 아닌 경우에 해당하는 조건문을 작성하세요.\n18. 조건이 만족한다면 M[i][j]를 출력하세요.\n19. [cond_end(2)]\n20. printf 함수를 통해 줄바꿈을 출력하세요.\n21. [rep_end(2)]\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int A[10]; int N; int I[10]; for (int i = 0; i < 10; i++) { scanf(\"%d\", &A[i]); } scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &I[i]); } int sum = 0; for (int i = 0; i < N; i++) { sum += A[I[i]]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 A를 크기 10으로 선언하세요.\n3. 정수형 변수 N을 선언하세요.\n4. 정수형 배열 I를 크기 10으로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n6. 사용자로부터 A 배열의 각 요소에 대한 정수를 입력받으세요.\n7. [rep_end(1)]\n8. N에 대한 정수를 입력받으세요.\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. 사용자로부터 I 배열의 각 요소에 대한 정수를 입력받으세요.\n11. [rep_end(1)]\n12. 정수형 변수 sum을 0으로 초기화하세요.\n13. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n14. A 배열의 I 배열 요소에 해당하는 값을 sum에 더하세요.\n15. [rep_end(1)]\n16. sum의 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main(void) { unsigned int a[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j) { printf(\" \"); } else if (i + j == 5) { printf(\" \"); } else { printf(\"%u \", a[i][j]); } } if (i != 5) { printf(\"\\n\"); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 6x6 배열 a를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 정수를 입력받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같다면 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.\n14. i와 j의 합이 5라면 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] 위의 조건을 모두 만족하지 않으면 해당 배열 요소를 출력하세요.\n17. 배열 a의 i,j번째 요소를 출력하세요.\n18. [cond_end(2)]\n19. [rep_end(2)]\n20. [cond_start(2)] 마지막 행이 아닐 경우 새로운 줄을 출력하세요.\n21. i가 5가 아닐 때 새로운 줄을 출력하세요.\n22. [cond_end(2)]\n23. [rep_end(1)]\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define LEN 10 int main(void){ unsigned int arr[LEN] = { }; for(int i = 0; i < LEN; i++){ scanf(\"%u\", &arr[i]); } for(int i = 0; i < LEN; i++){ printf(\"%u \", arr[i]); } for(int i = 0; i < LEN; i++){ arr[i]++; } printf(\"\\n\"); for(int i = 0; i < LEN; i++){ printf(\"%u \", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 배열의 크기를 정의하는 매크로 LEN을 10으로 설정하세요.\n3. unsigned int형 배열 arr을 LEN 크기로 선언하고 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 LEN-1까지 반복하는 for 루프를 작성하세요.\n5. scanf로 사용자로부터 각 요소에 대한 unsigned int 입력을 받으세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 LEN-1까지 반복하는 또 다른 for 루프를 작성하세요.\n8. 배열 arr의 각 요소를 출력하세요. (공백으로 구분)\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 LEN-1까지 반복하는 for 루프를 작성하세요.\n11. 각 요소의 값을 1씩 증가시키세요.\n12. [rep_end(1)]\n13. 줄바꿈을 출력하세요.\n14. [rep_start(1)] i를 선언해 0부터 LEN-1까지 반복하는 마지막 for 루프를 작성하세요.\n15. 증가된 배열 arr의 각 요소를 출력하세요. (공백으로 구분)\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const *argv[]) { unsigned int data[100] = {0}; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); unsigned int data_2[100] = {0}; for(int i = 99;i>=0;i--){ data_2[i] = data[99-i]; } for(int i = 0;i<100;i++){ data[i] = data_2[i]; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const *argv[])\n2. unsigned int 형 배열 data를 선언하고 크기를 100으로 설정하며, 모든 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. data 배열에 사용자로부터 unsigned int 형 데이터를 입력받아 저장하세요.\n5. [rep_end(1)]\n6. unsigned int 형 배열 data_2를 선언하고 크기를 100으로 설정하며, 모든 요소를 0으로 초기화하세요.\n7. [rep_start(1)] i를 선언해 99부터 0까지 감소하면서 반복하는 for 루프를 작성하세요.\n8. data_2 배열의 i번째 요소에 data 배열의 99-i번째 요소를 저장하여 배열을 반전하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n11. data 배열에 data_2 배열의 i번째 요소를 다시 저장하여 배열을 반전시키세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n14. data 배열의 i번째 요소를 출력하세요. (각 요소 사이에 공백 추가)\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a, b; scanf(\"%d %d\", &a, &b); int cnt = 0; int cnt2 = 0; for (int i = 0;i<100 ; i++) { cnt++; if (a % cnt == 0 && b % cnt == 0) { cnt2 = cnt; } } printf(\"%d\", cnt2); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 b를 선언하세요.\n3. a와 b에 입력을 받으세요.\n4. 두 값의 약수를 찾기 위한 int형 변수 cnt를 0으로 초기화하세요.\n5. 마지막으로 발견된 공약수를 저장할 int형 변수 cnt2를 0으로 초기화하세요.\n6. [rep_start(1)] i를 0부터 99까지 반복하는 for 루프를 작성하세요.\n7. cnt를 1씩 증가시키세요.\n8. [cond_start(2)] a와 b가 cnt로 나누어지는지 확인하는 조건문을 작성하세요.\n9. a와 b가 cnt로 나누어진다면 cnt2에 cnt의 값을 저장하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. cnt2의 값을 출력하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int array[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &array[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", array[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { array[i] += 1; } for (int i = 0; i < 10; i++) { printf(\"%u \", array[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 array[10]을 0으로 초기화하여 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열의 각 인덱스에 사용자로부터 unsigned int형 값을 입력받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 입력받은 값을 배열에서 출력하세요.\n8. 출력 후 공백을 추가하세요.\n9. [rep_end(1)]\n10. 새로운 줄을 출력하세요.\n11. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n12. 배열의 각 요소에 1을 더하세요.\n13. [rep_end(1)]\n14. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n15. 수정된 배열 값을 출력하세요.\n16. 출력 후 공백을 추가하세요.\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a; scanf(\"%u\", &a); int count = 0; while (a != 0) { if (a % 2 == 1) { a /= 2; count++; } else { a /= 2; } } printf(\"%d\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 a를 선언하세요.\n3. a에 대한 입력을 받으세요.\n4. 정수형 변수 count를 0으로 초기화하세요.\n5. [rep_start(1)] a가 0이 아닐 경우 반복하는 while 루프를 작성하세요.\n6. [cond_start(2)] a가 홀수인지 확인하는 조건문을 작성하세요.\n7. a가 홀수라면 a를 2로 나누고 count를 1 증가시키세요.\n8. [cond_end(2)]\n9. 그렇지 않다면 a를 2로 나누세요.\n10. [rep_end(1)]\n11. count를 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N = 0; scanf(\"%u\", & N); int cnt = 0; for (int i = 0; i < 32; i++) { int bit = (N >> i) & 1; if (bit == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하여 비트 카운트를 저장할 준비를 하세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. int형 변수 bit를 선언하고, N의 i번째 비트를 추출하여 저장하세요.\n7. [cond_start(2)] bit이 1인지 확인하는 조건문을 작성하세요.\n8. bit이 1이라면 cnt를 1 증가시키세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. cnt의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int a[10]; for (int i = 1; i <= 10; i++) { scanf(\"%u\", &a[i - 1]); printf(\"%u \", a[i - 1]); } printf(\"\\n\"); for (int i = 1; i <= 10; i++) { printf(\"%u \", a[i - 1] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 선언해 1부터 10까지 반복하는 for 루프를 작성하세요.\n4. 루프 내에서 사용자로부터 정수를 입력받아 배열 a에 저장하세요.\n5. 입력받은 값을 출력하세요.\n6. [rep_end(1)]\n7. 배열의 요소들 아래에 한 줄 바꿈을 출력하세요.\n8. [rep_start(1)] i를 선언해 1부터 10까지 반복하는 for 루프를 작성하세요.\n9. 배열 a의 각 요소에 1을 더한 값을 출력하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } int n; scanf(\"%d\", &n); int b[n]; for (int i = 0; i < n; i++) { scanf(\"%d\", &b[i]); } int sum = 0; for (int j = 0; j < n; j++) { sum += a[b[j]]; } printf(\"%u\\n\",sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 a를 크기 10으로 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n4. a 배열의 각 요소에 대해 사용자로부터 unsigned int 입력을 받으세요.  \n5. [rep_end(1)]  \n6. int형 변수 n을 선언하세요.  \n7. n에 대한 정수를 사용자로부터 입력받으세요.  \n8. int형 배열 b를 크기 n으로 선언하세요.  \n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n10. b 배열의 각 요소에 대해 사용자로부터 정수 입력을 받으세요.  \n11. [rep_end(1)]  \n12. int형 변수 sum을 0으로 초기화하세요.  \n13. [rep_start(1)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n14. a[b[j]]의 값을 sum에 더하세요.  \n15. [rep_end(1)]  \n16. sum의 값을 출력하세요.  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[10] = { 0 }; int N; int I[10] = { 0 }; int sum = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &I[i]); } for (int i = 0; i < N; i++) { sum = sum + A[I[i]]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 선언하고 크기를 10으로 설정하며 모든 값을 0으로 초기화하세요.\n3. int형 변수 N을 선언하세요.\n4. int형 배열 I를 선언하고 크기를 10으로 설정하며 모든 값을 0으로 초기화하세요.\n5. 정수형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. A 배열의 각 요소에 대해 사용자로부터 uint 값을 입력받으세요.\n8. [rep_end(1)]\n9. 사용자로부터 입력받을 정수 N의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. I 배열의 각 요소에 대해 사용자로부터 int 값을 입력받으세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n14. I 배열의 각 값에 해당하는 A 배열의 요소를 sum에 더하세요.\n15. [rep_end(1)]\n16. sum의 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int num[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); } for (int i = 0; i < 10; i++) { printf(\"%u\", num[i]); if (i < 9) printf(\" \"); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u\", num[i] + 1); if (i < 9) printf(\" \"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 num을 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 루프 내부에서 배열 num의 각 요소에 대해 사용자가 입력한 값을 읽어들이세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 num의 i번째 요소를 출력하세요.\n8. [cond_start(2)] i가 9보다 작은지 확인하는 조건문을 작성하세요.\n9. i가 9보다 작다면 공백을 출력하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. 개행 문자를 출력하세요.\n13. [rep_start(1)] i를 다시 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n14. 배열 num의 i번째 요소에 1을 더한 값을 출력하세요.\n15. [cond_start(2)] i가 9보다 작은지 확인하는 조건문을 작성하세요.\n16. i가 9보다 작다면 공백을 출력하세요.\n17. [cond_end(2)]\n18. [rep_end(1)]\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 10개의 정수 중 특정 인덱스의 수들을 모두 더한 결과를 출력하는 프로그램을 작성하시오. 입력 설명 (정수) : 더할 정수 후보 (정수) : 더할 정수의 개수 (정수) : 더할 정수의 인덱스 출력 설명 입력한 인덱스의 값을 모두 더한 값을 출력한다. 입력 예시 복사 0 1 2 3 4 5 6 7 8 9 3 1 3 5 출력 예시 복사 9 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int num[10] = { 0, }; int n; int index; int sum = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &num[i]); } scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &index); sum = sum + num[index]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 num[10]을 0으로 초기화하여 선언하세요.\n3. int형 변수 n을 선언하세요.\n4. int형 변수 index를 선언하세요.\n5. int형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 입력으로 받은 정수를 num 배열에 저장하세요.\n8. [rep_end(1)]\n9. 입력으로 정수 n을 받으세요. (더할 정수의 개수)\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. 입력으로 받은 index 값을 읽어옵니다.\n12. sum에 num 배열의 index 위치 값을 더하세요.\n13. [rep_end(1)]\n14. sum의 값(더한 결과)을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int arr[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &arr[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j || j == 6 - 1 - i) { printf(\" \"); } else { printf(\"%u \", arr[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 2차원 배열 arr을 6x6 크기로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. arr 배열의 각 요소에 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(1)] 현재 인덱스가 대각선 또는 반대 대각선에 있는지 확인하는 조건문을 작성하세요.\n11. i가 j와 같거나 j가 5 - i인지 확인하세요.\n12. 공백을 출력하세요.\n13. [cond_end(1)]\n14. [cond_start(1)] 위의 조건이 아니면 현재 배열 요소를 출력하세요.\n15. arr[i][j]를 출력하세요.\n16. [cond_end(1)]\n17. printf로 줄바꿈을 출력하세요.\n18. [rep_end(2)]\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int UINT BitMultiple(UINT count) { UINT val = 1; for (UINT i = 0; i < count; i++) val *= 2; return val; } UINT BTOI(char* arr) { UINT val = 0; for (UINT i = 0; i < 32; i++) if (arr[i] == '1') val += BitMultiple(i); return val; } int main() { char n[32]; for (UINT i = 0; i < 32; i++) scanf(\"%c\", n + i); UINT val = BTOI(n); for (UINT i = 0; i < 32; i++) { if (n[i] == '1') printf(\"0\"); else printf(\"1\"); } printf(\"\\n\"); printf(\"%d\", !val); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 함수 BitMultiple을 정의합니다. (매개변수: UINT count)\n2. UINT val 변수를 1로 초기화합니다.\n3. [rep_start(1)] i를 0부터 count-1까지 반복하는 for 루프를 정의합니다.\n4. val에 2를 i 번 곱합니다.\n5. [rep_end(1)]\n6. val 값을 반환합니다.\n7. [func_def_end(1)]\n8. [func_def_start(1)] UINT 반환형 함수 BTOI을 정의합니다. (매개변수: char* arr)\n9. UINT val 변수를 0으로 초기화합니다.\n10. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성합니다.\n11. [cond_start(2)] arr의 i 번째 요소가 '1'인지 확인하는 조건문을 작성합니다.\n12. arr의 i 번째 요소가 '1'이라면, val에 BitMultiple(i)의 값을 더합니다.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. val 값을 반환합니다.\n16. [func_def_end(1)]\n17. [func_def_start(1)] int 반환형 main 함수를 정의합니다. (매개변수 없음)\n18. char형 배열 n을 선언합니다.\n19. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성합니다.\n20. n 배열의 i 번째 요소에 값을 입력받습니다.\n21. [rep_end(1)]\n22. UINT val 변수를 BTOI(n)으로 초기화합니다.\n23. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성합니다.\n24. [cond_start(2)] n 배열의 i 번째 요소가 '1'인지 확인하는 조건문을 작성합니다.\n25. n 배열의 i 번째 요소가 '1'이라면 \"0\"을 출력합니다.\n26. 그렇지 않으면 \"1\"을 출력합니다.\n27. [cond_end(2)]\n28. [rep_end(1)]\n29. 새로운 줄을 출력합니다.\n30. val이 0이 아닌지 확인하여 0을 출력합니다.\n31. return 0으로 프로그램을 종료합니다.\n32. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int arr[6][6] = { 0 }; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%d\", &arr[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j || i + j == 5) { printf(\" \"); } else { printf(\"%d \", arr[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 6x6 2차원 정수형 배열 arr을 0으로 초기화하여 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. arr[i][j]에 정수를 입력받아 저장하는 scanf 호출하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i가 j와 같거나 i+j가 5인지 확인하는 조건문을 작성하세요.\n11. 조건이 참이라면 공백을 출력하세요.\n12. [cond_end(2)]\n13. 조건이 거짓이라면 arr[i][j]를 출력하세요.\n14. 출력 후 공백을 추가하세요.\n15. [rep_end(2)]\n16. 줄바꿈을 출력하세요.\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(){ unsigned int a,b = 0; unsigned int max = 0; scanf(\"%u\",&a); scanf(\"%u\",&b); for(int i = 1;i<100;i++){ if(a%i == 0 && b%i == 0){ max = i; } } printf(\"%u \",max); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. unsigned int형 변수 b를 0으로 초기화하여 선언하세요.\n4. unsigned int형 변수 max를 0으로 초기화하여 선언하세요.\n5. a에 대한 값을 입력받으세요.\n6. b에 대한 값을 입력받으세요.\n7. [rep_start(1)] i를 1부터 99까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] a가 i로 나누어 떨어지는지 그리고 b가 i로 나누어 떨어지는지 확인하는 조건문을 작성하세요.\n9. a와 b가 i로 나누어 떨어지면 max를 i로 설정하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. max의 값을 출력하세요.\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int a[6][6]; for (int i = 0;i < 6;i++) { for (int j = 0;j < 6;j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0;i < 6;i++) { for (int j = 0;j < 6;j++) { if (i == j) { printf(\" \"); } else if (i+j==5) { printf(\" \"); } else { printf(\"%u \", a[i][j]); } } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 6x6 크기의 unsigned int형 다차원 배열 a를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 대해 사용자로부터 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] 현재 인덱스가 대각선인지 확인하는 조건문을 작성하세요.\n11. 대각선일 경우 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] 현재 인덱스가 반대 대각선인지 확인하는 조건문을 작성하세요.\n14. 반대 대각선일 경우 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] 대각선이나 반대 대각선이 아닐 때 배열의 요소를 출력하세요.\n17. 배열 a의 (i,j) 요소를 출력하세요.\n18. [cond_end(2)]\n19. printf(\"\\n\")을 호출하여 각 행을 개행하세요.\n20. [rep_end(2)]\n21. [rep_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a[10] = { 0 }; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < 10; i++) { printf(\"%u \", a[i]); } printf(\"\\n\"); for (int i = 0; i < 10; i++) { printf(\"%u \", a[i] + 1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a를 크기 10으로 선언하고 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. a[i]에 사용자 입력 값을 저장하기 위해 scanf 함수를 사용하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 요소를 공백과 함께 출력하기 위해 printf 함수를 사용하세요.\n8. [rep_end(1)]\n9. 줄 바꿈을 위해 printf(\"\\n\") 함수 호출하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. a[i]에 1을 더한 값을 공백과 함께 출력하기 위해 printf 함수를 사용하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a[10]; int n; int i[11]; int sum = 0; for (int j = 0; j < 10; j++) { scanf(\"%d\", &a[j]); } scanf(\"%d\", &n); for (int j = 0; j < n; j++) { scanf(\"%d\", &i[j]); sum = sum + a[i[j]]; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 a를 크기 10으로 선언하세요.\n3. 정수형 변수 n을 선언하세요.\n4. 정수형 배열 i를 크기 11로 선언하세요.\n5. 소수의 합을 저장할 정수형 변수 sum을 0으로 초기화하세요.\n6. [rep_start(1)] j를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소에 대해 입력을 받으세요.\n8. [rep_end(1)]\n9. n에 대한 입력을 받으세요.\n10. [rep_start(1)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. 배열 i의 각 요소에 대해 입력을 받으세요.\n12. sum에 배열 a의 i[j] 요소를 더하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char value[34]; int cnt = 0; for (int i = 0; i < 32; i++) { scanf(\"%c\", &value[i]); } for (int i = 0; i < 32; i++) { if (value[i] - '0' == 1) { printf(\"0\"); cnt++; } else { printf(\"1\"); } } printf(\"\\n\"); if (cnt == 0) { printf(\"1\"); } else { printf(\"0\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열을 저장할 char형 배열 value를 선언하세요 (크기: 34).\n3. 정수를 저장할 변수 cnt를 0으로 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. value 배열에 사용자로부터 문자를 입력받아 저장합니다.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] value[i]가 문자 '0'에서 1을 뺀 값이 1인지 확인하는 조건문을 작성하세요.\n9. value[i]가 1이라면 \"0\"을 출력하고, cnt를 1 증가시킵니다.\n10. [cond_end(2)]\n11. [cond_start(2)] value[i]가 1이 아니면 \"1\"을 출력합니다.\n12. [cond_end(2)]\n13. [rep_end(1)]\n14. 줄 바꿈을 출력하여 다음 출력을 위한 줄을 추가합니다.\n15. [cond_start(1)] cnt가 0인지 확인하는 조건문을 작성하세요.\n16. cnt가 0이라면 \"1\"을 출력합니다.\n17. [cond_end(1)]\n18. [cond_start(1)] cnt가 0이 아니면 \"0\"을 출력합니다.\n19. [cond_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ int A[32]; int cnt = 0; for(int i = 0;i<32;i++){ scanf(\"%1d\",&A[i]); } for(int i = 0;i<32;i++){ if(A[i] == 1){ printf(\"0\"); cnt++; } else{ printf(\"1\"); } } printf(\"\\n\"); if(cnt!=0){ printf(\"0\"); } else{ printf(\"1\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 A를 32개의 요소로 선언하세요.\n3. 정수형 변수 cnt를 0으로 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. 배열 A의 각 요소에 대해 1자리 숫자를 입력받아 저장하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A[i]가 1인지 확인하는 조건문을 작성하세요.\n9. A[i]가 1이라면 0을 출력하고, cnt를 1 증가시키세요.\n10. [cond_start(3)] A[i]가 1이 아니면 처리하는 조건문을 작성하세요.\n11. A[i]가 1이 아닐 경우 1을 출력하세요.\n12. [cond_end(3)]\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 줄 바꿈을 출력하세요.\n16. [cond_start(1)] cnt가 0이 아닌지 확인하는 조건문을 작성하세요.\n17. cnt가 0이 아닐 경우 0을 출력하세요.\n18. [cond_end(1)]\n19. [cond_start(1)] cnt가 0인 경우를 처리하는 조건문을 작성하세요.\n20. cnt가 0이면 1을 출력하세요.\n21. [cond_end(1)]\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int x, y, min, max; scanf(\"%d %d\", &x, &y); if (x > y) min = y; if (x < y) min = x; for (int i = 2; i <= min; i++) { if (x % i == 0 && y % i == 0) { max = i; } } printf(\"%d\", max); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 변수 x, y, min, max를 선언하세요.\n3. x와 y의 값을 입력 받으세요.\n4. [cond_start(1)] x가 y보다 큰지를 확인하는 조건문을 작성하세요.\n5. x가 y보다 크면 min에 y를 할당하세요.\n6. [cond_end(1)]\n7. [cond_start(1)] x가 y보다 작은지를 확인하는 조건문을 작성하세요.\n8. x가 y보다 작으면 min에 x를 할당하세요.\n9. [cond_end(1)]\n10. [rep_start(1)] i를 선언해 2부터 min까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] x가 i로 나누어지는지 그리고 y가 i로 나누어지는지를 확인하는 조건문을 작성하세요.\n12. 조건을 만족하면 max에 i를 할당하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. max의 값을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int cnt = 0; while (N > 0) { if (N % 2 == 1) { cnt++; } N /= 2; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 변수 cnt를 0으로 초기화하세요.  \n5. [rep_start(1)] N이 0보다 큰 동안 반복하는 while 루프를 작성하세요.  \n6. [cond_start(2)] N이 홀수인지 확인하는 조건문을 작성하세요.  \n7. N이 홀수라면 cnt를 1 증가시키세요.  \n8. [cond_end(2)]  \n9. N을 2로 나누어 값을 업데이트하세요.  \n10. [rep_end(1)]  \n11. cnt의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } unsigned int N; scanf(\"%u\", &N); unsigned int I[10]; unsigned int sum = 0; for (int i = 0; i < N; i++) { scanf(\"%u\", &I[i]); sum = sum + A[I[i]]; } printf(\"%u\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 10개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 A의 각 요소에 대한 입력을 받으세요.\n5. [rep_end(1)]\n6. unsigned int형 변수 N을 선언하세요.\n7. N에 대한 입력을 받으세요.\n8. unsigned int형 배열 I를 10개의 요소로 선언하세요.\n9. unsigned int형 변수 sum을 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. 배열 I의 각 요소에 대한 입력을 받으세요.\n12. 배열 A에서 I[i]번째 요소의 값을 sum에 더하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { const int n = 6; unsigned int matrix[n][n]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%u\", &matrix[i][j]); } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { if ((i == j) || ((i + j) == 5)) { printf(\" \"); } else { printf(\"%u \", matrix[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 상수 정수 n을 6으로 초기화하세요.  \n3. n x n 크기의 unsigned int형 2차원 배열 matrix를 선언하세요.  \n4. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n5. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n6. 사용자로부터 unsigned int 값을 입력받아 matrix[i][j]에 저장하세요.  \n7. [rep_end(2)]  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n10. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n11. [cond_start(2)] i와 j가 같은지 또는 i+j가 5인지 확인하는 조건문을 작성하세요.  \n12. 조건이 참이라면 공백을 출력하세요.  \n13. [cond_end(2)]  \n14. [cond_start(2)] 조건이 거짓이라면 matrix[i][j]의 값을 출력하세요.  \n15. [cond_end(2)]  \n16. printf()를 호출하여 줄 바꿈을 출력하세요.  \n17. [rep_end(2)]  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ unsigned int N[10]; for(int i=0;i<10;i++) { scanf(\"%u \",&N[i]); } for(int i=0;i<10;i++) { printf(\"%u \",N[i]); } printf(\"\\n\"); for(int i=0;i<10;i++) { printf(\"%u \",N[i]+1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 N을 10개 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 N의 각 요소에 대해 사용자로부터 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 N의 각 요소를 출력하세요.\n8. [rep_end(1)]\n9. 줄 바꿈을 위해 printf 함수를 호출하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 N의 각 요소에 1을 더한 값을 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(int argc, char const* argv[]) { unsigned int data[10] = { 0 }; for (int i = 0; i <= 9; i++) scanf(\"%u\", data + i); for (int i = 0; i <= 9; i++) printf(\"%u \", data[i]); printf(\"\\n\"); for (int i = 0; i <= 9 ;i++) printf(\"%u \", data[i]+1); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 선언하고 10개의 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. 배열 data의 i번째 요소에 사용자로부터 unsigned int 입력을 받으세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 data의 i번째 요소를 출력하세요. (뒤에 공백을 추가하세요.)\n8. [rep_end(1)]\n9. 한 줄 바꿈을 출력하세요.\n10. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n11. 배열 data의 i번째 요소에 1을 더한 값을 출력하세요. (뒤에 공백을 추가하세요.)\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%d\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j) { printf(\" \"); } else if (i + j == 5) { printf(\" \"); } else { printf(\"%d \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 6x6 정수형 배열 a를 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. 배열 a의 각 요소에 사용자로부터 입력을 받아 저장하세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j가 같으면 조건문을 작성하세요.  \n11. 대각선에서는 아무것도 출력하지 마세요.  \n12. [cond_end(2)]  \n13. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.  \n14. 반대 대각선에서도 아무것도 출력하지 마세요.  \n15. [cond_end(2)]  \n16. 그 외의 경우에는 배열의 요소 a[i][j]를 출력하세요.  \n17. [rep_end(2)]  \n18. 줄 바꿈을 위해 printf(\"\\n\");을 호출하세요.  \n19. [rep_end(1)]  \n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i != j && i+j!=5) { printf(\"%u \", a[i][j]); } else { printf(\" \"); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 2차원 배열 a를 unsigned int형으로 선언하여 6x6 크기의 배열로 만드세요.\n3. [rep_start(1)] i를 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 사용자로부터 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i와 j가 다르고, i+j가 5가 아님을 확인하는 조건문을 작성하세요.\n11. 조건을 만족하면 a[i][j]의 값을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] 조건을 만족하지 않으면 공백을 출력하세요.\n14. [cond_end(3)]\n15. 각 줄의 끝에서 줄바꿈을 출력하세요.\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned char a[100] = { 0 }; gets(a); for (int i = 0; i < 100; i++) { if (a[i] == '1') { a[i] = 'q'; } if (a[i] == '2') { a[i] = 'w'; } if (a[i] == '3') { a[i] = 'e'; } if (a[i] == '4') { a[i] = 'r'; } if (a[i] == '5') { a[i] = 't'; } if (a[i] == '6') { a[i] = 'y'; } if (a[i] == '7') { a[i] = 'u'; } if (a[i] == '8') { a[i] = 'i'; } if (a[i] == '9') { a[i] = 'o'; } if (a[i] == '0') { a[i] = 'p'; } } printf(\"%s\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char형 배열 a를 선언하고 크기 100으로 초기화하세요. 초기값은 0입니다.\n3. gets 함수를 사용하여 문자열을 입력받아 a 배열에 저장하세요.\n4. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] a[i]가 '1'인지 확인하는 조건문을 작성하세요.\n6. a[i]가 '1'이라면 해당 위치에 'q'를 저장하세요.\n7. [cond_end(2)]\n8. [cond_start(2)] a[i]가 '2'인지 확인하는 조건문을 작성하세요.\n9. a[i]가 '2'라면 해당 위치에 'w'를 저장하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] a[i]가 '3'인지 확인하는 조건문을 작성하세요.\n12. a[i]가 '3'이라면 해당 위치에 'e'를 저장하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] a[i]가 '4'인지 확인하는 조건문을 작성하세요.\n15. a[i]가 '4'라면 해당 위치에 'r'을 저장하세요.\n16. [cond_end(2)]\n17. [cond_start(2)] a[i]가 '5'인지 확인하는 조건문을 작성하세요.\n18. a[i]가 '5'라면 해당 위치에 't'를 저장하세요.\n19. [cond_end(2)]\n20. [cond_start(2)] a[i]가 '6'인지 확인하는 조건문을 작성하세요.\n21. a[i]가 '6'이라면 해당 위치에 'y'를 저장하세요.\n22. [cond_end(2)]\n23. [cond_start(2)] a[i]가 '7'인지 확인하는 조건문을 작성하세요.\n24. a[i]가 '7'이라면 해당 위치에 'u'를 저장하세요.\n25. [cond_end(2)]\n26. [cond_start(2)] a[i]가 '8'인지 확인하는 조건문을 작성하세요.\n27. a[i]가 '8'이라면 해당 위치에 'i'를 저장하세요.\n28. [cond_end(2)]\n29. [cond_start(2)] a[i]가 '9'인지 확인하는 조건문을 작성하세요.\n30. a[i]가 '9'라면 해당 위치에 'o'를 저장하세요.\n31. [cond_end(2)]\n32. [cond_start(2)] a[i]가 '0'인지 확인하는 조건문을 작성하세요.\n33. a[i]가 '0'이라면 해당 위치에 'p'를 저장하세요.\n34. [cond_end(2)]\n35. [rep_end(1)]\n36. printf 함수를 사용하여 a 배열의 내용을 출력하세요.\n37. return 0;으로 프로그램을 종료하세요.\n38. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[10]; unsigned int N; unsigned int I[10]; int i; int result = 0; for (i = 0; i < 10; i++) { scanf(\"%d\", &A[i]); } scanf(\"%d\", &N); for (i = 0; i < N; i++) { scanf(\"%d\", &I[i]); } for (i = 0; i < N; i++) { result += A[I[i]]; } printf(\"%d\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 10개 크기로 선언하세요.\n3. unsigned int형 변수 N을 선언하세요.\n4. unsigned int형 배열 I를 10개 크기로 선언하세요.\n5. int형 변수 i를 선언하세요.\n6. int형 변수 result를 0으로 초기화하세요.\n7. [rep_start(1)] i를 0부터 9까지 반복하는 for 루프를 작성하세요.\n8. A 배열의 각 요소에 대한 입력을 받으세요.\n9. [rep_end(1)]\n10. scanf를 사용하여 N의 값을 입력받으세요.\n11. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n12. I 배열의 각 요소에 대한 입력을 받으세요.\n13. [rep_end(1)]\n14. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n15. result에 A[I[i]]의 값을 더하세요.\n16. [rep_end(1)]\n17. result의 값을 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); unsigned int temp = 0; for (int i = 0; i < 50; i++) { temp = data[i]; data[i] = data[99 - i]; data[99 - i] = temp; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 선언하고 모든 요소를 0으로 초기화하세요.\n3. [rep_start(1)] i를 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. data 배열의 각 요소를 사용자가 입력한 값으로 초기화하세요.\n5. [rep_end(1)]\n6. unsigned int형 변수 temp를 0으로 초기화하세요.\n7. [rep_start(1)] i를 0부터 49까지 반복하는 for 루프를 작성하세요.\n8. 현재 인덱스 i의 data 값을 temp에 저장하세요.\n9. data 배열에서 현재 인덱스 i의 값을 data 배열의 (99 - i) 인덱스 값으로 설정하세요.\n10. (99 - i) 인덱스의 값을 temp로 설정하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 0부터 99까지 반복하는 for 루프를 작성하세요.\n13. data 배열의 모든 요소를 화면에 출력하세요.\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A, B; scanf(\"%d %d\", &A, &B); int N[100] = { 0 }; int k = 0; for (int i = 1; i <= 99; i++) { if (A % i == 0 && B % i == 0) { N[k] = i; k++; } } printf(\"%d\", N[k-1]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A와 B를 선언하세요.\n3. A와 B에 입력을 받으세요.\n4. int형 배열 N을 100개의 원소로 선언하고 0으로 초기화하세요.\n5. 정수형 변수 k를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] A와 B가 i로 나누어 떨어지는지 확인하는 조건문을 작성하세요.\n8. A와 B가 i로 나누어떨어지면, N 배열의 k번째 원소에 i를 저장하세요.\n9. k의 값을 1 증가시킵니다.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. N 배열의 마지막 요소(N[k-1])를 출력하세요.\n13. 프로그램을 종료하기 위해 return 0;을 호출합니다.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[6][6] = { 0 }; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j)printf(\" \"); else if (i + j == 5)printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 6x6 크기의 unsigned int형 2차원 배열 A를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. 배열 A의 각 요소에 값을 입력받기 위해 scanf 함수를 호출하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같으면 아무 것도 출력하지 않으세요.\n12. [cond_end(2)]\n13. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.\n14. i와 j의 합이 5라면 아무 것도 출력하지 않으세요.\n15. [cond_end(2)]\n16. 배열 A의 i, j 번째 요소 값을 출력하세요.\n17. [rep_end(2)]\n18. printf 함수를 호출하여 줄 바꿈을 출력하세요.\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int A, B; scanf(\"%u %u\", &A, &B); unsigned int max = 1; int C = (A > B) ? A + 1 : B + 1; for (int i = 1; i < C; i++) { if (A % i == 0 && B % i == 0) { if (i > max) max = i; } } printf(\"%u\", max); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 A와 B를 선언하세요.  \n3. A와 B에 무부호 정수를 입력받으세요.  \n4. unsigned int형 변수 max를 1로 초기화하세요.  \n5. [cond_start(1)] A와 B를 비교하여 크고 작은 값을 구하는 조건문을 작성하세요.  \n6. A가 B보다 크면 C를 A + 1로 설정하고, 그렇지 않으면 B + 1로 설정하세요.  \n7. [cond_end(1)]  \n8. [rep_start(1)] i를 1부터 C-1까지 반복하는 for 루프를 작성하세요.  \n9. [cond_start(2)] A와 B 모두 i로 나누어지는지 확인하는 조건문을 작성하세요.  \n10. A와 B가 모두 i로 나눠지면 [cond_start(3)] i가 max보다 큰지 확인하세요.  \n11. i가 max보다 크면 max를 i로 업데이트하세요.  \n12. [cond_end(3)]  \n13. [cond_end(2)]  \n14. [rep_end(1)]  \n15. max의 값을 출력하세요.  \n16. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a[10], b, I, sum = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } scanf(\"%u\", &b); for (int i = 0; i < b; i++) { scanf(\"%u\", &I); sum += a[I]; } printf(\"%u\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 a[10]을 선언하세요.\n3. unsigned int형 변수 b, I, sum을 선언하고 sum을 0으로 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 입력을 받으세요.\n6. [rep_end(1)]\n7. b에 대한 입력을 받으세요.\n8. [rep_start(1)] i를 선언해 0부터 b-1까지 반복하는 for 루프를 작성하세요.\n9. 배열 a에서 인덱스 I의 값을 sum에 더하세요.\n10. [rep_end(1)]\n11. sum의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a,b; int ans = 0; scanf(\"%d %d\", &a, &b); for (int i = 1; i < 100; i++) { if (a % i == 0 && b % i == 0) { ans = i; } } printf(\"%d\", ans); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 b를 선언하세요.\n3. 공약수를 저장할 int형 변수 ans를 0으로 초기화하세요.\n4. M과 N에 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] a와 b가 i로 나누어지는지 확인하는 조건문을 작성하세요.\n7. a와 b가 i로 나누어진다면 ans에 i를 저장하세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. ans 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main() { UINT arr[10]; UINT n; UINT sum[10]; UINT count = 0; for (UINT i = 0; i < 10; i++) scanf(\"%u\", &arr[i]); scanf(\"%u\", &n); for (UINT i = 0; i < n; i++) scanf(\"%u\", &sum[i]); for (UINT i = 0; i < n; i++) count += arr[sum[i]]; printf(\"%u\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT 형식의 배열 arr를 크기 10으로 선언하세요.\n3. UINT 형식의 변수 n을 선언하세요.\n4. UINT 형식의 배열 sum을 크기 n으로 선언하세요.\n5. UINT 형식의 변수 count를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. arr 배열에 사용자로부터 입력받은 값을 저장하세요.\n8. [rep_end(1)]\n9. 사용자로부터 n의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. sum 배열에 사용자로부터 입력받은 값을 저장하세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n14. count에 arr 배열의 index sum[i]에 해당하는 값을 더하세요.\n15. [rep_end(1)]\n16. count의 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ unsigned int A[10]; int N; int I[10]; unsigned int cnt = 0; for(int i =0;i<10;i++){ scanf(\"%u\",&A[i]); } scanf(\"%d\",&N); for(int i =0;i<N;i++){ scanf(\"%d\",&I[i]); } for(int i = 0;i<10;i++){ for(int j = 0;j<N;j++){ if(i == I[j]){ cnt = cnt+A[i]; } } } printf(\"%u\",cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 타입의 배열 A를 크기 10으로 선언하세요.\n3. int 타입의 변수 N을 선언하세요.\n4. int 타입의 배열 I를 크기 10으로 선언하세요.\n5. unsigned int 타입의 변수 cnt를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. A 배열의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받으세요.\n8. [rep_end(1)]\n9. N의 값을 사용자로부터 정수형으로 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. I 배열의 각 요소에 대해 사용자로부터 정수 값을 입력받으세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n14. [rep_start(2)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(3)] i와 I[j]가 같은지 확인하는 조건문을 작성하세요.\n16. 같다면 cnt에 A[i] 값을 추가하세요.\n17. [cond_end(3)]\n18. [rep_end(2)]\n19. [rep_end(1)]\n20. cnt 값을 출력하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int a[10] = { 0 }; int x, y; int res = 0; unsigned int b[10]; for (int i = 0; i < 10; i++) { scanf(\"%d\", &a[i]); } scanf(\"%d\", &x); for (int i = 0; i < x; i++) { scanf(\"%d\", &b[i]); } for (int i = 0; i < x; i++) { y = b[i]; res = res + a[y]; } printf(\"%d\", res); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int 배열 a를 10개 요소로 초기화하여 선언하세요. (모든 요소는 0으로 초기화됨)\n3. 정수형 변수 x와 y를 선언하세요.\n4. 결과를 저장할 정수형 변수 res를 0으로 초기화하세요.\n5. unsigned int 배열 b를 10개 요소로 선언하세요.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 사용자로부터 정수 입력을 받아 배열 a에 저장하세요.\n8. [rep_end(1)]\n9. 입력받을 정수 x를 사용자로부터 요청하세요.\n10. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n11. 사용자로부터 정수 입력을 받아 배열 b에 저장하세요.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n14. b 배열의 i 번째 요소를 y에 할당하세요.\n15. a 배열의 y 번째 요소를 res에 더하세요.\n16. [rep_end(1)]\n17. res의 값을 출력하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int max = 0; unsigned int a, b; scanf(\"%d %d\", &a, &b); int c; if (a < b) c = b; else c = a; for (int i = 1; i < c; i++) { if (a % i == 0 && b % i ==0 ) max = i; } printf(\"%d\", max); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 max를 0으로 초기화하세요.\n3. 무부호 정수형 변수 a와 b를 선언하세요.\n4. a와 b에 대한 입력을 받으세요.\n5. 정수형 변수 c를 선언하세요.\n6. [cond_start(1)] a가 b보다 작은지 확인하는 조건문을 작성하세요.\n7. a가 b보다 작다면 c에 b의 값을 할당하세요.\n8. [cond_end(1)]\n9. [cond_start(1)] a가 b보다 크거나 같다면 c에 a의 값을 할당하세요.\n10. [cond_end(1)]\n11. [rep_start(1)] i를 선언해 1부터 c-1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] a가 i로 나누어지는지 확인하고 b도 i로 나누어지는지 확인하는 조건문을 작성하세요.\n13. a와 b 모두 i로 나누어지면 max에 i를 설정하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. max의 값을 출력하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int mat[10] = { 0 }; unsigned int num; unsigned int taget[10] = { 0 }; unsigned int sum = 0; for (unsigned int i = 0; i < 10; i++) { scanf(\"%u\", &mat[i]); } scanf(\"%u\", &num); for (unsigned int i = 0; i < num; i++) { scanf(\"%u\", &taget[i]); } for (unsigned int i = 0; i < num; i++) { sum = sum + mat[taget[i]]; } printf(\"%u\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 mat[10]을 선언하고 모든 요소를 0으로 초기화합니다.\n3. unsigned int형 변수 num을 선언합니다.\n4. unsigned int형 배열 taget[10]을 선언하고 모든 요소를 0으로 초기화합니다.\n5. unsigned int형 변수 sum을 0으로 초기화합니다.\n6. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n7. 배열 mat의 각 요소에 대해 사용자로부터 unsigned int형 정수를 입력받아 저장합니다.\n8. [rep_end(1)]\n9. 사용자로부터 unsigned int형 변수 num의 값을 입력받습니다.\n10. [rep_start(1)] i를 선언해 0부터 num-1까지 반복하는 for 루프를 작성하세요.\n11. 배열 taget의 각 요소에 대해 사용자로부터 unsigned int형 정수를 입력받아 저장합니다.\n12. [rep_end(1)]\n13. [rep_start(1)] i를 선언해 0부터 num-1까지 반복하는 for 루프를 작성하세요.\n14. sum에 mat 배열의 taget[i]에 해당하는 값을 더합니다.\n15. [rep_end(1)]\n16. 최종적으로 sum의 값을 출력합니다.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int data[100] = { 0 }; for (int i = 0; i < 100; i++) scanf(\"%u\", data + i); unsigned int a[100]; unsigned int b[100]; for (int i = 0; i < 100; i++) { a[i] = data[i]; } for (int i = 0; i < 100; i++) { b[i] = a[99 - i]; } for (int i = 0; i < 100; i++) { data[i] = b[i]; } for (int i = 0; i < 100; i++) printf(\"%u \", data[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int 형 배열 data를 크기 100으로 선언하고 초기화하세요.\n3. [rep_start(1)] 0부터 99까지 반복하는 for 루프를 작성하세요.\n4. 각 요소에 대해 사용자로부터 unsigned int 값을 입력받아 data 배열에 저장하세요.\n5. [rep_end(1)]\n6. unsigned int 형 배열 a를 크기 100으로 선언하세요.\n7. unsigned int 형 배열 b를 크기 100으로 선언하세요.\n8. [rep_start(1)] 0부터 99까지 반복하는 for 루프를 작성하세요.\n9. data 배열의 값을 a 배열에 복사하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] 0부터 99까지 반복하는 for 루프를 작성하세요.\n12. a 배열의 값을 역순으로 b 배열에 저장하세요.\n13. [rep_end(1)]\n14. [rep_start(1)] 0부터 99까지 반복하는 for 루프를 작성하세요.\n15. b 배열의 값을 data 배열에 다시 저장하세요.\n16. [rep_end(1)]\n17. [rep_start(1)] 0부터 99까지 반복하는 for 루프를 작성하세요.\n18. data 배열의 각 요소를 공백과 함께 출력하세요.\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 입력한 2차원 케이크를 4등분하여 출력한다. 입력 설명 (정수) : 6 * 6 행렬의 요소 출력 설명 케이크를 곱하기 모양으로 정확히 자른 모양으로 출력한다. 각 행의 요소들은 띄어쓰기로 구분하고, 행끼리는 줄바꿈으로 구분한다. 입력 예시 복사 1 2 1 2 3 1 2 3 1 2 3 2 1 2 3 5 3 2 2 1 3 4 5 1 2 1 3 5 4 3 2 1 3 4 1 2 출력 예시 복사 2 1 2 3 2 1 2 2 1 2 3 2 2 1 5 1 2 3 5 3 1 3 4 1 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define SZ 6 int main() { unsigned int cake[SZ][SZ] = { 0, }; for (int i = 0; i < SZ; i++) { for (int j = 0; j < SZ; j++) { scanf(\"%u\", &cake[i][j]); } } for (int i = 0; i < SZ; i++) { for (int j = 0; j < SZ; j++) { if (i == j) { printf(\" \"); } else if ((i == 0 && j == 5) || (i == 1 && j == 4) || (i == 2 && j == 3) || (i == 3 && j == 2) || (i == 4 && j == 1) || (i == 5 && j == 0)) { printf(\" \"); } else { printf(\"%u \", cake[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int형 main 함수를 정의하세요. (매개변수 없음)\n2. SZ라는 매크로를 6으로 정의하세요.\n3. unsigned int형 2차원 배열 cake를 선언하고 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 SZ-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 SZ-1까지 반복하는 for 루프를 작성하세요.\n6. 각 요소를 사용자로부터 입력받아 cake 배열에 저장하세요.\n7. [rep_end(2)]\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 SZ-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 선언해 0부터 SZ-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(3)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n12. i와 j가 같다면 공백을 출력하세요.\n13. [cond_end(3)]\n14. [cond_start(3)] 특정 조건에 맞는 요소들에 대해 공백을 출력하는 조건문을 작성하세요.\n15. 주어진 조건에 해당하면 공백을 출력하세요.\n16. [cond_end(3)]\n17. 그렇지 않으면 cake 배열의 해당 요소를 출력하세요.\n18. [rep_end(2)]\n19. 각 행의 끝에 줄바꿈을 출력하세요.\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int ary[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &ary[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if ((i + j==5)||(i==j)) { printf(\" \"); } else { printf(\"%u \", ary[i][j]); } } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 2차원 배열 ary[6][6]을 선언하세요.  \n3. [rep_start(1)] i를 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. ary[i][j]에 사용자로부터 unsigned int 값을 입력받으세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i+j가 5이거나 i가 j와 같은지 확인하는 조건문을 작성하세요.  \n11. 조건이 참이면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. 조건이 거짓이면 ary[i][j]의 값을 출력하세요.  \n14. [rep_end(2)]  \n15. 줄바꿈을 위한 printf(\"\\n\")을 호출하세요.  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a, b; int result = 0; int rest = 0; scanf(\"%d %d\", &a, &b); if (a < b) { int temp; temp = a; a = b; b = temp; } for (int i = 0; a < 100; i++) { result = a / b; rest = a % b; if (rest == 0) { printf(\"%d\", b); break; } else { a = b; b = rest; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 b를 선언하세요.\n3. 결과를 저장할 int형 변수 result를 0으로 초기화하세요.\n4. 나머지를 저장할 int형 변수 rest를 0으로 초기화하세요.\n5. a와 b에 대한 입력을 받으세요.\n6. [cond_start(1)] a가 b보다 작은지 확인하는 조건문을 작성하세요.\n7. a가 b보다 작으면, 임시 변수 temp를 선언하세요.\n8. temp에 a를 저장하세요.\n9. a에 b를 저장하세요.\n10. b에 temp를 저장하여 a와 b의 값을 교환하세요.\n11. [cond_end(1)]\n12. [rep_start(1)] i를 선언해 a가 100 미만일 때 반복하는 for 루프를 작성하세요.\n13. a를 b로 나눈 결과를 result에 저장하세요.\n14. a를 b로 나눈 나머지를 rest에 저장하세요.\n15. [cond_start(2)] 나머지 rest가 0인지 확인하는 조건문을 작성하세요.\n16. 나머지가 0이면 b를 출력하고 루프를 종료하세요.\n17. [cond_end(2)]\n18. 그렇지 않으면, a에 b를 저장하고 b에 rest를 저장하세요.\n19. [rep_end(1)]\n20. 프로그램을 종료하기 위해 return 0;를 사용하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int A[10]; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } unsigned int a = 0; scanf(\"%u\", &a); unsigned int b[10]; unsigned int sum = 0; for (int i = 0; i < a; i++) { scanf(\"%u\", &b[i]); sum += A[b[i]]; } printf(\"%u\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 크기 10으로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n4. A[i]에 있는 값에 대한 입력을 scanf를 통해 받으세요.\n5. [rep_end(1)]\n6. unsigned int형 변수 a를 선언하세요.\n7. a에 대한 값을 scanf를 통해 입력 받으세요.\n8. unsigned int형 배열 b를 크기 10으로 선언하세요.\n9. unsigned int형 변수 sum을 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n11. b[i]에 있는 값에 대한 입력을 scanf를 통해 받으세요.\n12. sum에 A[b[i]] 값을 더하세요.\n13. [rep_end(1)]\n14. sum의 값을 출력하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%x\", &n); for (int i = 0; i < 4; i++) { printf(\"%X \", n & 0xFF); n = n >> 8; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 부호 없는 정수형 변수 n을 선언하세요.  \n3. n에 16진수 형식으로 입력을 받으세요.  \n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.  \n5. n의 하위 8비트(0xFF)를 추출하여 16진수 형식으로 출력하세요.  \n6. n을 8비트 오른쪽으로 시프트하여 다음 반복을 준비하세요.  \n7. [rep_end(1)]  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a[10]; unsigned int n; unsigned int idx[10] = { 0, }; unsigned int sum = 0; unsigned int idx_cnt = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &a[i]); } scanf(\"%u\", &n); for (unsigned int i = 0; i < n; i++) { scanf(\"%u\", &idx[i]); } for (unsigned int i = 0; i < 10; i++) { if (i == idx[idx_cnt]) { sum += a[i]; idx_cnt++; } } printf(\"%u\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 배열 a를 선언하고 10개의 unsigned int 크기를 설정하세요.  \n3. unsigned int형 변수 n을 선언하세요.  \n4. 정수형 배열 idx를 선언하고 10개의 unsigned int 크기를 0으로 초기화하세요.  \n5. unsigned int형 변수 sum을 0으로 초기화하세요.  \n6. unsigned int형 변수 idx_cnt를 0으로 초기화하세요.  \n7. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n8. 사용자로부터 a[i]에 대한 unsigned int 값을 입력받으세요.  \n9. [rep_end(1)]  \n10. 사용자로부터 n에 대한 unsigned int 값을 입력받으세요.  \n11. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n12. 사용자로부터 idx[i]에 대한 unsigned int 값을 입력받으세요.  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.  \n15. [cond_start(2)] i가 idx[idx_cnt]와 같은지 확인하는 조건문을 작성하세요.  \n16. a[i] 값을 sum에 더하세요.  \n17. idx_cnt를 1 증가시키세요.  \n18. [cond_end(2)]  \n19. [rep_end(1)]  \n20. sum의 값을 출력하세요.  \n21. return 0;으로 프로그램을 종료하세요.  \n22. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int a[6][6] = {0}; for (int i = 0; i < 6; i++) { for (int k = 0; k < 6; k++) { scanf(\"%d\", &a[i][k]); } } for (int i = 0; i < 6; i++) { for (int k = 0; k < 6; k++) { if (i + k == 5 || i == k) { printf(\" \"); } else { printf(\"%d \", a[i][k]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int 형 6x6 배열 a를 0으로 초기화합니다.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] k를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. 각 배열 a[i][k]에 사용자로부터 정수 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] k를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 k의 합이 5거나 i와 k가 같은지를 확인하는 조건문을 작성하세요.\n11. 조건이 참이라면 공백을 출력하세요.\n12. [cond_end(2)]\n13. 조건이 거짓이라면 a[i][k] 값을 출력하세요.\n14. [rep_end(2)]\n15. 각 행의 끝에서 줄바꿈을 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A; int B; scanf(\"%d %d\", &A, &B); int min = A > B ? B : A; for (int i = min; i >= 1; i--) { if ((A % i == 0) && (B % i == 0)) { printf(\"%d\", i); return 0; } } printf(\"1\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A와 B를 선언하세요.\n3. A와 B에 입력을 받으세요.\n4. A와 B 중에서 더 작은 값을 min 변수에 저장하세요. (조건부 연산자 사용)\n5. [rep_start(1)] i를 선언해 min부터 1까지 감소하는 for 루프를 작성하세요.\n6. [cond_start(2)] A와 B가 i로 나누어지는지 확인하는 조건문을 작성하세요.\n7. 둘 다 나누어지면 i를 출력하세요.\n8. 0을 반환하여 프로그램을 종료하세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. 1을 출력하세요. (최대 공약수가 없을 경우)\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[10]; int N, I[10]; unsigned int result = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &A[i]); } scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &I[i]); } for (int i = 0; i < N; i++) { result += A[I[i]]; } printf(\"%u\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 크기 10으로 선언하세요.\n3. 정수형 변수 N과 unsigned int형 배열 I를 크기 10으로 선언하세요.\n4. unsigned int형 변수 result를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n6. 배열 A의 각 요소에 대해 사용자로부터 값을 입력받으세요.\n7. [rep_end(1)]\n8. N에 대한 입력을 받으세요.\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. 배열 I의 각 요소에 대해 사용자로부터 인덱스를 입력받으세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n13. result에 배열 A의 I[i] 인덱스에 해당하는 값을 더하세요.\n14. [rep_end(1)]\n15. result의 값을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int arr[10]; unsigned int n; unsigned int a; for (int i = 0; i < 10; i++) { scanf(\"%u\", &arr[i]); } scanf(\"%u\", &n); int sum = 0; for (int i = 0; i < n; i++) { scanf(\"%u\", &a); sum = sum + arr[a]; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 arr[10]을 선언하여 10개의 정수를 저장할 공간을 할당하세요.\n3. unsigned int형 변수 n을 선언하세요.\n4. unsigned int형 변수 a를 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n6. 사용자로부터 10개의 양의 정수를 입력받아 arr 배열에 저장하세요.\n7. [rep_end(1)]\n8. 사용자로부터 추가로 입력받을 정수 n을 입력받으세요.\n9. int형 변수 sum을 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. 사용자로부터 입력받은 a를 통해 arr 배열의 값을 sum에 더하세요.\n12. [rep_end(1)]\n13. sum의 값을 출력하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a[6][6] = { 0 }; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j || i+j == 5) { printf(\" \"); } else { printf(\"%u \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 6x6 크기의 unsigned int형 2차원 배열 a를 0으로 초기화하세요.  \n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n5. 배열 a의 각 요소에 사용자로부터 unsigned int 입력을 받으세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j가 같은지 또는 i+j가 5인지 확인하는 조건문을 작성하세요.  \n11. [cond_start(3)] i와 j가 같다면 공백을 출력하세요.  \n12. [cond_end(3)]  \n13. [cond_start(3)] i와 j가 다르면 배열 a의 해당 요소를 출력하세요.  \n14. printf를 사용하여 a[i][j]와 공백을 출력하세요.  \n15. [cond_end(3)]  \n16. printf를 사용하여 개행 문자를 출력하세요.  \n17. [rep_end(2)]  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned A[6][6]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 6; i++) { for (int j = 0; j < 6; j++) { if (i == j) { printf(\" \"); } else if (j + i == 5) { printf(\" \"); } else { printf(\"%u \", A[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned형 2차원 배열 A를 6x6 크기로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n5. A[i][j]에 사용자로부터 입력받은 unsigned 정수를 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] 현재 행과 열이 같은지 확인하는 조건문을 작성하세요.\n11. i가 j와 같으면 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] i와 j의 합이 5인지 확인하는 조건문을 작성하세요.\n14. i와 j의 합이 5이면 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] 위의 조건이 모두 만족하지 않으면 실행할 else 문을 작성하세요.\n17. A[i][j]를 출력하세요.\n18. [cond_end(2)]\n19. printf를 사용하여 개행 문자를 출력하세요.\n20. [rep_end(2)]\n21. [rep_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; int abc[11]; int asd[11]; int qwe[11]; int b = 0; int sum = 0; for (int i = 0; i < 10; i++) { scanf(\"%d\", &abc[i]); } scanf(\"%d\", &a); for (int i = 0; i < a; i++) { scanf(\"%d\", &asd[i]); } for (int i = 0; i < a; i++) { sum = sum + abc[asd[i]]; } printf(\"%d\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. 정수형 배열 abc를 선언하고 크기를 11로 설정하세요.\n4. 정수형 배열 asd를 선언하고 크기를 11로 설정하세요.\n5. 정수형 배열 qwe를 선언하고 크기를 11로 설정하세요.\n6. 정수형 변수 b를 0으로 초기화하세요.\n7. 정수형 변수 sum을 0으로 초기화하세요.\n8. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n9. abc 배열의 i번째 요소에 대한 정수를 입력받으세요.\n10. [rep_end(1)]\n11. a에 대한 정수를 입력받으세요.\n12. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n13. asd 배열의 i번째 요소에 대한 정수를 입력받으세요.\n14. [rep_end(1)]\n15. [rep_start(1)] i를 선언해 0부터 a-1까지 반복하는 for 루프를 작성하세요.\n16. sum에 abc 배열의 asd[i]번째 요소를 더하세요.\n17. [rep_end(1)]\n18. sum의 값을 출력하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(int argc, char const* argv[]) { unsigned int data[10]; unsigned int data2[10]; unsigned int no, sum = 0; for (int i = 0; i < 10; i++) { scanf(\"%u\", &data[i]); } scanf(\"%u\", &no); for (int i = 0; i < no; i++) { scanf(\"%u\", &data2[i]); } for (int i = 0; i < no; i++) { sum = sum + data[data2[i]]; } printf(\"%u\", sum); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수: int argc, char const* argv[])\n2. unsigned int형 배열 data를 크기 10으로 선언하여 입력 데이터를 저장할 공간을 만드세요.\n3. unsigned int형 배열 data2를 크기 10으로 선언하여 인덱스를 저장할 공간을 만드세요.\n4. unsigned int형 변수 no와 sum을 선언하세요. sum은 0으로 초기화됩니다.\n5. [rep_start(1)] i를 선언해 0부터 9까지 반복하는 for 루프를 작성하세요.\n6. 사용자로부터 입력을 받아 data 배열의 i번째 요소에 저장하세요.\n7. [rep_end(1)]\n8. 사용자로부터 no 값을 입력받아 몇 개의 인덱스를 사용할지를 결정합니다.\n9. [rep_start(1)] i를 선언해 0부터 no-1까지 반복하는 for 루프를 작성하세요.\n10. 사용자로부터 입력을 받아 data2 배열의 i번째 요소에 저장하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 no-1까지 반복하는 for 루프를 작성하세요.\n13. sum에 data 배열에서 data2 배열의 i번째 요소로 지정된 인덱스의 값을 더하세요.\n14. [rep_end(1)]\n15. sum 값을 출력하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int PrintBit(int val) { int count = 0; for (int i = 0; i < 32; i++) if ((val >> (31 - i)) & 0b01) ++count; return count; } int main() { int a; scanf(\"%d\", &a); printf(\"%d\", PrintBit(a)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 PrintBit 함수를 정의하세요. (매개변수: int val)\n2. 함수의 내부에서 정수형 변수 count를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. [cond_start(2)] val의 비트 연산을 통해 특정 비트가 1인지 확인하는 조건문을 작성하세요.\n5. val의 31-i번째 비트가 1이라면 count를 1 증가시키세요.\n6. [cond_end(2)]\n7. [rep_end(1)]\n8. val에서 1의 개수를 반환하기 위해 count를 반환하세요.\n9. [func_def_end(1)]\n10. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n11. 정수형 변수 a를 선언하세요.\n12. a에 입력을 받으세요.\n13. PrintBit 함수를 호출하여 a의 비트에서 1의 개수를 출력하세요.\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N = 0; scanf(\"%u\", &N); int cnt = 0; for (int i = 0; i < 32; i++) { int bit = (N >> i) & 1; if (bit == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. 변수 bit에 N을 i만큼 오른쪽으로 이동시켜 1의 비트를 추출하여 저장하세요.\n7. [cond_start(2)] bit이 1인지 확인하는 조건문을 작성하세요.\n8. bit이 1이라면 cnt를 1 증가시키세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. cnt를 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char arr[33]; scanf(\"%33s\", arr); for (int i = 0; i < 32; i++) { if (arr[i] == '1') { printf(\"0\"); } else { printf(\"1\"); } } printf(\"\\n\"); for (int i = 0; arr[i] != '\\0'; i++) { if (arr[i] != '0') { printf(\"0\"); return 0; } } printf(\"1\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 arr을 33 크기로 선언하세요.  \n3. scanf 함수를 사용하여 최대 32개의 문자(문자열)를 arr에 입력받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n5. [cond_start(2)] arr의 i번째 문자가 '1'인지 확인하는 조건문을 작성하세요.  \n6. arr[i]가 '1'이라면 0을 출력하세요.  \n7. [cond_end(2)]  \n8. [cond_start(2)] arr[i]가 '1'이 아닐 경우의 조건문을 작성하세요.  \n9. 1을 출력하세요.  \n10. [cond_end(2)]  \n11. [rep_end(1)]  \n12. 줄 바꿈을 위해 printf 함수를 사용하세요.  \n13. [rep_start(1)] i를 선언해 arr의 각 문자를 반복하는 for 루프를 작성하세요.  \n14. [cond_start(2)] arr의 i번째 문자가 널 문자('\\0')가 아닌지 확인하는 조건문을 작성하세요.  \n15. [cond_start(3)] arr[i]가 '0'이 아닐 경우의 조건문을 작성하세요.  \n16. 0을 출력하고 프로그램을 종료하세요.  \n17. [cond_end(3)]  \n18. [cond_end(2)]  \n19. 1을 출력하세요.  \n20. [rep_end(1)]  \n21. return 0;으로 프로그램을 종료하세요.  \n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%u\", &n); int cnt = 0; for (int i = 0; i < 32; i++) { if (n & 0x01) { cnt++; } n = n >> 1; } printf(\"%d\\n\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. n에 사용자로부터 입력을 받으세요.  \n4. int형 변수 cnt를 0으로 초기화하여 비트의 개수를 셀 변수를 선언하세요.  \n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.  \n6. [cond_start(2)] n의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.  \n7. 최하위 비트가 1이라면 cnt를 1 증가시키세요.  \n8. [cond_end(2)]  \n9. n을 1비트 오른쪽으로 이동시키세요.  \n10. [rep_end(1)]  \n11. cnt의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a[32]; for (int i = 0; i < 32; i++) { scanf(\"%1d\", &a[i]); } for (int i = 0; i < 32; i++) { printf(\"%d\", !a[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (a[i]) { printf(\"0\"); return 0; } else { continue; } } printf(\"1\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 a를 크기 32로 선언하세요.\n3. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. scanf를 사용하여 각 자리수(0 또는 1)를 배열 a에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 각 요소의 반대 값을 출력하세요. (1은 0으로, 0은 1로)\n8. [rep_end(1)]\n9. 출력 후 줄바꿈을 위해 printf(\"\\n\")을 호출하세요.\n10. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] 배열 a의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n12. 요소가 1이라면 \"0\"을 출력하고 프로그램을 종료하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] 요소가 1이 아닐 경우를 처리하는 else 절을 작성하세요.\n15. continue 명령어로 다음 순회를 진행하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. \"1\"을 출력하여 모든 요소가 0인 경우를 처리하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); unsigned char a[n]; for (int i = 0; i < n; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; i++) { for (int j = 0; j < 8; j++) { if (a[i] & 0x80) { printf(\"-\"); } else { printf(\"_\"); } a[i] = a[i] << 1; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 입력을 받으세요.\n4. unsigned char형 배열 a를 크기 n으로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 a의 i번째 요소에 정수를 입력받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] a[i]의 최상위 비트가 1인지 확인하는 조건문을 작성하세요.\n11. 최상위 비트가 1이면 \"-\"를 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] 그렇지 않으면 \"_\"를 출력하세요.\n14. [cond_end(3)]\n15. a[i]의 값을 왼쪽으로 1 비트 시프트하세요.\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; int num, cnt = 0; char str[12]; gets(str); while (str[cnt] != '\\0') { num = str[cnt] - '0'; cnt++; switch (num) { case 0: printf(\"p\"); break; case 1: printf(\"q\"); break; case 2: printf(\"w\"); break; case 3: printf(\"e\"); break; case 4: printf(\"r\"); break; case 5: printf(\"t\"); break; case 6: printf(\"y\"); break; case 7: printf(\"u\"); break; case 8: printf(\"i\"); break; case 9: printf(\"o\"); break; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 num과 cnt를 0으로 초기화하세요.\n4. char 배열 str을 크기 12로 선언하세요.\n5. 사용자의 입력을 str에 저장합니다.\n6. [rep_start(1)] str의 각 문자를 반복해서 처리하는 while 루프를 시작하세요.\n7. str[cnt]가 널 문자(종료 문자)인지 확인하세요.\n8. str[cnt]의 값을 ASCII 코드 기준으로 '0'을 빼서 num에 저장하세요.\n9. cnt를 1 증가시킵니다.\n10. [cond_start(1)] switch 문을 사용하여 num의 값을 체크하세요.\n11. case 0에 해당하면 \"p\"를 출력하세요.\n12. break 문으로 switch 문을 종료합니다.\n13. case 1에 해당하면 \"q\"를 출력하세요.\n14. break 문으로 switch 문을 종료합니다.\n15. case 2에 해당하면 \"w\"를 출력하세요.\n16. break 문으로 switch 문을 종료합니다.\n17. case 3에 해당하면 \"e\"를 출력하세요.\n18. break 문으로 switch 문을 종료합니다.\n19. case 4에 해당하면 \"r\"를 출력하세요.\n20. break 문으로 switch 문을 종료합니다.\n21. case 5에 해당하면 \"t\"를 출력하세요.\n22. break 문으로 switch 문을 종료합니다.\n23. case 6에 해당하면 \"y\"를 출력하세요.\n24. break 문으로 switch 문을 종료합니다.\n25. case 7에 해당하면 \"u\"를 출력하세요.\n26. break 문으로 switch 문을 종료합니다.\n27. case 8에 해당하면 \"i\"를 출력하세요.\n28. break 문으로 switch 문을 종료합니다.\n29. case 9에 해당하면 \"o\"를 출력하세요.\n30. break 문으로 switch 문을 종료합니다.\n31. [cond_end(1)]\n32. [rep_end(1)]\n33. return 0;으로 프로그램을 종료하세요.\n34. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ unsigned int n; scanf(\"%x\", &n); for(int i=0;i<4;i++){ printf(\"%X \", (n & 0xFF)); n = n >> 8; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 부호 없는 정수형 변수 n을 선언하세요.\n3. n에 16진수 값을 입력받으세요.\n4. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. n의 하위 8비트를 16진수 형식으로 출력하세요.\n6. n을 오른쪽으로 8비트 이동하세요.\n7. [rep_end(1)]\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int UINT BitMultiple(UINT count) { UINT val = 1; for (UINT i = 0; i < count; i++) val *= 2; return val; } UINT BTOI(char* arr) { UINT val = 0; for (UINT i = 0; i < 32; i++) { if (arr[i] == '1') val += BitMultiple(31 - i); } return val; } void PrintBit(UINT val) { for (int i = 0; i < 32; i++) { if ((val >> (31 - i)) & 0b01) printf(\"1\"); else printf(\"0\"); } printf(\"\\n\"); } int main() { char* arr[33]; gets(arr); UINT val = BTOI(arr); PrintBit(~val); printf(\"%d\", !val); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 함수 BitMultiple을 정의하세요. (매개변수: UINT count)\n2. UINT val 변수를 1로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n4. val에 2를 곱하세요.\n5. [rep_end(1)]\n6. val의 값을 반환하세요.\n7. [func_def_end(1)]\n8. [func_def_start(1)] UINT 반환형 함수 BTOI을 정의하세요. (매개변수: char* arr)\n9. UINT val 변수를 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 '1'인지 확인하는 조건문을 작성하세요.\n12. arr[i]가 '1'이라면 val에 BitMultiple(31 - i)의 값을 더하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. val의 값을 반환하세요.\n16. [func_def_end(1)]\n17. [func_def_start(1)] void 반환형 함수 PrintBit을 정의하세요. (매개변수: UINT val)\n18. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] val의 31-i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n20. 31-i번째 비트가 1이라면 '1'을 출력하세요.\n21. 그렇지 않으면 '0'을 출력하세요.\n22. [cond_end(2)]\n23. [rep_end(1)]\n24. 개행 문자를 출력하세요.\n25. [func_def_end(1)]\n26. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n27. char* arr[33] 배열을 선언하세요.\n28. 사용자로부터 입력을 받기 위해 gets(arr)를 호출하세요.\n29. BTOI 함수를 호출하여 arr를 변환한 값을 UINT val에 저장하세요.\n30. PrintBit 함수를 호출하여 val의 비트를 출력하세요.\n31. val이 0이 아니라면 1, 아니면 0을 출력하세요.\n32. 프로그램을 종료하기 위해 return 0;을 사용하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int n; int cnt = 0; scanf(\"%u\", &n); int c = 0x01; for (int i = 0; i < 32; i++) { if ((n & c) == 1) { cnt++; } n = n >> 1; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. int형 변수 cnt를 0으로 초기화하세요.  \n4. n에 대한 입력을 받으세요.  \n5. int형 변수 c를 0x01로 초기화하여 2진수의 가장 오른쪽 비트를 검사하기 위한 마스크를 설정하세요.  \n6. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.  \n8. i번째 비트가 1이라면 cnt를 증가시키세요.  \n9. [cond_end(2)]  \n10. n을 오른쪽으로 1비트 이동시켜 다음 비트를 검사할 수 있도록 하세요.  \n11. [rep_end(1)]  \n12. cnt의 값을 출력하세요.  \n13. return 0;으로 프로그램을 종료하세요.  \n14. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned char a[33]; int flag = 0; scanf(\"%s\", a); for (int i = 0; i < 32; i++) { if (a[i] == '1') { printf(\"0\"); flag = 1; } else { printf(\"1\"); } } printf(\"\\n\"); if (flag == 1) { printf(\"0\"); } else { printf(\"1\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char형 배열 a를 33 크기로 선언하세요.\n3. 정수형 변수 flag를 0으로 초기화하세요.\n4. 사용자로부터 문자열 입력을 받기 위해 scanf 함수를 사용하여 a에 값을 저장하세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] a의 i번째 문자가 '1'인지 확인하는 조건문을 작성하세요.\n7. a[i]가 '1'이라면 '0'을 출력하고 flag를 1로 설정하세요.\n8. [cond_end(2)]\n9. 그렇지 않으면 '1'을 출력하세요.\n10. [rep_end(1)]\n11. 줄바꿈을 위해 printf 함수를 호출하세요.\n12. [cond_start(1)] flag값이 1인지 확인하는 조건문을 작성하세요.\n13. flag가 1이라면 '0'을 출력하세요.\n14. [cond_end(1)]\n15. [cond_start(1)] flag가 1이 아닌 경우를 처리하는 조건문을 작성하세요.\n16. flag가 0이라면 '1'을 출력하세요.\n17. [cond_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int n; unsigned char a[10]; int s = 0x80; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; i++) { int cnt = 8; while (cnt--) { if ((a[i] & s) == 0x80) { printf(\"-\"); } else { printf(\"_\"); } a[i] = a[i] << 1; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. 부호 없는 char 배열 a[10]을 선언하세요.  \n4. 정수형 변수 s를 0x80으로 초기화하세요.  \n5. n의 값을 사용자로부터 입력받으세요.  \n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n7. a 배열의 i번째 요소에 값을 사용자로부터 입력받으세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n10. 정수형 변수 cnt를 8로 초기화하세요.  \n11. [rep_start(2)] cnt가 0보다 클 때까지 반복하는 while 루프를 작성하세요.  \n12. [cond_start(2)] a[i]의 최상위 비트가 1인지 확인하는 조건문을 작성하세요.  \n13. 최상위 비트가 1이라면 \"-\"를 출력하세요.  \n14. [cond_end(2)]  \n15. [cond_start(2)] 최상위 비트가 1이 아니라면 \"_\"을 출력하세요.  \n16. [cond_end(2)]  \n17. a[i]를 왼쪽으로 1 비트 시프트하세요.  \n18. [rep_end(2)]  \n19. [rep_end(1)]  \n20. return 0;으로 프로그램을 종료하세요.  \n21. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a; unsigned int b; unsigned int c; unsigned int d; unsigned int e; scanf(\"%X\", &a); b = a & 0xFF; a = a >> 8; c = a & 0xFF; a = a >> 8; d = a & 0xFF; a = a >> 8; e = a & 0xFF; printf(\"%X \", b); printf(\"%X \", c); printf(\"%X \", d); printf(\"%X \", e); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a, b, c, d, e를 선언하세요.\n3. 16진수 입력을 위해 scanf를 사용하여 a의 값을 입력받으세요.\n4. b 변수에 a의 마지막 8비트를 AND 연산하여 저장하세요.\n5. a를 오른쪽으로 8비트 시프트하여 다음 8비트를 준비하세요.\n6. c 변수에 a의 마지막 8비트를 AND 연산하여 저장하세요.\n7. a를 오른쪽으로 8비트 시프트하여 다음 8비트를 준비하세요.\n8. d 변수에 a의 마지막 8비트를 AND 연산하여 저장하세요.\n9. a를 오른쪽으로 8비트 시프트하여 다음 8비트를 준비하세요.\n10. e 변수에 a의 마지막 8비트를 AND 연산하여 저장하세요.\n11. b의 16진수 값을 출력하세요.\n12. c의 16진수 값을 출력하세요.\n13. d의 16진수 값을 출력하세요.\n14. e의 16진수 값을 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned char a[10]; int len = 0; scanf(\"%s\", a); while (a[len] != NULL) { len++; } for (int i = 0; i < len; i++) { if (a[i] == '1') { printf(\"q\"); } else if (a[i] == '2') { printf(\"w\"); } else if (a[i] == '3') { printf(\"e\"); } else if (a[i] == '4') { printf(\"r\"); } else if (a[i] == '5') { printf(\"t\"); } else if (a[i] == '6') { printf(\"y\"); } else if (a[i] == '7') { printf(\"u\"); } else if (a[i] == '8') { printf(\"i\"); } else if (a[i] == '9') { printf(\"o\"); } else if (a[i] == '0') { printf(\"p\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char형 배열 a를 선언하여 크기를 10으로 설정하세요. 이 배열은 문자열을 저장할 것입니다.\n3. int형 변수 len을 선언하고 0으로 초기화하여 문자열의 길이를 추적할 것입니다.\n4. scanf 함수를 사용하여 사용자로부터 문자열을 입력받아 배열 a에 저장하세요.\n5. [rep_start(1)] a 배열의 길이를 계산하기 위해 len이 NULL이 아닐 때 반복하는 while 루프를 시작하세요.\n6. 배열 a의 현재 인덱스의 값을 확인하고, NULL이 아닌 경우 len을 1 증가시키세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 len-1까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(2)] a 배열의 i번째 요소가 '1'인지 확인하는 조건문을 작성하세요.\n10. a[i]가 '1'이라면 \"q\"를 출력하세요.\n11. [cond_end(2)]\n12. [cond_start(2)] a 배열의 i번째 요소가 '2'인지 확인하는 조건문을 작성하세요.\n13. a[i]가 '2'이라면 \"w\"를 출력하세요.\n14. [cond_end(2)]\n15. [cond_start(2)] a 배열의 i번째 요소가 '3'인지 확인하는 조건문을 작성하세요.\n16. a[i]가 '3'이라면 \"e\"를 출력하세요.\n17. [cond_end(2)]\n18. [cond_start(2)] a 배열의 i번째 요소가 '4'인지 확인하는 조건문을 작성하세요.\n19. a[i]가 '4'라면 \"r\"을 출력하세요.\n20. [cond_end(2)]\n21. [cond_start(2)] a 배열의 i번째 요소가 '5'인지 확인하는 조건문을 작성하세요.\n22. a[i]가 '5'라면 \"t\"를 출력하세요.\n23. [cond_end(2)]\n24. [cond_start(2)] a 배열의 i번째 요소가 '6'인지 확인하는 조건문을 작성하세요.\n25. a[i]가 '6'이라면 \"y\"를 출력하세요.\n26. [cond_end(2)]\n27. [cond_start(2)] a 배열의 i번째 요소가 '7'인지 확인하는 조건문을 작성하세요.\n28. a[i]가 '7'이라면 \"u\"를 출력하세요.\n29. [cond_end(2)]\n30. [cond_start(2)] a 배열의 i번째 요소가 '8'인지 확인하는 조건문을 작성하세요.\n31. a[i]가 '8'이라면 \"i\"를 출력하세요.\n32. [cond_end(2)]\n33. [cond_start(2)] a 배열의 i번째 요소가 '9'인지 확인하는 조건문을 작성하세요.\n34. a[i]가 '9'라면 \"o\"를 출력하세요.\n35. [cond_end(2)]\n36. [cond_start(2)] a 배열의 i번째 요소가 '0'인지 확인하는 조건문을 작성하세요.\n37. a[i]가 '0'이라면 \"p\"를 출력하세요.\n38. [cond_end(2)]\n39. [rep_end(1)]\n40. return 0;으로 프로그램을 종료하세요.\n41. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int void PrintBit(unsigned char val) { for (UINT i = 0; i < 8; i++) { if ((val >> (7 - i)) & 0b01) printf(\"-\"); else printf(\"_\"); } } int main() { UINT count; scanf(\"%u\", &count); unsigned char val[10] = { 0, }; for (UINT i = 0; i < count; i++) scanf(\"%d\", val + i); for (UINT i = 0; i < count; i++) PrintBit(val[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned char 형 변수를 입력받아 비트를 출력하는 PrintBit 함수를 정의하세요.\n2. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n3. [cond_start(2)] val의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n4. i번째 비트가 1이라면 \"-\"를 출력하세요.\n5. [cond_end(2)]\n6. 그렇지 않으면 \"_\"를 출력하세요.\n7. [rep_end(1)]\n8. [func_def_end(1)]\n9. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n10. UINT형 변수 count를 선언하세요.\n11. count에 사용자로부터 입력을 받으세요.\n12. unsigned char형 배열 val를 10개의 0으로 초기화하여 선언하세요.\n13. [rep_start(1)] i를 선언해 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n14. i번째 값에 입력을 받아 val 배열에 저장하세요.\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n17. i번째 val의 비트를 PrintBit 함수로 출력하세요.\n18. [rep_end(1)]\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(){ int a, b; scanf(\"%d %d\", &a, &b); if(a < b){ int tmp = a; a = b; b = tmp; } int _a = a, _b = b; while (a != 0) { int temp = a; a = b % a; b = temp; } int GCD = b; int LCM = _b / GCD * _a; printf(\"%d\\n\", LCM); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 b를 선언하세요.\n3. a와 b에 입력을 받으세요.\n4. [cond_start(1)] a가 b보다 작은지 확인하는 조건문을 작성하세요.\n5. a가 b보다 작다면, \n6. a와 b의 값을 교환하기 위해 tmp라는 변수를 선언하고 a의 값을 tmp에 저장하세요.\n7. a에 b의 값을 할당하세요.\n8. b에 tmp의 값을 할당하세요.\n9. [cond_end(1)]\n10. a와 b의 원래 값을 저장하기 위해 _a와 _b 변수를 선언하세요.\n11. [rep_start(1)] a가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n12. 현재 a의 값을 temp에 저장하세요.\n13. a에 b를 a로 나눈 나머지를 저장하세요.\n14. b에 temp의 값을 할당하세요.\n15. [rep_end(1)]\n16. GCD를 b에 저장하세요.\n17. LCM을 계산하기 위해 _b를 GCD로 나누고 _a를 곱하여 LCM 변수에 저장하세요.\n18. LCM을 출력하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a, b, c = 1; int tmp; int d, e; scanf(\"%d %d\", &a, &b); if (a < b) { tmp = a; a = b; b = tmp; } d = a; e = b; while (a % b != 0) { if (a % b != 0) { c = a % b; a = b; b = c; } } printf(\"%d\", (d * e) / b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a, b, c를 각각 선언하고 c를 1로 초기화하세요.\n3. 임시 변수 tmp를 선언하세요.\n4. 정수형 변수 d와 e를 선언하세요.\n5. 사용자로부터 a와 b에 대한 정수를 입력받으세요.\n6. [cond_start(1)] a가 b보다 작은지를 확인하는 조건문을 작성하세요.\n7. a가 b보다 작다면, tmp에 a의 값을 저장하세요.\n8. a의 값을 b로 변경하세요.\n9. b의 값을 tmp로 변경하여 두 값을 서로 교환하세요.\n10. [cond_end(1)]\n11. d에 a의 값을 저장하세요.\n12. e에 b의 값을 저장하세요.\n13. [rep_start(1)] a를 b로 나눈 나머지가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n14. [cond_start(2)] a를 b로 나눈 나머지가 0이 아닌지를 확인하는 조건문을 작성하세요.\n15. a를 b로 나눈 나머지를 c에 저장하세요.\n16. a의 값을 b로 변경하세요.\n17. b의 값을 c로 변경하여 두 값을 서로 교환하세요.\n18. [cond_end(2)]\n19. [rep_end(1)]\n20. a와 b의 곱을 b로 나눈 값을 출력하세요.\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int n; int count[4]; scanf(\"%u\", &n); int c = 0x01; for (int i = 3; i >= 0; i--) { int cnt = 0; for (int j = 0; j < 8; j++) { if ((n & c) == 1) { cnt++; } n = n >> 1; } count[i] = cnt; } for (int k = 0; k < 4; k++) { printf(\"%d \", count[k]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. int형 배열 count를 선언하여 길이를 4로 설정하세요.  \n4. n에 대해 사용자로부터 입력을 받으세요.  \n5. int형 변수 c를 0x01로 초기화하여 비트 마스크 역할을 하도록 합니다.  \n6. [rep_start(1)] i를 3부터 0까지 감소시키며 반복하는 for 루프를 작성하세요.  \n7. int형 변수 cnt를 0으로 초기화하여 각 비트에서 '1'의 개수를 세기 위한 변수로 사용합니다.  \n8. [rep_start(2)] j를 0부터 7까지 증가시키며 반복하는 for 루프를 작성하세요.  \n9. [cond_start(3)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.  \n10. n의 i번째 비트가 1이라면 cnt를 증가시키세요.  \n11. n을 1 비트 오른쪽으로 이동시키세요.  \n12. [cond_end(3)]  \n13. count[i]에 cnt를 저장하세요.  \n14. [rep_end(2)]  \n15. [rep_end(1)]  \n16. [rep_start(1)] k를 0부터 3까지 증가시키며 반복하는 for 루프를 작성하세요.  \n17. count 배열의 k번째 요소를 출력하세요.  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N, check = 1; int sum = 0; scanf(\"%u\", &N); for(int i = 0; i < 32; i++) { if((N & check) == check) { sum += 1; } check = check << 1; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N과 check를 1로 초기화하여 선언하세요.\n3. int형 변수 sum을 0으로 초기화하여 선언하세요.\n4. N의 값을 사용자로부터 입력받으세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] N의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n7. N의 i번째 비트가 1이라면 sum에 1을 더하세요.\n8. [cond_end(2)]\n9. check를 왼쪽으로 1 비트 시프트하세요.\n10. [rep_end(1)]\n11. sum의 값을 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int UINT GCD(UINT a, UINT b) { if (b == 0) return a; else return GCD(b, a % b); } UINT LCM(UINT a, UINT b) { return ((a * b) / GCD(a, b)); } int main() { UINT a, b; scanf(\"%u %u\", &a, &b); printf(\"%u\", LCM(a, b)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 GCD 함수를 정의하세요. (매개변수: UINT a, UINT b)\n2. [cond_start(1)] b가 0인지 확인하는 조건문을 작성하세요.\n3. b가 0이라면 a를 반환하세요.\n4. [cond_end(1)]\n5. 그렇지 않다면 GCD 함수를 재귀적으로 호출하며, b와 a % b를 인자로 전달하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] UINT 반환형 LCM 함수를 정의하세요. (매개변수: UINT a, UINT b)\n8. LCM의 값을 계산하기 위해 a와 b의 곱을 GCD(a, b)로 나누세요.\n9. [func_def_end(1)]\n10. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n11. UINT형 변수 a와 b를 선언하세요.\n12. a와 b에 대한 입력을 받으세요.\n13. LCM(a, b)의 결과를 출력하세요.\n14. 프로그램을 종료하기 위해 return 0;을 호출하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int void PrintHex(UINT val) { for (UINT i = 0; i < 4; i++) printf(\"%X \", ((val >> (8 * i)) & 0xff)); } int main() { UINT count; scanf(\"%x\", &count); PrintHex(count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 PrintHex 함수를 정의하세요. (매개변수: UINT val)\n2. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n3. printf 함수를 이용해 val의 i 바이트를 16진수로 출력하세요.\n4. [rep_end(1)]\n5. [func_def_end(1)]\n6. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n7. UINT형 변수 count를 선언하세요.\n8. count에 16진수 입력을 받으세요.\n9. PrintHex 함수를 호출하여 count를 인수로 전달하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int void Replace(char* arr, UINT val, UINT index) { switch (val) { case 1: arr[index] = 'q'; break; case 2: arr[index] = 'w'; break; case 3: arr[index] = 'e'; break; case 4: arr[index] = 'r'; break; case 5: arr[index] = 't'; break; case 6: arr[index] = 'y'; break; case 7: arr[index] = 'u'; break; case 8: arr[index] = 'i'; break; case 9: arr[index] = 'o'; break; case 0: arr[index] = 'p'; break; default: break; } } int main() { UINT n; char arr[100] = { 0, }; scanf(\"%u\", &n); UINT divVal = 10; UINT count = 0; do { UINT val = (n % divVal); Replace(arr, val, count); n /= divVal; ++count; } while (n); for (int i = (count - 1); i >= 0; --i) printf(\"%c\", arr[i]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] `void` 반환형 하여 Replace 함수를 정의합니다. (매개변수: char* arr, UINT val, UINT index)\n2. `switch` 문을 이용해 `val`의 값에 따라 조건을 분기합니다.\n3. [cond_start(1)] `val`이 1인지 확인합니다.\n4. `arr[index]`에 'q'를 할당합니다.\n5. [cond_end(1)]\n6. [cond_start(1)] `val`이 2인지 확인합니다.\n7. `arr[index]`에 'w'를 할당합니다.\n8. [cond_end(1)]\n9. [cond_start(1)] `val`이 3인지 확인합니다.\n10. `arr[index]`에 'e'를 할당합니다.\n11. [cond_end(1)]\n12. [cond_start(1)] `val`이 4인지 확인합니다.\n13. `arr[index]`에 'r'을 할당합니다.\n14. [cond_end(1)]\n15. [cond_start(1)] `val`이 5인지 확인합니다.\n16. `arr[index]`에 't'를 할당합니다.\n17. [cond_end(1)]\n18. [cond_start(1)] `val`이 6인지 확인합니다.\n19. `arr[index]`에 'y'를 할당합니다.\n20. [cond_end(1)]\n21. [cond_start(1)] `val`이 7인지 확인합니다.\n22. `arr[index]`에 'u'를 할당합니다.\n23. [cond_end(1)]\n24. [cond_start(1)] `val`이 8인지 확인합니다.\n25. `arr[index]`에 'i'를 할당합니다.\n26. [cond_end(1)]\n27. [cond_start(1)] `val`이 9인지 확인합니다.\n28. `arr[index]`에 'o'를 할당합니다.\n29. [cond_end(1)]\n30. [cond_start(1)] `val`이 0인지 확인합니다.\n31. `arr[index]`에 'p'를 할당합니다.\n32. [cond_end(1)]\n33. [cond_start(1)] 위의 조건들이 모두 충족되지 않는 경우를 처리합니다.\n34. [cond_end(1)]\n35. [func_def_end(1)]\n36. [func_def_start(1)] `int` 반환형 main 함수를 정의합니다. (매개변수 없음)\n37. `UINT`형 변수 n을 선언합니다.\n38. `char` 배열 arr를 100으로 초기화합니다.\n39. `n`에 사용자로부터 입력을 받습니다.\n40. `UINT`형 변수 divVal를 10으로 초기화합니다.\n41. `UINT`형 변수 count를 0으로 초기화합니다.\n42. [rep_start(1)] `do while` 루프를 시작합니다.\n43. `val`에 `n`을 `divVal`로 나눈 나머지를 저장합니다.\n44. Replace 함수를 호출하여 arr 배열의 index에 `val`을 할당합니다.\n45. `n`을 `divVal`로 나누어 업데이트합니다.\n46. `count`를 1 증가시킵니다.\n47. [rep_end(1)]\n48. [rep_start(1)] `for` 루프를 시작하여 count에서 1을 뺀 값부터 0까지 반복합니다.\n49. `arr[i]`를 출력합니다.\n50. [rep_end(1)]\n51. return 0;으로 프로그램을 종료합니다.\n52. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { char s[100]; char w[100]; int len_s = 0; int len_w = 0; int cnt = 0; scanf(\"%s\", s); scanf(\"%s\", w); for (int i = 0; s[i]; i++) { len_s = len_s + 1; } for (int i = 0; w[i]; i++) { len_w = len_w + 1; } for (int i = 0; i < len_s; i++) { int flag = 1; if (w[0] == s[i]) { if (len_w == 1) { cnt++; } else { for (int j = 1; j < len_w; j++) { if (w[j] == s[i + j]) { flag++; } if (flag == len_w) { cnt++; } } } } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 s와 w를 각각 100 크기로 선언하세요.\n3. 정수형 변수 len_s, len_w, cnt를 0으로 초기화하세요.\n4. s에 문자열을 입력받으세요.\n5. w에 문자열을 입력받으세요.\n6. [rep_start(1)] s의 길이를 계산하기 위해 반복하는 for 루프를 작성하세요.\n7. s의 길이를 len_s에 1씩 증가하여 저장하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] w의 길이를 계산하기 위해 반복하는 for 루프를 작성하세요.\n10. w의 길이를 len_w에 1씩 증가하여 저장하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] s의 각 문자를 반복하는 for 루프를 작성하세요.\n13. int형 변수 flag를 1로 초기화하세요.\n14. [cond_start(2)] w의 첫 번째 문자가 s의 현재 문자와 같은지 확인하는 조건문을 작성하세요.\n15. w의 첫 번째 문자가 s의 현재 문자와 같다면 다음을 수행하세요.\n16. [cond_start(3)] w의 길이가 1인지 확인하는 조건문을 작성하세요.\n17. w의 길이가 1이면 cnt를 1 증가시키세요.\n18. [cond_end(3)]\n19. [else_start(3)] w의 길이가 1이 아니라면 다음을 수행하세요.\n20. [rep_start(2)] j를 1부터 len_w-1까지 반복하는 for 루프를 작성하세요.\n21. [cond_start(4)] w의 j번째 문자와 s의 i+j번째 문자가 같은지 확인하는 조건문을 작성하세요.\n22. 두 문자가 같다면 flag를 1 증가시키세요.\n23. [cond_end(4)]\n24. [cond_start(5)] flag가 len_w와 같은지 확인하는 조건문을 작성하세요.\n25. flag가 len_w와 같다면 cnt를 1 증가시키세요.\n26. [cond_end(5)]\n27. [rep_end(2)]\n28. [else_end(3)]\n29. [cond_end(2)]\n30. [rep_end(1)]\n31. cnt의 값을 출력하세요.\n32. return 0;으로 프로그램을 종료하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%u\", &n); int nk[4]; for (int i = 0; i < 4; i++) { int cnt = 0; unsigned int k = (n & 0xFF); for (int j = 0; j < 8; j++) { if (k & 0x01) { cnt++; } k = k >> 1; } n = n >> 8; nk[3 - i] = cnt; } for (int i = 0; i < 4; i++) { printf(\"%d \", nk[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. int형 배열 nk를 크기 4로 선언하세요.\n5. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n6. int형 변수 cnt를 0으로 초기화하세요.\n7. unsigned int형 변수 k를 n의 하위 8비트를 저장하세요.\n8. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(3)] k의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.\n10. k의 최하위 비트가 1이라면 cnt를 증가시키세요.\n11. k를 오른쪽으로 1비트 쉬프트하세요.\n12. [cond_end(3)]\n13. [rep_end(2)]\n14. n의 하위 8비트를 오른쪽으로 8비트 쉬프트하여 n을 업데이트하세요.\n15. nk 배열의 3-i번째 인덱스에 cnt 값을 저장하세요.\n16. [rep_end(1)]\n17. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n18. nk[i]의 값을 출력하세요.\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; scanf(\"%u\", &n); unsigned int cnt = 0; unsigned int k = n; while (1) { if (n == 0) { break; } if (n % 2 == 1) { cnt++; } n = n / 2; } printf(\"%u\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. unsigned int형 변수 cnt를 0으로 초기화하세요.\n5. unsigned int형 변수 k를 n으로 초기화하세요.\n6. [rep_start(1)] 무한 루프를 시작합니다.\n7. [cond_start(2)] n이 0인지 확인하는 조건문을 작성하세요.\n8. n이 0이라면 루프를 종료합니다.\n9. [cond_end(2)]\n10. [cond_start(2)] n이 홀수인지 확인하는 조건문을 작성하세요.\n11. n이 홀수라면 cnt를 1 증가시킵니다.\n12. [cond_end(2)]\n13. n을 2로 나눈 결과로 업데이트합니다.\n14. [rep_end(1)]\n15. cnt를 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned char a[100] = { 0 }; gets(a); for (int i = 0; i < 100; i++) { if (a[i] == '1') { a[i] = 'q'; } if (a[i] == '2') { a[i] = 'w'; } if (a[i] == '3') { a[i] = 'e'; } if (a[i] == '4') { a[i] = 'r'; } if (a[i] == '5') { a[i] = 't'; } if (a[i] == '6') { a[i] = 'y'; } if (a[i] == '7') { a[i] = 'u'; } if (a[i] == '8') { a[i] = 'i'; } if (a[i] == '9') { a[i] = 'o'; } if (a[i] == '0') { a[i] = 'p'; } } printf(\"%s\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned char형 배열 a를 100으로 선언하고 모든 요소를 0으로 초기화하세요.  \n3. gets 함수를 사용하여 사용자로부터 문자열 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.  \n5. [cond_start(2)] 배열 a의 i번째 요소가 '1'인지 확인하는 조건문을 작성하세요.  \n6. a의 i번째 요소가 '1'이라면 해당 요소를 'q'로 변경하세요.  \n7. [cond_end(2)]  \n8. [cond_start(2)] 배열 a의 i번째 요소가 '2'인지 확인하는 조건문을 작성하세요.  \n9. a의 i번째 요소가 '2'라면 해당 요소를 'w'로 변경하세요.  \n10. [cond_end(2)]  \n11. [cond_start(2)] 배열 a의 i번째 요소가 '3'인지 확인하는 조건문을 작성하세요.  \n12. a의 i번째 요소가 '3'이라면 해당 요소를 'e'로 변경하세요.  \n13. [cond_end(2)]  \n14. [cond_start(2)] 배열 a의 i번째 요소가 '4'인지 확인하는 조건문을 작성하세요.  \n15. a의 i번째 요소가 '4'라면 해당 요소를 'r'로 변경하세요.  \n16. [cond_end(2)]  \n17. [cond_start(2)] 배열 a의 i번째 요소가 '5'인지 확인하는 조건문을 작성하세요.  \n18. a의 i번째 요소가 '5'라면 해당 요소를 't'로 변경하세요.  \n19. [cond_end(2)]  \n20. [cond_start(2)] 배열 a의 i번째 요소가 '6'인지 확인하는 조건문을 작성하세요.  \n21. a의 i번째 요소가 '6'라면 해당 요소를 'y'로 변경하세요.  \n22. [cond_end(2)]  \n23. [cond_start(2)] 배열 a의 i번째 요소가 '7'인지 확인하는 조건문을 작성하세요.  \n24. a의 i번째 요소가 '7'이라면 해당 요소를 'u'로 변경하세요.  \n25. [cond_end(2)]  \n26. [cond_start(2)] 배열 a의 i번째 요소가 '8'인지 확인하는 조건문을 작성하세요.  \n27. a의 i번째 요소가 '8'이라면 해당 요소를 'i'로 변경하세요.  \n28. [cond_end(2)]  \n29. [cond_start(2)] 배열 a의 i번째 요소가 '9'인지 확인하는 조건문을 작성하세요.  \n30. a의 i번째 요소가 '9'라면 해당 요소를 'o'로 변경하세요.  \n31. [cond_end(2)]  \n32. [cond_start(2)] 배열 a의 i번째 요소가 '0'인지 확인하는 조건문을 작성하세요.  \n33. a의 i번째 요소가 '0'이라면 해당 요소를 'p'로 변경하세요.  \n34. [cond_end(2)]  \n35. [rep_end(1)]  \n36. a 배열을 출력하세요.  \n37. return 0;으로 프로그램을 종료하세요.  \n38. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char s[101], w[101]; gets(s); gets(w); int cnt1 = 0, cnt2 = 0; while (s[cnt1] != '\\0') { cnt1++; } while (w[cnt2] != '\\0') { cnt2++; } if (cnt1 < cnt2) { printf(\"0\"); return 0; } int flag = 0, cnt3 = 0; for (int i = 0; i <= cnt1 - cnt2; i++) { for (int j = 0; j < cnt2; j++) { if (s[i + j] != w[j]) { flag = 1; break; } } if (!flag) { cnt3++; } flag = 0; } printf(\"%d\", cnt3); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열 s와 w를 저장할 char 배열을 선언하세요. (각각 크기는 101)\n3. s 배열에 입력을 받으세요.\n4. w 배열에 입력을 받으세요.\n5. 소문자 s의 문자 개수를 저장할 정수형 변수 cnt1을 0으로 초기화하세요.\n6. 소문자 w의 문자 개수를 저장할 정수형 변수 cnt2를 0으로 초기화하세요.\n7. [rep_start(1)] s의 문자열 끝까지 반복하는 while 루프를 작성하세요.\n8. 문자열 s의 각 문자를 검사하여 끝에 도달할 때까지 cnt1을 증가시키세요.\n9. [rep_end(1)]\n10. [rep_start(1)] w의 문자열 끝까지 반복하는 while 루프를 작성하세요.\n11. 문자열 w의 각 문자를 검사하여 끝에 도달할 때까지 cnt2를 증가시키세요.\n12. [rep_end(1)]\n13. [cond_start(1)] cnt1이 cnt2보다 작은지를 확인하는 조건문을 작성하세요.\n14. cnt1이 cnt2보다 작다면 0을 출력하세요.\n15. 프로그램을 종료하기 위해 return 0;을 작성하세요.\n16. [cond_end(1)]\n17. 정수형 변수 flag를 0으로 초기화하세요.\n18. 정수형 변수 cnt3를 0으로 초기화하세요.\n19. [rep_start(1)] i를 0부터 cnt1 - cnt2까지 반복하는 for 루프를 작성하세요.\n20. [rep_start(2)] j를 0부터 cnt2까지 반복하는 for 루프를 작성하세요.\n21. [cond_start(3)] s의 i+j번째 문자와 w의 j번째 문자가 다른지를 확인하는 조건문을 작성하세요.\n22. 두 문자가 다르면 flag를 1로 설정하고 반복을 중단하세요.\n23. [cond_end(3)]\n24. [cond_start(2)] flag가 0인지 확인하여 일치하는 경우인지 확인하세요.\n25. 문자열이 일치하면 cnt3을 증가시키세요.\n26. [cond_end(2)]\n27. [rep_end(2)]\n28. flag 변수를 0으로 초기화하세요. \n29. [rep_end(1)]\n30. cnt3의 값을 출력하세요.\n31. return 0;으로 프로그램을 종료하세요.\n32. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a = 0; scanf(\"%X\", &a); for (int i = 0; i < 4; i++) { printf(\"%X \", a & 0xFF); a = a / 256; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 a를 0으로 초기화하세요.  \n3. 16진수 입력을 받기 위해 scanf를 사용하여 a에 값을 저장하세요.  \n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.  \n5. a와 0xFF를 비트 AND 연산하여 결과를 16진수 형태로 출력하세요.  \n6. a를 256으로 나누어 오른쪽으로 이동시키세요.  \n7. [rep_end(1)]  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a = 0; scanf(\"%u\", &a); int cnt = 0; for (int i = 0; i < 32; i++) { if ((a >> i) & 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 대한 사용자 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] a의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n7. i번째 비트가 1이라면 cnt를 1 증가시키세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. cnt의 값을 출력하세요.\n11. 프로그램을 종료하기 위해 return 0;을 작성하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N = 0; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { int A = 0; scanf(\"%d\", &A); for (int j = 7; j >= 0; j--) { int bit = (A >> j) & 1; if (bit == 1) printf(\"-\"); else if (bit == 0) printf(\"_\"); else {} } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. N에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. 정수형 변수 A를 0으로 초기화하세요.\n6. A에 대한 입력을 받으세요.\n7. [rep_start(2)] j를 선언해 7부터 0까지 감소하는 for 루프를 작성하세요.\n8. A의 j번째 비트를 추출하기 위해 bit 변수를 선언하고 A를 오른쪽으로 j비트 이동한 후 1과 AND 연산을 시행하세요.\n9. [cond_start(3)] bit이 1인지 확인하는 조건문을 작성하세요.\n10. bit이 1이라면 \"-\"를 출력하세요.\n11. [cond_end(3)]\n12. [cond_start(3)] bit이 0인지 확인하는 조건문을 작성하세요.\n13. bit이 0이라면 \"_\"를 출력하세요.\n14. [cond_end(3)]\n15. [cond_start(3)] bit이 1도 0도 아닌 경우를 처리하는 조건문을 작성하세요.\n16. 이 경우는 아무 동작도 하지 않습니다.\n17. [cond_end(3)]\n18. [rep_end(2)]\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a = 0; unsigned int b = 0; int min = 0; scanf(\"%u\", &a); scanf(\"%u\", &b); for (int i = 1; i < 10000; i++) { if (i % a == 0 && i % b == 0) { printf(\"%d\", i); break; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a와 b를 0으로 초기화하여 선언하세요.\n3. [cond_start(1)] a의 값을 입력 받기 위한 조건문을 작성하세요.\n4. 첫 번째 unsigned int a의 값을 입력 받으세요.\n5. [cond_end(1)]\n6. [cond_start(1)] b의 값을 입력 받기 위한 조건문을 작성하세요.\n7. 두 번째 unsigned int b의 값을 입력 받으세요.\n8. [cond_end(1)]\n9. [rep_start(1)] i를 1부터 9999까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i가 a와 b의 공배수인지 확인하는 조건문을 작성하세요.\n11. i가 a와 b로 나누어 떨어지면 i를 출력하세요.\n12. 첫 번째 공배수를 찾았으면 루프를 종료합니다.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { unsigned int n; int count = 0; scanf(\"%u\", &n); while (1) { if (n == 0) { break; } if (n % 2 == 0) { n /= 2; } else { n /= 2; count++; } } printf(\"%d\", count); return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. 소수를 세기 위한 int형 변수 count를 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] 무한 루프를 시작하세요.\n6. [cond_start(2)] n이 0인지 확인하는 조건문을 작성하세요.\n7. n이 0이라면 루프를 종료하세요.\n8. [cond_end(2)]\n9. [cond_start(2)] n이 짝수인지 확인하는 조건문을 작성하세요.\n10. n이 짝수라면 n을 2로 나누세요.\n11. [cond_end(2)]\n12. [cond_start(2)] n이 홀수인 경우를 처리하는 조건문을 작성하세요.\n13. n이 홀수라면 n을 2로 나누고 count를 증가시키세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. count의 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int n; char s[11][9]; scanf(\"%d \", &n); for (int i = 0; i < n; i++) { for (int j = 0; j < 8; j++) { scanf(\"%c\", &s[i][j]); } } for (int i = 0; i < n; i++) { int x = 0; int sum = 128; for (int j = 0; j < 8; j++) { if (s[i][j] == '-') { x = sum + x; } sum = sum / 2; } printf(\"%d \", x); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 2차원 문자 배열 s를 n개의 행과 9개의 열로 선언하세요.\n4. 사용자로부터 정수 n을 입력받으세요.\n5. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.\n7. 사용자로부터 1개의 문자를 입력받아 s[i][j]에 저장하세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. 정수형 변수 x를 0으로 초기화하세요.\n12. 정수형 변수 sum을 128로 초기화하세요.\n13. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.\n14. [cond_start(2)] s[i][j]가 '-'인지 확인하는 조건문을 작성하세요.\n15. 만약 s[i][j]가 '-'라면, sum 값을 x에 더하세요.\n16. sum을 2로 나누세요.\n17. [cond_end(2)]\n18. [rep_end(2)]\n19. x 값을 출력하세요.\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x[32] = { 0 }; unsigned int y[32] = { 0 }; unsigned int a = 1; for (int i = 0; i < 32; i++) { scanf(\"%1d\", &x[i]); if (x[i] == 1) { a = 0; } } for (int i = 0; i < 32; i++) { if (x[i] == 0) { y[i] = 1; } if (x[i] == 1) { y[i] = 0; } } for (int i = 0; i < 32; i++) { printf(\"%d\", y[i]); } printf(\"\\n\"); printf(\"%d\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 x를 32개의 요소로 초기화하세요. (모두 0으로 초기화)\n3. unsigned int형 배열 y를 32개의 요소로 초기화하세요. (모두 0으로 초기화)\n4. unsigned int형 변수 a를 1로 초기화하세요.\n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. 배열 x의 각 요소에 1자리 정수를 입력받아 저장하세요.\n7. [cond_start(2)] 입력받은 값이 1인지 확인하는 조건문을 작성하세요.\n8. x의 요소가 1이라면 a를 0으로 설정하세요.\n9. [cond_end(2)]\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] x의 요소가 0인지 확인하는 조건문을 작성하세요.\n13. x의 요소가 0이라면 y의 해당 요소를 1로 설정하세요.\n14. [cond_end(2)]\n15. [cond_start(2)] x의 요소가 1인지 확인하는 조건문을 작성하세요.\n16. x의 요소가 1이라면 y의 해당 요소를 0으로 설정하세요.\n17. [cond_end(2)]\n18. [rep_end(1)]\n19. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n20. y의 각 요소를 출력하세요.\n21. [rep_end(1)]\n22. 개행 문자를 출력하세요.\n23. a의 값을 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x; unsigned int y=0; scanf(\"%d\", &x); for (int i = 0; i < 32; i++) { if (x % 2 == 1) { y = y + 1; } x = x / 2; } printf(\"%d\", y); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 x를 선언하세요.  \n3. unsigned int형 변수 y를 0으로 초기화하세요.  \n4. x에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.  \n6. [cond_start(2)] x가 2로 나누었을 때 나머지가 1인지 확인하는 조건문을 작성하세요.  \n7. x가 홀수일 경우 y에 1을 더하세요.  \n8. [cond_end(2)]  \n9. x를 2로 나누어 업데이트하세요.  \n10. [rep_end(1)]  \n11. y의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int UINT BitMultiple(UINT count) { UINT val = 1; for (UINT i = 0; i < count; i++) val *= 2; return val; } UINT BTOI(char* arr) { UINT val = 0; for (UINT i = 0; i < 32; i++) { if (arr[i] == '1') val += BitMultiple(i); } return val; } void PrintAND(char* a, char* b) { for (int i = 0; i < 32; i++) { if (a[i] == '1' && b[i] == '1') printf(\"1\"); else printf(\"0\"); } printf(\"\\n\"); } void PrintOR(char* a, char* b) { for (int i = 0; i < 32; i++) { if (a[i] == '1' || b[i] == '1') printf(\"1\"); else printf(\"0\"); } printf(\"\\n\"); } void PrintXOR(char* a, char* b) { for (int i = 0; i < 32; i++) { if (a[i] == b[i]) printf(\"0\"); else printf(\"1\"); } printf(\"\\n\"); } int main() { char a[33], b[33]; UINT a1, b1; gets(a); gets(b); PrintAND(a, b); PrintOR(a, b); PrintXOR(a, b); a1 = BTOI(a); b1 = BTOI(b); printf(\"%d\\n\", (a1 && b1)); printf(\"%d\", (a1 || b1)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 BitMultiple 함수를 정의하세요. (매개변수: UINT count)\n2. UINT형 변수 val을 1로 초기화하세요.\n3. [rep_start(1)] i를 선언하여 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n4. val에 2의 i 제곱을 곱하세요.\n5. [rep_end(1)]\n6. val 값을 반환하세요.\n7. [func_def_end(1)]\n8. [func_def_start(1)] UINT 반환형 BTOI 함수를 정의하세요. (매개변수: char* arr)\n9. UINT형 변수 val을 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 '1'인지 확인하는 조건문을 작성하세요.\n12. arr[i]가 '1'이면 val에 2의 i 제곱을 더하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. val 값을 반환하세요.\n16. [func_def_end(1)]\n17. [func_def_start(1)] void 반환형 PrintAND 함수를 정의하세요. (매개변수: char* a, char* b)\n18. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] a[i]와 b[i]가 모두 '1'인지 확인하는 조건문을 작성하세요.\n20. a[i]와 b[i]가 모두 '1'이라면 \"1\"을 출력하세요.\n21. 그렇지 않으면 \"0\"을 출력하세요.\n22. [cond_end(2)]\n23. [rep_end(1)]\n24. 줄을 바꾸세요.\n25. [func_def_end(1)]\n26. [func_def_start(1)] void 반환형 PrintOR 함수를 정의하세요. (매개변수: char* a, char* b)\n27. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n28. [cond_start(2)] a[i]와 b[i] 중 하나라도 '1'인지 확인하는 조건문을 작성하세요.\n29. a[i]나 b[i]가 '1'이라면 \"1\"을 출력하세요.\n30. 그렇지 않으면 \"0\"을 출력하세요.\n31. [cond_end(2)]\n32. [rep_end(1)]\n33. 줄을 바꾸세요.\n34. [func_def_end(1)]\n35. [func_def_start(1)] void 반환형 PrintXOR 함수를 정의하세요. (매개변수: char* a, char* b)\n36. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n37. [cond_start(2)] a[i]와 b[i]가 동일한지 확인하는 조건문을 작성하세요.\n38. a[i]와 b[i]가 동일하다면 \"0\"을 출력하세요.\n39. 그렇지 않으면 \"1\"을 출력하세요.\n40. [cond_end(2)]\n41. [rep_end(1)]\n42. 줄을 바꾸세요.\n43. [func_def_end(1)]\n44. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n45. char형 배열 a와 b를 선언하세요. (크기: 33)\n46. UINT형 변수 a1과 b1을 선언하세요.\n47. a와 b에 문자열을 입력받으세요.\n48. PrintAND 함수를 호출하여 a와 b를 출력하세요.\n49. PrintOR 함수를 호출하여 a와 b를 출력하세요.\n50. PrintXOR 함수를 호출하여 a와 b를 출력하세요.\n51. a1에 BTOI 함수를 호출하여 a를 변환한 값을 저장하세요.\n52. b1에 BTOI 함수를 호출하여 b를 변환한 값을 저장하세요.\n53. (a1과 b1 모두 true인 경우) \"1\"을 출력하세요.\n54. (a1이나 b1 중 하나라도 true인 경우) \"1\"을 출력하세요.\n55. return 0으로 프로그램을 종료하세요.\n56. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x; unsigned int a[10] = { 0 }; unsigned int b[8] = { 0 }; scanf(\"%d\", &x); for (int i = 0; i < x; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < x; i++) { for (int k = 0; k < 8; k++) { b[7 - k] = a[i] % 2; a[i] = a[i] / 2; } for (int k = 0; k < 8; k++) { if (b[k] == 0) { printf(\"_\"); } if (b[k] == 1) { printf(\"-\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 부호 없는 정수형 변수 x를 선언하세요.\n3. 부호 없는 정수형 배열 a의 크기를 10으로 정하여 0으로 초기화하세요.\n4. 부호 없는 정수형 배열 b의 크기를 8로 정하여 0으로 초기화하세요.\n5. x에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 요소에 정수값을 입력받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 x-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] k를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. 배열 b의 7 - k 번째 위치에 a[i]를 2로 나눈 나머지를 저장하세요.\n12. a[i]를 2로 나눈 값을 다시 a[i]에 저장하세요.\n13. [rep_end(2)]\n14. [rep_start(2)] k를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(3)] 배열 b의 k번째 요소가 0인지 확인하는 조건문을 작성하세요.\n16. b의 k번째 요소가 0이라면 '_'를 출력하세요.\n17. [cond_end(3)]\n18. [cond_start(3)] 배열 b의 k번째 요소가 1인지 확인하는 조건문을 작성하세요.\n19. b의 k번째 요소가 1이라면 '-'를 출력하세요.\n20. [cond_end(3)]\n21. [rep_end(2)]\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main() { char str[100]; char findStr[100]; gets(str); gets(findStr); UINT idx = 0; UINT count = 0; while (str[idx] != '\\0') { if (str[idx] == findStr[0]) { UINT index = 0; UINT sIdx = idx; while (findStr[index] != '\\0') { if (str[sIdx] != findStr[index]) break; else if (str[sIdx] == '\\0') break; ++index; ++sIdx; } if (findStr[index] == '\\0') ++count; } ++idx; } printf(\"%u\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n2. 문자 배열 str[100]를 선언하여 입력 문자열을 저장할 공간을 할당하세요.\n3. 문자 배열 findStr[100]을 선언하여 찾고자 하는 문자열을 저장할 공간을 할당하세요.\n4. str 배열에 입력된 문자열을 받기 위해 gets 함수를 사용하세요.\n5. findStr 배열에 찾고자 하는 문자열을 받기 위해 gets 함수를 사용하세요.\n6. UINT 타입의 변수 idx를 0으로 초기화하여 문자열을 순회하는 인덱스로 사용하세요.\n7. UINT 타입의 변수 count를 0으로 초기화하여 찾은 문자열의 개수를 저장할 변수로 사용하세요.\n8. [rep_start(1)] idx가 문자열의 끝이 아닐 동안 반복하는 while 루프를 시작하세요.\n9. [cond_start(2)] 현재 위치의 문자열과 찾고자 하는 문자열의 첫 글자가 같은지 확인하는 조건문을 작성하세요.\n10. 만약 두 글자가 같다면, UINT 타입의 변수 index를 0으로 초기화하여 찾을 문자열의 인덱스를 설정하세요.\n11. UINT 타입의 변수 sIdx를 idx로 초기화하여 str의 현재 인덱스를 설정하세요.\n12. [rep_start(2)] index로 findStr의 끝까지 반복하는 while 루프를 시작하세요.\n13. [cond_start(3)] findStr의 현재 위치의 문자와 str의 sIdx 위치의 문자가 같은지 확인하는 조건문을 작성하세요.\n14. 두 문자가 다르면, 루프를 중단하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] sIdx가 문자열의 끝에 도달했는지를 확인하는 조건문을 작성하세요.\n17. sIdx가 문자열의 끝이라면, count를 증가시키세요.\n18. [cond_end(3)]\n19. [rep_end(2)]\n20. [cond_end(2)]\n21. idx를 증가시켜 다음 문자로 진행하세요.\n22. [rep_end(1)]\n23. count의 값을 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { unsigned char bit[32]; int count = 0; for (int i = 0; i < 32; i++) { scanf(\"%c\", &bit[i]); } for (int i = 0; i < 32; i++) { if (bit[i] == '1') { bit[i] = '0'; count++; } else if (bit[i] == '0') { bit[i] = '1'; } } for (int i = 0; i < 32; i++) { printf(\"%c\", bit[i]); } printf(\"\\n\"); if (count > 0) { printf(\"0\"); } else { printf(\"1\"); } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char 배열 bit를 선언하여 크기 32로 초기화하세요.\n3. int형 변수 count를 0으로 초기화하세요.\n4. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. scanf 함수를 이용하여 bit 배열의 각 요소에 문자를 입력받으세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] bit[i]가 '1'인지 확인하는 조건문을 작성하세요.\n9. bit[i]가 '1'이라면 bit[i]를 '0'으로 변경하고 count를 1 증가하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] bit[i]가 '0'인지 확인하는 조건문을 작성하세요.\n12. bit[i]가 '0'이라면 bit[i]를 '1'으로 변경하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n16. printf 함수를 이용하여 bit 배열의 각 요소를 출력하세요.\n17. [rep_end(1)]\n18. printf로 개행 문자를 출력하세요.\n19. [cond_start(1)] count가 0보다 큰지 확인하는 조건문을 작성하세요.\n20. count가 0보다 크면 \"0\"을 출력하세요.\n21. [cond_end(1)]\n22. [cond_start(1)] count가 0보다 크지 않은 경우를 처리하는 조건문을 작성하세요.\n23. \"1\"을 출력하세요.\n24. [cond_end(1)]\n25. return 0;으로 프로그램을 종료하세요.\n26. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x; scanf(\"%X\", &x); for (int i = 0; i < 4; i++) { printf(\"%X \", x & 0xFF); x = x / 256; } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 x를 선언하세요.\n3. x에 16진수 입력을 받아 저장하세요.\n4. [rep_start(1)] 4번 반복하는 for 루프를 작성하세요.\n5. x의 하위 8비트를 16진수로 출력하세요.\n6. x를 256으로 나누어 오른쪽으로 쉬프트하세요.\n7. [rep_end(1)]\n8. 프로그램의 끝을 나타내기 위해 return 0;을 작성하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int UINT BitMultiple(UINT count) { UINT val = 1; for (UINT i = 0; i < count; i++) val *= 2; return val; } UINT Decode(char* arr) { UINT val = 0; for (UINT i = 0; i < 8; i++) if (arr[i] == '-') val += BitMultiple(7 - i); return val; } int main() { UINT count; char val[10][8]; char trash; scanf(\"%u\", &count); scanf(\"%c\", &trash); for (UINT i = 0; i < count; i++) for (UINT j = 0; j < 8; j++) scanf(\"%c\", &val[i][j]); for (UINT i = 0; i < count; i++) printf(\"%u \", Decode(val[i])); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] UINT 반환형 BitMultiple 함수를 정의하세요. (매개변수: UINT count)\n2. UINT형 변수 val을 1로 초기화하세요.\n3. [rep_start(1)] i를 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n4. val에 2를 곱하여 업데이트하세요.\n5. [rep_end(1)]\n6. 계산된 val을 반환하세요.\n7. [func_def_end(1)]\n\n8. [func_def_start(1)] UINT 반환형 Decode 함수를 정의하세요. (매개변수: char* arr)\n9. UINT형 변수 val을 0으로 초기화하세요.\n10. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 '-'인지 확인하는 조건문을 작성하세요.\n12. '-'이면 BitMultiple(7 - i)의 값을 val에 더하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 최종적으로 계산된 val을 반환하세요.\n16. [func_def_end(1)]\n\n17. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n18. UINT형 변수 count를 선언하세요.\n19. char형 2차원 배열 val[10][8]을 선언하세요.\n20. char형 변수 trash를 선언하세요.\n21. count 값을 사용자로부터 입력받으세요.\n22. trash를 소비하기 위해서 한 개의 문자를 입력받으세요.\n23. [rep_start(1)] i를 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n24. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.\n25. val[i][j]에 사용자의 입력값을 저장하세요.\n26. [rep_end(2)]\n27. [rep_end(1)]\n28. [rep_start(1)] i를 0부터 count-1까지 반복하는 for 루프를 작성하세요.\n29. Decode(val[i])의 결과를 출력하세요.\n30. [rep_end(1)]\n31. 프로그램을 종료하기 위해 return 0;을 작성하세요.\n32. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x, y, min, res; unsigned int max = 1; scanf(\"%d %d\", &x, &y); if (x > y) { min = y; } if (x < y) { min = x; } for (int i = 2; i <= min; i++) { if (x % i == 0 && y % i == 0) { max = i; } } res = max * (x / max) * (y / max); printf(\"%d\", res); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 x, y, min, res를 선언하세요.\n3. unsigned int형 변수 max를 1로 초기화하세요.\n4. x와 y에 대한 입력을 받으세요.\n5. [cond_start(1)] x가 y보다 큰지 확인하는 조건문을 작성하세요.\n6. x가 y보다 크면 min에 y를 대입하세요.\n7. [cond_end(1)]\n8. [cond_start(1)] x가 y보다 작은지 확인하는 조건문을 작성하세요.\n9. x가 y보다 작으면 min에 x를 대입하세요.\n10. [cond_end(1)]\n11. [rep_start(1)] i를 2부터 min까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] x와 y가 i로 나누어 떨어지는지 확인하는 조건문을 작성하세요.\n13. x와 y가 i로 나누어 떨어지면 max에 i를 대입하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. res에 max, x를 max로 나눈 값, y를 max로 나눈 값의 곱을 대입하세요.\n17. res를 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int void CountBit(UINT val, UINT sIdx) { UINT count = 0; for (UINT i = 0; i < 8; ++i) if ((val >> (8 * sIdx) + i) & 0b01) ++count; printf(\"%d \", count); } int main() { UINT val; scanf(\"%u\", &val); for (int i = 3; i >= 0; --i) CountBit(val, i); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] `CountBit`라는 함수 정의 (매개변수: UINT val, UINT sIdx).\n2. 함수 내부에서 비트를 세기 위한 UINT형 변수 count를 0으로 초기화합니다.\n3. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 시작합니다.\n4. [cond_start(2)] val의 특정 비트가 1인지 확인하는 조건문을 작성합니다.\n5. 해당 비트가 1이라면 count를 1 증가시킵니다.\n6. [cond_end(2)]\n7. [rep_end(1)]\n8. count의 값을 출력합니다.\n9. [func_def_end(1)]\n10. [func_def_start(1)] `main` 함수 정의 (매개변수 없음).\n11. UINT형 변수 val을 선언합니다.\n12. val에 사용자 입력을 받습니다.\n13. [rep_start(1)] i를 3부터 0까지 역순으로 반복하는 for 루프를 시작합니다.\n14. `CountBit` 함수를 호출하면서 val과 i를 인자로 전달합니다.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료합니다.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N = 0; scanf(\"%u\", &N); int cnt = 0; for (int i = 31; i >= 0; i--) { int bit = (N >> i) & 1; if (bit == 1) { cnt++; } if (i % 8 == 0) { printf(\"%d \", cnt); cnt = 0; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하세요.\n5. [rep_start(1)] i를 31부터 0까지 반복하는 for 루프를 작성하세요.\n6. int형 변수 bit를 선언하여 N을 i 비트 오른쪽으로 이동한 후, 1과 AND 비트 연산을 수행하여 값을 얻으세요.\n7. [cond_start(2)] bit가 1인지 확인하는 조건문을 작성하세요.\n8. bit가 1이면 cnt를 1 증가시키세요.\n9. [cond_end(2)]\n10. [cond_start(2)] i가 8로 나누어 떨어지는지 확인하는 조건문을 작성하세요.\n11. i가 8로 나누어 떨어지면 현재 cnt 값을 출력하고, cnt를 0으로 초기화하세요.\n12. [cond_end(2)]\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; int cnt = 0; scanf(\"%u\", &n); for (int i = 0; n>=1; i++) { if (n & 1) { cnt++; n = n >> 1; } else { n = n >> 1; } } printf(\"%d\", cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. 정수형 변수 cnt를 0으로 초기화하세요.  \n4. n에 대한 입력을 받으세요.  \n5. [rep_start(1)] i를 0으로 초기화하고 n이 1 이상인 동안 반복하는 for 루프를 작성하세요.  \n6. [cond_start(2)] n의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.  \n7. n의 최하위 비트가 1이라면 cnt를 증가시키세요.  \n8. n을 오른쪽으로 1비트 시프트하세요.  \n9. [cond_end(2)]  \n10. [cond_start(2)] n의 최하위 비트가 0인 경우의 조건문을 작성하세요.  \n11. n을 오른쪽으로 1비트 시프트하세요.  \n12. [cond_end(2)]  \n13. [rep_end(1)]  \n14. cnt의 값을 출력하세요.  \n15. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char ary[33]; gets(ary); char ary2[11] = \"qwertyuiop\"; for (int i = 0; ary[i] != 0; i++) { if (ary[i] - '0' == 0) { printf(\"p\"); }else printf(\"%c\", ary2[(ary[i] - '0')-1]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 배열 ary를 선언하고 33개의 문자를 저장할 수 있도록 합니다.  \n3. 사용자로부터 입력을 받아 ary에 저장합니다.  \n4. 문자열 ary2를 선언하고 \"qwertyuiop\" 값을 초기화합니다.  \n5. [rep_start(1)] i를 선언해 ary의 각 문자를 반복하는 for 루프를 작성하세요.  \n6. ary[i]가 널(0)이 아닐 때까지 반복합니다.  \n7. [cond_start(2)] ary[i] 문자의 ASCII 값에서 '0'을 빼서 0인지 확인하는 조건문을 작성하세요.  \n8. ary[i]가 '0'이라면 \"p\"를 출력하세요.  \n9. [cond_end(2)]  \n10. 그렇지 않으면, ary[i]에서 '0'을 뺀 값에 1을 감소시켜 ary2의 인덱스를 얻어 원래 문자를 출력하세요.  \n11. [rep_end(1)]  \n12. 프로그램이 정상적으로 종료됩니다.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a = 0; char b[33]; scanf(\"%s\", b); for (int c = 0; c < 32; c++) { a = a * 2 + (b[c] - '0'); } unsigned int d = ~a; for (int c = 31; c >= 0; c--) { printf(\"%d\", (d >> c) & 1); } printf(\"\\n\"); printf(\"%d\\n\", !a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 a를 0으로 초기화하세요.  \n3. char형 배열 b를 선언하여 33개의 문자를 저장할 수 있게 하세요.  \n4. b에 문자열을 입력 받기 위해 scanf 함수를 사용하세요.  \n5. [rep_start(1)] c를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n6. a에 b 배열의 각 문자(num의 ASCII 값에서 '0'을 빼서 정수로 변환하여)를 이진수로 변환하여 더하세요.  \n7. [rep_end(1)]  \n8. unsigned int형 변수 d를 선언하고 a를 비트 반전하여 초기화하세요.  \n9. [rep_start(2)] c를 선언해 31부터 0까지 반복하는 for 루프를 작성하세요.  \n10. d를 오른쪽으로 c만큼 이동시키고 1과 AND 연산하여 각 비트 값을 출력하세요.  \n11. [rep_end(2)]  \n12. 개행 문자 출력하세요.  \n13. a가 0이 아닌지를 체크하여 0이 아니면 0이 아닌 값을 출력하세요 (즉, a가 0이면 1 출력).  \n14. 개행 문자 출력하세요.  \n15. return 0;으로 프로그램을 종료하세요.  \n16. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n, a; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a); for (int j = 7; j >= 0; j--) { if ((a >> j) & 1) { printf(\"-\"); } else { printf(\"_\"); } } } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n과 a를 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n5. a에 대한 입력을 받으세요.\n6. [rep_start(2)] j를 선언해 7부터 0까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(3)] a의 j번째 비트가 1인지 확인하는 조건문을 작성하세요.\n8. j번째 비트가 1이라면 \"-\"를 출력하세요.\n9. [cond_end(3)]\n10. j번째 비트가 1이 아니라면 \"_\"를 출력하세요.\n11. [rep_end(2)]\n12. [rep_end(1)]\n13. 줄 바꿈을 출력하세요.\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a, b, t, gcd, lcm; scanf(\"%d %d\", &a, &b); int x = a, y = b; while (y != 0) { t = y; y = x % y; x = t; } gcd = x; lcm = (a * b) / gcd; printf(\"%d\\n\", lcm); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a, b, t, gcd, lcm을 선언하세요.\n3. a와 b에 입력을 받으세요.\n4. int형 변수 x와 y를 각각 a와 b로 초기화하세요.\n5. [rep_start(1)] y가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n6. y의 값을 t에 저장하세요.\n7. y를 x를 y로 나눈 나머지로 업데이트하세요.\n8. x를 t로 업데이트하세요.\n9. [rep_end(1)]\n10. euc. 알고리즘을 이용하여 계산한 gcd를 x로 설정하세요.\n11. lcm을 (a * b) / gcd로 계산하세요.\n12. lcm 값을 출력하세요.\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a = 0, b = 0; char input1[33], input2[33]; scanf(\"%s %s\", input1, input2); for (int i = 0; i < 32; i++) { a = a * 2 + (input1[i] - '0'); b = b * 2 + (input2[i] - '0'); } unsigned int and_result = a & b; unsigned int or_result = a | b; unsigned int xor_result = a ^ b; for (int i = 31; i >= 0; i--) { printf(\"%d\", (and_result >> i) & 1); } printf(\"\\n\"); for (int i = 31; i >= 0; i--) { printf(\"%d\", (or_result >> i) & 1); } printf(\"\\n\"); for (int i = 31; i >= 0; i--) { printf(\"%d\", (xor_result >> i) & 1); } printf(\"\\n\"); printf(\"%d\\n\", (a != 0) && (b != 0)); printf(\"%d\\n\", (a != 0) || (b != 0)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a와 b를 0으로 초기화하여 선언하세요.\n3. char형 배열 input1과 input2를 각각 33개의 요소로 선언하세요.\n4. 두 개의 문자열 input1과 input2를 입력받으세요.\n5. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. input1의 각 문자를 0 또는 1로 변환하여 a에 이진수로 저장하세요.\n7. input2의 각 문자를 0 또는 1로 변환하여 b에 이진수로 저장하세요.\n8. [rep_end(1)]\n9. unsigned int형 변수 and_result를 a와 b의 비트 AND 연산 결과로 초기화하세요.\n10. unsigned int형 변수 or_result를 a와 b의 비트 OR 연산 결과로 초기화하세요.\n11. unsigned int형 변수 xor_result를 a와 b의 비트 XOR 연산 결과로 초기화하세요.\n12. [rep_start(1)] i를 선언해 31부터 0까지 반복하는 for 루프를 작성하세요.\n13. and_result의 각 비트를 출력하세요.\n14. [rep_end(1)]\n15. 새 줄을 출력하세요.\n16. [rep_start(1)] i를 선언해 31부터 0까지 반복하는 for 루프를 작성하세요.\n17. or_result의 각 비트를 출력하세요.\n18. [rep_end(1)]\n19. 새 줄을 출력하세요.\n20. [rep_start(1)] i를 선언해 31부터 0까지 반복하는 for 루프를 작성하세요.\n21. xor_result의 각 비트를 출력하세요.\n22. [rep_end(1)]\n23. 새 줄을 출력하세요.\n24. a와 b가 0이 아닌지를 확인하여 결과를 출력하세요.\n25. a 또는 b가 0이 아닌지를 확인하여 결과를 출력하세요.\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n = 0; scanf(\"%u\", &n); int sum = 0; for (int i = 0; i < 64; i++) { sum += (n & 1); n >>= 1; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 0으로 초기화하여 선언하세요.\n3. n에 대한 사용자 입력을 받으세요.\n4. int형 변수 sum을 0으로 초기화하여 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 63까지 반복하는 for 루프를 작성하세요.\n6. sum에 n의 최하위 비트를 더하세요.\n7. n을 오른쪽으로 1비트 시프트하여 비트를 한 자리 이동합니다.\n8. [rep_end(1)]\n9. sum의 값을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char A[1001], B[1001]; int count = 0, lenA = 0, lenB = 0; scanf(\"%s %s\", A, B); while (A[lenA] != '\\0') { lenA++; } while (B[lenB] != '\\0') { lenB++; } for (int i = 0; i <= lenA - lenB; i++) { int match = 1; for (int j = 0; j < lenB; j++) { if (A[i + j] != B[j]) { match = 0; break; } } if (match) { count++; } } printf(\"%d\\n\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자열 A와 B를 저장할 char 배열을 각각 1001 크기로 선언하세요.\n3. int형 변수 count를 0으로 초기화하여 일치하는 부분 문자열의 개수를 세도록 하세요.\n4. int형 변수 lenA와 lenB를 각각 0으로 초기화하여 문자열의 길이를 저장할 준비를 하세요.\n5. A와 B에 문자열을 입력받으세요.\n6. [rep_start(1)] A 문자열의 길이를 계산하기 위한 반복문을 작성하세요.\n7. A의 문자 끝에 도달할 때까지 lenA를 증가시키세요.\n8. [rep_end(1)]\n9. [rep_start(1)] B 문자열의 길이를 계산하기 위한 반복문을 작성하세요.\n10. B의 문자 끝에 도달할 때까지 lenB를 증가시키세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 A에서 B의 길이만큼 반복하는 for 루프를 작성하세요.\n13. 일치 여부를 나타내기 위한 int형 변수 match를 1로 초기화하세요.\n14. [rep_start(2)] j를 선언해 B의 길이만큼 반복하는 for 루프를 작성하세요.\n15. [cond_start(2)] A의 현재 위치와 B의 현재 문자가 같은지 확인하는 조건문을 작성하세요.\n16. 같지 않다면 match를 0으로 설정하고 루프를 종료하세요.\n17. [cond_end(2)]\n18. [rep_end(2)]\n19. [cond_start(1)] match가 참인지 확인하는 조건문을 작성하세요.\n20. match가 참이라면 count를 1 증가시키세요.\n21. [cond_end(1)]\n22. [rep_end(1)]\n23. A 문자열 내에서 B 문자열의 부분 일치 수인 count를 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); char s[8 * n + 1]; scanf(\"%s\", s); for (int i = 0; i < n; i++) { unsigned int b = 0; for (int j = 0; j < 8; j++) { if (s[i * 8 + j] == '-') { b = (b << 1) | 1; } else { b = (b << 1) | 0; } } if (i > 0) { printf(\" \"); } printf(\"%u\", b); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. char형 배열 s를 선언하여 크기를 8 * n + 1로 설정하세요.\n5. 문자 배열 s에 문자열을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. unsigned int형 변수 b를 0으로 초기화하세요.\n8. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(3)] s 배열의 i * 8 + j 번째 문자가 '-'인지 확인하는 조건문을 작성하세요.\n10. s[i * 8 + j]가 '-'라면, b의 값을 왼쪽으로 1비트 시프트하고 1을 OR 연산하세요.\n11. [cond_end(3)]\n12. [cond_start(3)] s 배열의 i * 8 + j 번째 문자가 '-'가 아닌지 확인하는 조건문을 작성하세요.\n13. '-'가 아니면, b의 값을 왼쪽으로 1비트 시프트하고 0을 OR 연산하세요.\n14. [cond_end(3)]\n15. [rep_end(2)]\n16. [cond_start(2)] i가 0보다 큰지 확인하는 조건문을 작성하세요.\n17. i가 0보다 크면, 공백을 출력하세요.\n18. [cond_end(2)]\n19. b를 출력하세요.\n20. [rep_end(1)]\n21. 줄 바꿈을 출력하세요.\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char A[32], not = 1; for(int i = 0; i < 32; i++) { scanf(\"%c\", &A[i]); } for(int i = 0; i < 32; i++) { if(A[i] == '0') { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); for(int i = 0; i < 32; i++) { if(A[i] == '1') { not = 0; break; } } printf(\"%u\", not); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 문자형 배열 A를 크기 32로 선언하세요.\n3. not 변수를 1로 초기화하여 변수를 선언하세요.\n4. [rep_start(1)] i를 초기화하여 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. A 배열의 각 인덱스에 대해 문자 입력을 받으세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 초기화하여 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A 배열의 현재 인덱스의 값이 '0'인지 확인하는 조건문을 작성하세요.\n9. A[i]가 '0'이라면 '1'을 출력하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A[i]가 '0'이 아닐 경우의 조건을 작성하세요.\n12. '0'이 아닐 경우 '0'을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 새로운 줄을 출력하세요.\n16. [rep_start(1)] i를 초기화하여 0부터 31까지 반복하는 for 루프를 작성하세요.\n17. [cond_start(2)] A 배열의 현재 인덱스의 값이 '1'인지 확인하는 조건문을 작성하세요.\n18. A[i]가 '1'이라면 not 값을 0으로 설정하고 루프를 종료하세요.\n19. [cond_end(2)]\n20. [rep_end(1)]\n21. not 값을 unsigned 정수형으로 출력하세요.\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int c(unsigned int b) { int x = 0; while (b) { x += b & 1; b >>= 1; } return x; } int main() { unsigned int n; scanf(\"%u\", &n); for (int i = 3; i >= 0; i--) { unsigned int b = (n >> (i * 8)) & 0xFF; if (i < 3) { printf(\" \"); } printf(\"%d\", c(b)); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 c 함수를 정의하세요. (매개변수: unsigned int b)\n2. 정수형 변수 x를 0으로 초기화하세요.\n3. [rep_start(1)] b가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n4. x에 b의 최소 비트(가장 오른쪽 비트) 값을 추가하세요.\n5. b를 오른쪽으로 1비트 시프트하여 다음 비트를 준비하세요.\n6. [rep_end(1)]\n7. b를 소수로 전환한 1의 개수를 반환하세요.\n8. [func_def_end(1)]\n9. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n10. unsigned int형 변수 n을 선언하세요.\n11. n에 사용자의 입력을 받으세요.\n12. [rep_start(1)] i를 3부터 0까지 반복하는 for 루프를 작성하세요.\n13. unsigned int형 변수 b를 n에서 i를 비트 이동시켜 8비트를 가져오는 값으로 초기화하세요.\n14. [cond_start(2)] i가 3보다 작은지 확인하는 조건문을 작성하세요.\n15. i가 3보다 작다면 출력 시 공백을 추가하세요.\n16. [cond_end(2)]\n17. b의 1의 개수를 c 함수를 통해 계산하고 출력하세요.\n18. [rep_end(1)]\n19. 새로운 줄을 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int num; int count = 0; scanf(\"%u\", &num); while (num) { count += num & 1; num >>= 1; } printf(\"%d\\n\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 num을 선언하세요.\n3. int형 변수 count를 0으로 초기화하세요.\n4. num에 대한 입력을 받으세요.\n5. [rep_start(1)] num이 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n6. count에 num의 최하위 비트(일의 자리)를 더하세요.\n7. num을 오른쪽으로 1비트 시프트하세요.\n8. [rep_end(1)]\n9. count의 값을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); unsigned int A[N], check = 128; for(int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } for(int i = 0; i < N; i++) { for(int j = 0; j < 8; j++) { if((A[i] & check) == check) { printf(\"-\"); } else { printf(\"_\"); } check = check >> 1; } check = 128; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N의 값을 입력받으세요.  \n4. unsigned int형 배열 A[N]을 선언하고, check 변수를 128로 초기화하세요.  \n5. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n6. i번째 배열 A의 요소에 대한 값을 입력받으세요.  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(3)] A[i]와 check의 비트 AND 연산 결과가 check와 같은지 확인하는 조건문을 작성하세요.  \n11. A[i]의 해당 비트가 1이라면 \"-\"를 출력하세요.  \n12. [cond_end(3)]  \n13. [cond_start(3)] A[i]의 해당 비트가 0이라면 \"_\"를 출력하세요.  \n14. [cond_end(3)]  \n15. check를 1비트 오른쪽으로 이동시키세요.  \n16. [rep_end(2)]  \n17. check 변수를 128로 초기화하세요.  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { int n; int a; int arr[10]; int idx = 0; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a); arr[i] = a; } for (int i = 0; i < n; i++) { for (int j = 7; j >= 0; j--) { int temp = arr[i] >> j; if (temp & 1 == 1) { printf(\"-\"); } else { printf(\"_\"); } } } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 정수형 변수 a를 선언하세요.\n4. 크기가 10인 정수형 배열 arr를 선언하세요.\n5. 정수형 변수 idx를 0으로 초기화하세요.\n6. n의 값을 입력 받으세요.\n7. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n8. 각 반복에서 a의 값을 입력 받으세요.\n9. 배열 arr의 i번째 요소에 a를 저장하세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n12. [rep_start(2)] j를 7부터 0까지 반복하는 for 루프를 작성하세요.\n13. arr[i]의 j비트를 오른쪽으로 쉬프트하여 temp에 저장하세요.\n14. [cond_start(3)] temp의 가장 낮은 비트가 1인지 확인하는 조건문을 작성하세요.\n15. 가장 낮은 비트가 1이라면 \"-\"를 출력하세요.\n16. [cond_end(3)]\n17. [cond_start(3)] 그렇지 않으면 조건문을 작성하세요.\n18. 가장 낮은 비트가 0이라면 \"_\"를 출력하세요.\n19. [cond_end(3)]\n20. [rep_end(2)]\n21. [rep_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N, check = 0XFF; scanf(\"%X\", &N); for(int i = 0; i < 4; i++) { printf(\"%X \", N & check); N = N >> 8; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 N과 check를 선언하고, check는 0xFF로 초기화합니다.\n3. N에 16진수 형식으로 입력을 받으세요.\n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. N과 check의 AND 연산 결과를 16진수 형식으로 출력하세요.\n6. N을 오른쪽으로 8비트 시프트 하여 다음 반복을 준비합니다.\n7. [rep_end(1)]\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a[32]; int b[32]; int flag_a = 0; int flag_b = 0; for (int i = 0; i < 32; i++) { scanf(\"%1u\", &a[i]); } for (int i = 0; i < 32; i++) { scanf(\"%1u\", &b[i]); } for (int i = 0; i < 32; i++) { printf(\"%d\", a[i] & b[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { printf(\"%d\", a[i] | b[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { printf(\"%d\", a[i] ^ b[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (a[i] == 0) { flag_a++; } if (b[i] == 0) { flag_b++; } } if (flag_a == 32 || flag_b == 32) { printf(\"0\\n\"); } else { printf(\"1\\n\"); } flag_a = 0; for (int i = 0; i < 32; i++) { if (a[i] == 0 && b[i] == 0) { flag_a++; } } if (flag_a == 32) { printf(\"0\\n\"); } else { printf(\"1\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. int형 배열 a를 32크기로 선언하세요.\n3. int형 배열 b를 32크기로 선언하세요.\n4. int형 변수 flag_a를 0으로 초기화하세요. (a의 0의 개수를 세기 위함)\n5. int형 변수 flag_b를 0으로 초기화하세요. (b의 0의 개수를 세기 위함)\n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n7. a 배열의 각 요소에 1자리의 unsigned 정수를 입력받아 저장하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n10. b 배열의 각 요소에 1자리의 unsigned 정수를 입력받아 저장하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n13. a[i]와 b[i]의 비트 AND 연산 결과를 출력하세요.\n14. [rep_end(1)]\n15. 줄 바꿈을 출력하세요.\n16. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n17. a[i]와 b[i]의 비트 OR 연산 결과를 출력하세요.\n18. [rep_end(1)]\n19. 줄 바꿈을 출력하세요.\n20. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n21. a[i]와 b[i]의 비트 XOR 연산 결과를 출력하세요.\n22. [rep_end(1)]\n23. 줄 바꿈을 출력하세요.\n24. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n25. a[i]가 0인지 확인하는 조건문을 작성하세요.\n26. a[i]가 0이라면 flag_a를 1 증가시키세요.\n27. b[i]가 0인지 확인하는 조건문을 작성하세요.\n28. b[i]가 0이라면 flag_b를 1 증가시키세요.\n29. [rep_end(1)]\n30. [cond_start(1)] flag_a가 32 또는 flag_b가 32인지 확인하는 조건문을 작성하세요.\n31. 모두 0이라면 \"0\"을 출력하세요.\n32. [cond_end(1)]\n33. [cond_start(1)] 그렇지 않은 경우의 조건문을 작성하세요.\n34. 0이 아닌 수가 존재한다면 \"1\"을 출력하세요.\n35. [cond_end(1)]\n36. flag_a를 0으로 초기화하세요.\n37. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n38. a[i]와 b[i]가 모두 0인지 확인하는 조건문을 작성하세요.\n39. 두 배열의 각 요소가 0이라면 flag_a를 1 증가시키세요.\n40. [rep_end(1)]\n41. [cond_start(1)] flag_a가 32인지 확인하는 조건문을 작성하세요.\n42. 모두 0이라면 \"0\"을 출력하세요.\n43. [cond_end(1)]\n44. [cond_start(1)] 그렇지 않은 경우의 조건문을 작성하세요.\n45. 0이 아닌 수가 존재한다면 \"1\"을 출력하세요.\n46. [cond_end(1)]\n47. return 0;으로 프로그램을 종료하세요.\n48. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned char N = 0; scanf(\"%hhu\", &N); for (int i = 0; i < N; i++) { int arr[8] = { 0, }; char arr_c[9] = { 0, }; for (int j = 0; j < 8; j++) { char A = 0; scanf(\" %c\", &arr_c[j]); } for (int k = 0; k < 8; k++) { if (arr_c[k] == '-') { arr[k] = 1; } else if (arr_c[k] == '_') { arr[k] = 0; } } int base = 1; int sum = 0; for (int i = 7; i >= 0; i--) { sum += arr[i] * base; base *= 2; } printf(\"%d \", sum); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char형 변수 N을 0으로 초기화하세요.\n3. N에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. int형 배열 arr을 크기 8로 선언하고 0으로 초기화하세요.\n6. char형 배열 arr_c을 크기 9로 선언하고 0으로 초기화하세요.\n7. [rep_start(2)] j를 0부터 7까지 반복하는 for 루프를 작성하세요.\n8. char형 변수 A를 0으로 초기화하세요.\n9. arr_c[j]에 문자 입력을 받으세요.\n10. [rep_end(2)]\n11. [rep_start(2)] k를 0부터 7까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(3)] arr_c[k]가 '-'인지 확인하는 조건문을 작성하세요.\n13. arr[k]를 1로 설정하세요.\n14. [cond_end(3)]\n15. [cond_start(3)] arr_c[k]가 '_'인지 확인하는 조건문을 작성하세요.\n16. arr[k]를 0으로 설정하세요.\n17. [cond_end(3)]\n18. [rep_end(2)]\n19. int형 변수 base를 1로 초기화하세요.\n20. int형 변수 sum을 0으로 초기화하세요.\n21. [rep_start(2)] i를 7부터 0까지 반복하는 for 루프를 작성하세요.\n22. sum에 arr[i]와 base를 곱한 값을 더하세요.\n23. base를 2배로 증가시키세요.\n24. [rep_end(2)]\n25. sum을 출력하세요.\n26. [rep_end(1)]\n27. return 0;으로 프로그램을 종료하세요.\n28. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; int count = 0; scanf(\"%u\", &N); while (N) { count += N & 1; N >>= 1; } printf(\"%d\\n\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. 소수의 개수를 세기 위한 int형 변수 count를 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] N이 0이 아닐 동안 반복하는 while 루프를 작성하세요.\n6. N의 최하위 비트가 1인지 확인하여 count에 1을 더하세요.\n7. N의 비트를 오른쪽으로 한 자리 이동하세요.\n8. [rep_end(1)]\n9. count의 값을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int a, b, c, i; scanf(\"%d %d\", &a, &b); for(i=a*b;i>=1;i--) { if(i%a==0 && i%b==0) c=i; } printf(\"%d\", c); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a, b, c, i를 선언하세요.\n3. a와 b에 입력을 받으세요.\n4. [rep_start(1)] i를 a와 b의 곱인 a*b부터 1까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] i가 a로 나누어 떨어지면서 b로도 나누어 떨어지는지 확인하는 조건문을 작성하세요.\n6. 조건을 만족하면 c에 i의 값을 할당하세요.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. c의 값을 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N, A; scanf(\"%u\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &A); for (int j = 7; j >= 0; j--) { if (A & (1 << j)) { printf(\"-\"); } else { printf(\"_\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 N과 A를 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언하고 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. A에 대한 입력을 받으세요.\n6. [rep_start(2)] j를 선언하고 7부터 0까지 감소하는 for 루프를 작성하세요.\n7. [cond_start(3)] A의 j번째 비트가 1인지 확인하는 조건문을 작성하세요.\n8. j번째 비트가 1이라면 \"-\"를 출력하세요.\n9. [cond_end(3)]\n10. 비트가 1이 아니라면 \"_\"를 출력하세요.\n11. [rep_end(2)]\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%X\", &n); for (int i = 0; i < 4; i++) { unsigned int b = (n >> (i * 8)) & 0xFF; if (i > 0) { printf(\" \"); } printf(\"%X\", b); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. n에 대해 16진수 형식으로 값을 입력받으세요.  \n4. [rep_start(1)] i를 0부터 3까지만 반복하는 for 루프를 작성하세요.  \n5. unsigned int형 변수 b를 선언하고, n의 i번째 바이트를 추출하세요.  \n6. [cond_start(2)] i가 0보다 큰지 확인하는 조건문을 작성하세요.  \n7. i가 0보다 크면 공백을 출력하세요.  \n8. [cond_end(2)]  \n9. b의 값을 16진수 형식으로 출력하세요.  \n10. [rep_end(1)]  \n11. 줄 바꿈을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { int n; char a; char arr[10]; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { int temp = 128; int result = 0; for (int j = 0; j < 8; j++) { scanf(\" %c\", &a); if (a == '-') { result += temp; } temp /= 2; } printf(\"%d \", result); } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 문자형 변수 a를 선언하세요.\n4. 문자형 배열 arr를 크기 10으로 선언하세요.\n5. n의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. int형 변수 temp를 128로 초기화하세요.\n8. int형 변수 result를 0으로 초기화하세요.\n9. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. a의 값을 한 문자 입력받기 위해 scanf를 사용하세요.\n11. [cond_start(2)] 입력받은 문자가 '-'인지 확인하는 조건문을 작성하세요.\n12. 문자가 '-'라면, temp 값을 result에 더하세요.\n13. temp를 절반으로 줄이세요.\n14. [cond_end(2)]\n15. [rep_end(2)]\n16. result의 값을 출력하세요.\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char S[101]; char W[101]; int count = 0; int i, j, match; scanf(\"%100s\", S); scanf(\"%100s\", W); int lenS = 0, lenW = 0; for (i = 0; S[i] != '\\0'; i++) lenS++; for (i = 0; W[i] != '\\0'; i++) lenW++; for (i = 0; i <= lenS - lenW; i++) { match = 1; for (j = 0; j < lenW; j++) { if (S[i + j] != W[j]) { match = 0; break; } } if (match) { count++; } } printf(\"%d\\n\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char 배열 S를 선언하여 최대 100글자를 저장할 수 있도록 설정하세요.\n3. char 배열 W를 선언하여 최대 100글자를 저장할 수 있도록 설정하세요.\n4. 소문자 count를 0으로 초기화하세요. (일치하는 단어 개수 세기)\n5. 정수형 변수 i, j, match를 선언하세요. (루프 제어 및 일치 여부 확인)\n6. S 배열에 최대 100글자를 입력받으세요.\n7. W 배열에 최대 100글자를 입력받으세요.\n8. 소스 문자열 S의 길이를 저장할 int형 변수 lenS를 0으로 초기화하세요.\n9. 대상 문자열 W의 길이를 저장할 int형 변수 lenW를 0으로 초기화하세요.\n10. [rep_start(1)] S의 길이를 계산하는 for 루프를 작성하세요.\n11. S의 각 문자가 널('\\0')이 아닐 경우 lenS를 증가시키세요.\n12. [rep_end(1)]\n13. [rep_start(1)] W의 길이를 계산하는 for 루프를 작성하세요.\n14. W의 각 문자가 널('\\0')이 아닐 경우 lenW를 증가시키세요.\n15. [rep_end(1)]\n16. [rep_start(1)] i를 0부터 lenS-lenW까지 반복하는 for 루프를 작성하세요.\n17. match 변수를 1로 초기화하여 문자열이 일치하는지 여부를 확인할 준비를 하세요.\n18. [rep_start(2)] j를 0부터 lenW까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(3)] S의 현재 위치(i+j)와 W[j]가 일치하는지 확인하는 조건문을 작성하세요.\n20. 일치하지 않으면 match를 0으로 변경하고 루프를 종료하세요.\n21. [cond_end(3)]\n22. [rep_end(2)]\n23. [cond_start(2)] match가 1인지 확인하여 문자열이 일치하는 경우를 처리하세요.\n24. count를 증가시켜 일치 횟수를 세세요.\n25. [cond_end(2)]\n26. [rep_end(1)]\n27. S에서 W와 일치하는 문자열 개수를 출력하세요.\n28. return 0;으로 프로그램을 종료하세요.\n29. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int A, B = 0; scanf(\"%d %d\", &A, &B); int arr[100] = { 0, }; int arr2[100] = { 0, }; int max = 0; int max2 = 0; for (int i = 1; i < 100; i++) { if (A % i == 0) { arr[i] = i; } if (B % i == 0) { arr2[i] = i; } } for (int i = 1; i < 100; i++) { for (int j = 1; j < 100; j++) { if (arr[i] == arr2[j] && arr[i] != 0 && arr2[i] != 0) { max = j; } } if (max > max2) { max2 = max; } } printf(\"%d\", (A * B) / max2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A와 B를 선언하고 B를 0으로 초기화하세요.\n3. A와 B에 입력을 받으세요.\n4. 크기가 100인 int형 배열 arr을 0으로 초기화하여 선언하세요.\n5. 크기가 100인 int형 배열 arr2을 0으로 초기화하여 선언하세요.\n6. 소수점 이하 없음을 나타내는 int형 변수 max를 0으로 초기화하세요.\n7. 두 번째 최대값을 저장할 int형 변수 max2를 0으로 초기화하세요.\n8. [rep_start(1)] i를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(2)] A가 i로 나누어지는지 확인하는 조건문을 작성하세요.\n10. A가 i로 나누어지면 arr[i]에 i를 저장하세요.\n11. [cond_end(2)]\n12. [cond_start(2)] B가 i로 나누어지는지 확인하는 조건문을 작성하세요.\n13. B가 i로 나누어지면 arr2[i]에 i를 저장하세요.\n14. [cond_end(2)]\n15. [rep_end(1)]\n16. [rep_start(1)] i를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n17. [rep_start(2)] j를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n18. [cond_start(3)] arr[i]와 arr2[j]가 같은지 확인하는 조건문을 작성하세요.\n19. arr[i]가 arr2[j]와 같고 두 값이 0이 아니면 max를 j로 설정하세요.\n20. [cond_end(3)]\n21. [cond_start(3)] max가 max2보다 큰지 확인하는 조건문을 작성하세요.\n22. max가 max2보다 크다면 max2를 max로 업데이트하세요.\n23. [cond_end(3)]\n24. [rep_end(2)]\n25. [rep_end(1)]\n26. max2를 이용하여 (A * B) / max2를 출력하세요.\n27. return 0;으로 프로그램을 종료하세요.\n28. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int arr[100] = { 0 }; int cnt = 0; int j = 0; while (1) { if(N <= 0){ break; } else { int a = N % 2; N = N / 2; arr[j] = a; j++; } } for (int i = 0; i < 100; i++) { if (arr[i] == 1)cnt++; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 사용자 입력을 받으세요.\n4. int형 배열 arr을 크기 100으로 선언하고 0으로 초기화하세요.\n5. 정수형 변수 cnt를 0으로 초기화하세요.\n6. 정수형 변수 j를 0으로 초기화하세요.\n7. [rep_start(1)] 무한 루프를 시작하세요. \n8. [cond_start(2)] N이 0 이하인지 확인하는 조건문을 작성하세요.\n9. N이 0 이하라면 루프를 종료하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] N이 0보다 크면 다음을 실행하세요.\n12. N을 2로 나눈 나머지를 int형 변수 a에 저장하세요.\n13. N을 2로 나눈 결과로 업데이트하세요.\n14. arr의 j번째 인덱스에 a를 저장하세요.\n15. j를 1 증가시키세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. [rep_start(1)] i를 0부터 100까지 반복하는 for 루프를 시작하세요.\n19. [cond_start(2)] arr의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n20. arr[i]가 1이면 cnt를 1 증가시키세요.\n21. [cond_end(2)]\n22. [rep_end(1)]\n23. cnt의 값을 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); char signal[8 * N + 1]; scanf(\"%s\", signal); for (int i = 0; i < N; i++) { unsigned char byte = 0; for (int j = 0; j < 8; j++) { byte <<= 1; if (signal[i * 8 + j] == '-') { byte |= 1; } } printf(\"%u \", byte); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. 크기가 8 * N + 1인 char 배열 signal을 선언하세요.\n5. signal에 대한 문자열 입력을 받으세요.\n6. [rep_start(1)] i를 선언하여 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. unsigned char 타입의 byte 변수를 0으로 초기화하세요.\n8. [rep_start(2)] j를 선언하여 0부터 7까지 반복하는 for 루프를 작성하세요.\n9. byte를 왼쪽으로 1비트 시프트하세요.\n10. [cond_start(2)] signal 배열의 특정 요소가 '-'인지 확인하는 조건문을 작성하세요.\n11. signal[i * 8 + j]가 '-'라면 byte의 가장 오른쪽 비트를 1로 설정하세요.\n12. [cond_end(2)]\n13. [rep_end(2)]\n14. byte의 값을 부호 없는 정수형으로 출력하세요.\n15. [rep_end(1)]\n16. 줄 바꿈을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int n; int cnt = 0; scanf(\"%u\", &n); unsigned int arr[32] = { 0 }; int index = 31; while (n > 0 && index >= 0) { arr[index] = n % 2; n /= 2; index--; } for (int i = 0; i < 32; i++) { if (arr[i] == 1) cnt++; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 cnt를 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. unsigned int형 배열 arr를 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.\n6. int형 변수 index를 31로 초기화하여 배열의 마지막 인덱스를 가리키게 하세요.\n7. [rep_start(1)] n이 0보다 크고 index가 0 이상인 동안 반복하는 while 루프를 작성하세요.\n8. 현재 index 위치에 n을 2로 나눈 나머지를 저장하세요.\n9. n을 2로 나눈 값으로 업데이트하세요.\n10. index를 1 감소시켜 배열의 다음 인덱스로 이동하세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] arr[i]의 값이 1인지 확인하는 조건문을 작성하세요.\n14. arr[i]가 1이라면 cnt를 1 증가시키세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. cnt의 값을 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int num = 0; char bitString[33]; unsigned int bitNot = 0; int logicNot = 0; scanf(\"%32s\", bitString); for (int i = 0; i < 32; i++) { num <<= 1; if (bitString[i] == '1') { num |= 1; } } bitNot = ~num; logicNot = (num == 0) ? 1 : 0; for (int i = 31; i >= 0; i--) { printf(\"%u\", (bitNot >> i) & 1); } printf(\"\\n\"); printf(\"%d\\n\", logicNot); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 num을 0으로 초기화하세요.\n3. char형 배열 bitString[33]을 선언하세요.\n4. unsigned int형 변수 bitNot을 0으로 초기화하세요.\n5. int형 변수 logicNot을 0으로 초기화하세요.\n6. bitString에 최대 32자까지 입력을 받으세요.\n7. [rep_start(1)] i를 선언하여 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. num의 비트를 왼쪽으로 1칸 이동하세요.\n9. [cond_start(2)] bitString[i]가 '1'인지 확인하는 조건문을 작성하세요.\n10. bitString[i]가 '1'이라면 num의 가장 오른쪽 비트를 1으로 설정하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. bitNot에 num의 비트를 반전하여 저장하세요.\n14. logicNot 변수에 num이 0인지 판별하여 0이면 0, 아니면 1을 저장하세요.\n15. [rep_start(1)] i를 선언하여 31부터 0까지 반복하는 for 루프를 작성하세요.\n16. bitNot의 i번째 비트를 출력하세요.\n17. [rep_end(1)]\n18. 한 줄 개행을 출력하세요.\n19. logicNot의 값을 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int num; unsigned int bytes[4]; scanf(\"%X\", &num); bytes[0] = num & 0xFF; bytes[1] = (num >> 8) & 0xFF; bytes[2] = (num >> 16) & 0xFF; bytes[3] = (num >> 24) & 0xFF; printf(\"%X %X %X %X\", bytes[0], bytes[1], bytes[2], bytes[3]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 num을 선언하세요.\n3. unsigned int형 배열 bytes를 4개의 요소로 선언하세요.\n4. scanf 함수를 사용하여 16진수 입력을 받아 num에 저장하세요.\n5. bytes[0]에 num의 하위 8비트(0xFF)를 저장하세요.\n6. bytes[1]에 num의 9~16비트(0xFF)를 저장하기 위해 num을 8비트 오른쪽으로 이동하고 0xFF를 적용하세요.\n7. bytes[2]에 num의 17~24비트(0xFF)를 저장하기 위해 num을 16비트 오른쪽으로 이동하고 0xFF를 적용하세요.\n8. bytes[3]에 num의 상위 8비트(0xFF)를 저장하기 위해 num을 24비트 오른쪽으로 이동하고 0xFF를 적용하세요.\n9. printf 함수를 사용하여 bytes 배열의 각 요소를 16진수 형식으로 출력하세요.\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ unsigned int N; scanf(\"%u\",&N); int cnt = 0 ; while(N!=0){ if(N%2!=0){ cnt++; } N = N/2; } printf(\"%d\",cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받아오세요.  \n4. int형 변수 cnt를 0으로 초기화하세요.  \n5. [rep_start(1)] N이 0이 아닐 때까지 반복하는 while 루프를 작성하세요.  \n6. [cond_start(2)] N이 홀수인지 확인하는 조건문을 작성하세요.  \n7. N이 홀수라면 cnt를 1 증가시키세요.  \n8. [cond_end(2)]  \n9. N을 2로 나누어 업데이트하세요.  \n10. [rep_end(1)]  \n11. cnt의 값과 함께 cnt를 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ unsigned int A[32]; for(int i = 0;i<32;i++){ scanf(\"%1u\",&A[i]); } int cnt = 1; for(int i = 0;i<32;i++){ if(A[i]!=0){ printf(\"0\"); cnt = 0; } else{ printf(\"1\"); } } printf(\"\\n%d\",cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 32개의 unsigned int형 배열 A를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. 배열 A의 각 요소에 대해 1자리의 unsigned int 데이터를 입력받으세요.\n5. [rep_end(1)]\n6. int형 변수 cnt를 1로 초기화하여 선언하세요.\n7. [rep_start(1)] i를 선언해 0부터 31까지 다시 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] 배열 A의 요소가 0이 아닌지 확인하는 조건문을 작성하세요.\n9. A[i]가 0이 아니면 \"0\"을 출력하고, cnt를 0으로 설정하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A[i]가 0일 경우에 해당하는 조건문을 작성하세요.\n12. A[i]가 0이면 \"1\"을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 줄을 바꾼 후 cnt를 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; int A[10]; int B[80]; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &A[i]); } int index = 0; for (int i = N-1; i >=0 ; i--) { int cnt = A[i]; for (int j = 0; j < 8; j++) { B[index * 8 + j] = cnt % 2; cnt = cnt / 2; } index++; } for (int i = index * 8-1; i >= 0; i--) { if (B[i] != 0) { printf(\"-\"); } else { printf(\"_\"); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 정수형 배열 A를 크기가 10인 것으로 선언하세요.\n4. 정수형 배열 B를 크기가 80인 것으로 선언하세요.\n5. N에 사용자로부터 정수를 입력 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 i번째 요소에 사용자로부터 정수를 입력 받으세요.\n8. [rep_end(1)]\n9. int형 변수 index를 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 N-1부터 0까지 반복하는 for 루프를 작성하세요.\n11. int형 변수 cnt를 A[i]로 초기화하세요.\n12. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n13. B 배열의 적절한 인덱스에 cnt의 2진수 표현을 저장하세요.\n14. cnt를 2로 나누어 나머지를 계산하세요.\n15. [rep_end(2)]\n16. index를 증가시키세요.\n17. [rep_end(1)]\n18. [rep_start(1)] i를 선언해 index * 8 - 1부터 0까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] B[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n20. B[i]가 0이 아니면 \"-\"를 출력하세요.\n21. [cond_end(2)]\n22. [cond_start(2)] B[i]가 0인지 확인하는 조건문을 작성하세요.\n23. B[i]가 0이면 \"_\"를 출력하세요.\n24. [cond_end(2)]\n25. [rep_end(1)]\n26. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ unsigned int N; scanf(\"%X\",&N); for(int i = 0;i<4;i++){ printf(\"%X \",(N&0xFF)); N = N>>8; } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 16진수 형식으로 입력을 받으세요.\n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. N의 하위 8비트를 추출하여 16진수 형식으로 출력하세요.\n6. N을 오른쪽으로 8비트 이동시키세요.\n7. [rep_end(1)]\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int arr[32] = { 0 }; int cnt = 0; int j = 0; int k = 32 / sizeof(N); while (1) { if (N <= 0) { break; } else { int a = N % 2; N = N / 2; arr[31 - j] = a; j++; } } for (int i = 0; i < 32; i++) { if (arr[i] == 1) { cnt++; } if (i % k == 7) { printf(\"%u \", cnt); cnt = 0; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N의 값을 입력받으세요.\n4. int형 배열 arr을 32개의 0으로 초기화하여 선언하세요.\n5. 소수를 기록할 int형 변수 cnt를 0으로 초기화하세요.\n6. int형 변수 j를 0으로 초기화하여 선언하세요.\n7. int형 변수 k를 32를 N의 크기로 나눈 값으로 설정하세요.\n8. [rep_start(1)] 무한 반복문을 시작하세요.\n9. [cond_start(2)] N이 0보다 작거나 같은지 확인하는 조건문을 작성하세요.\n10. N이 0 이하이면 루프를 종료하세요.\n11. [cond_end(2)]\n12. 그렇지 않으면, a에 N을 2로 나눈 나머지를 저장하세요.\n13. N을 2로 나눈 몫으로 업데이트하세요.\n14. arr 배열의 31-j 인덱스에 a 값을 저장하세요.\n15. j를 1 증가시키세요.\n16. [rep_end(1)]\n17. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 시작하세요.\n18. [cond_start(2)] arr[i]가 1인지 확인하는 조건문을 작성하세요.\n19. arr[i]가 1인 경우 cnt를 1 증가시키세요.\n20. [cond_end(2)]\n21. [cond_start(2)] i가 k의 배수여서 7과 동등한지 확인하는 조건문을 작성하세요.\n22. 조건이 참이면 cnt의 값을 출력하세요.\n23. cnt를 0으로 초기화하세요.\n24. [cond_end(2)]\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N = 0; int array[33]; scanf(\"%u\", &N); int i = 0; for (i = 32; i >0; i--) { if (N % 2 == 1) { array[i] = 1; N = N / 2; } else if (N % 2 == 0) { array[i] = 0; N = N / 2; } if (N == 0) { break; } } int sum = 0; for (int j = i; j <33; j++) { if (array[j] == 1) { sum++; } } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. 정수형 배열 array를 크기 33으로 선언하세요.\n4. N의 값을 사용자로부터 입력 받으세요.\n5. 정수형 변수 i를 0으로 초기화하세요.\n6. [rep_start(1)] i을 32로 초기화하고 0보다 큰 동안 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] N이 홀수인지 확인하는 조건문을 작성하세요.\n8. N이 홀수라면 array[i]에 1을 저장하고 N을 2로 나누세요.\n9. [cond_end(2)]\n10. [cond_start(2)] N이 짝수인지 확인하는 조건문을 작성하세요.\n11. N이 짝수라면 array[i]에 0을 저장하고 N을 2로 나누세요.\n12. [cond_end(2)]\n13. [cond_start(2)] N이 0인지 확인하는 조건문을 작성하세요.\n14. N이 0이라면 반복문을 종료하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. int형 변수 sum을 0으로 초기화하세요.\n18. [rep_start(1)] j를 i부터 32까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] array[j]가 1인지 확인하는 조건문을 작성하세요.\n20. array[j]가 1이라면 sum을 1 증가시키세요.\n21. [cond_end(2)]\n22. [rep_end(1)]\n23. sum 값을 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); getchar(); char s[81]; int array[n]; gets(s); for (int i = 0; i < n; i++) { int x = 128, sum = 0; for (int j = 0; j < 8; j++) { if (s[j] == '_') { sum += x * 0; } else { sum += x * 1; } x /= 2; } printf(\"%d \", sum); if (i != n - 1) { for (int k = 0; k < 8 * n - 8; k++) { s[k] = s[k + 8]; } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n의 값을 입력받으세요.  \n4. getchar(); 호출하여 입력 버퍼의 개행 문자를 제거하세요.  \n5. 문자 배열 s를 81 크기로 선언하세요.  \n6. 정수형 배열 array를 n 크기로 선언하세요.  \n7. 문자열을 입력받기 위해 gets(s) 함수를 호출하세요.  \n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.  \n9. 정수형 변수 x를 128로 초기화하세요.  \n10. 정수형 변수 sum을 0으로 초기화하세요.  \n11. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n12. [cond_start(3)] s[j]가 '_'인지 확인하는 조건문을 작성하세요.  \n13. s[j]가 '_'라면 sum에 x * 0을 더하세요.  \n14. [cond_end(3)]  \n15. sum에 x * 1을 더하세요.  \n16. x의 값을 반으로 나누세요.  \n17. [rep_end(2)]  \n18. sum의 값을 출력하세요.  \n19. [cond_start(3)] i가 n - 1이 아닌 경우를 확인하는 조건문을 작성하세요.  \n20. i가 n - 1이 아니면, s 배열을 시프트하여 다음 8개의 문자로 업데이트하세요.  \n21. [cond_end(3)]  \n22. [rep_end(1)]  \n23. return 0;으로 프로그램을 종료하세요.  \n24. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ int A[32] = {0}; int A_cnt = 0; int B[32] = {0}; int B_cnt = 0; for(int i = 0;i<32;i++){ scanf(\"%1u\",&A[i]); if (A[i]!=0)A_cnt=1; } for(int i = 0;i<32;i++){ scanf(\"%1u\",&B[i]); if (B[i]!=0)B_cnt=1; } for(int i = 0;i<32;i++){ printf(\"%1u\",A[i]&B[i]); } printf(\"\\n\"); for(int i = 0;i<32;i++){ printf(\"%1u\",A[i]|B[i]); } printf(\"\\n\"); for(int i = 0;i<32;i++){ printf(\"%1u\",A[i]^B[i]); } printf(\"\\n%d\\n%d\",A_cnt&&B_cnt,A_cnt||B_cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. int형 배열 A를 32개의 0으로 초기화하여 선언하세요.\n3. 소수가 들어있는지 여부를 기록할 int형 변수 A_cnt를 0으로 초기화하세요.\n4. int형 배열 B를 32개의 0으로 초기화하여 선언하세요.\n5. 소수가 들어있는지 여부를 기록할 int형 변수 B_cnt를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n7. 각 자리수에 대해 입력을 받아 A 배열에 저장하세요.\n8. [cond_start(2)] 입력된 A[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n9. A[i]가 0이 아니면 A_cnt를 1로 설정하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n13. 각 자리수에 대해 입력을 받아 B 배열에 저장하세요.\n14. [cond_start(2)] 입력된 B[i]가 0이 아닌지 확인하는 조건문을 작성하세요.\n15. B[i]가 0이 아니면 B_cnt를 1로 설정하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n19. A[i]와 B[i]를 비트 AND 연산하여 출력하세요.\n20. [rep_end(1)]\n21. 한 줄 개행 문자를 출력하세요.\n22. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n23. A[i]와 B[i]를 비트 OR 연산하여 출력하세요.\n24. [rep_end(1)]\n25. 한 줄 개행 문자를 출력하세요.\n26. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n27. A[i]와 B[i]를 비트 XOR 연산하여 출력하세요.\n28. [rep_end(1)]\n29. 한 줄 개행 문자를 출력하세요.\n30. A_cnt와 B_cnt의 논리곱을 출력하세요.\n31. 한 줄 개행 문자를 출력하세요.\n32. A_cnt와 B_cnt의 논리합을 출력하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int A[32] = { 0 }; for (int i = 1; N != 0; i++) { A[32 - i] = N % 2; N = N / 2; if (N == 1) { A[32 - (i + 1)] = 1; } } int cnt = 0; for (int i = 0; i < 32; i++) { if (A[i] == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 배열 A를 32개의 0으로 초기화하여 선언하세요.\n5. [rep_start(1)] i를 선언해 N이 0이 아닐 때까지 반복하는 for 루프를 작성하세요.\n6. A 배열의 32-i 번째 인덱스에 N을 2로 나눈 나머지를 저장하세요.\n7. N을 2로 나눈 몫으로 업데이트하세요.\n8. [cond_start(2)] N이 1인지 확인하는 조건문을 작성하세요.\n9. N이 1이라면 A 배열의 32-(i+1) 번째 인덱스에 1을 저장하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. int형 변수 cnt를 0으로 초기화하여 선언하세요.\n13. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n14. [cond_start(2)] A 배열의 i 번째 인덱스가 1인지 확인하는 조건문을 작성하세요.\n15. A[i]가 1이라면 cnt를 1 증가시키세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. cnt의 값을 출력하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ unsigned int N; int a[32]; int cnt =0; scanf(\"%d\",&N); for(int i=0;i<32;i++){ a[32-i] = N%2; if(N%2 == 1){ cnt = cnt+1; } N = N/2; if(N ==0){ break; } } printf(\"%d\",cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 무부호 정수형 변수 N을 선언하세요.  \n3. 크기가 32인 정수형 배열 a를 선언하세요.  \n4. 정수형 변수 cnt를 0으로 초기화하세요.\n5. 사용자로부터 N의 값을 입력받으세요.  \n6. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.  \n7. a[32-i]에 N을 2로 나눈 나머지를 저장하세요.  \n8. [cond_start(2)] N을 2로 나눈 나머지가 1인지 확인하는 조건문을 작성하세요.  \n9. N이 1이라면 cnt를 1 증가시키세요.  \n10. [cond_end(2)]  \n11. N을 2로 나누세요.  \n12. [cond_start(2)] N이 0인지 확인하는 조건문을 작성하세요.  \n13. N이 0이라면 반복문을 종료하세요.  \n14. [cond_end(2)]  \n15. [rep_end(1)]  \n16. cnt의 값을 출력하세요.  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int N; int cnt = 0; scanf(\"%u\", &N); while (N != 0) { if (N & ~1 != N) { cnt++; } N = N >> 1; } printf(\"%d\", cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. int형 변수 cnt를 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] N이 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n6. [cond_start(2)] N에서 마지막 비트가 0인지 확인하는 조건문을 작성하세요.\n7. 마지막 비트가 0이라면 cnt를 1 증가시키세요.\n8. [cond_end(2)]\n9. N을 오른쪽으로 1비트 이동시키세요.\n10. [rep_end(1)]\n11. cnt의 값을 출력하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned char A[33]; gets(A); for (int i = 0; i < 32; i++) { A[i] = A[i] - 48; } for (int i = 0; i < 32; i++) { if (A[i] == 0) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (A[i] == 1) { printf(\"0\"); return 0; } } printf(\"1\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char A[33] 배열을 선언하세요. \n3. 입력을 받기 위해 gets 함수를 사용하여 A 배열에 문자열을 저장하세요.\n4. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. A 배열의 각 요소에서 48을 빼서 ASCII 값을 정수로 변환하세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A[i]가 0인지 확인하는 조건문을 작성하세요.\n9. A[i]가 0이라면 \"1\"을 출력하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A[i]가 0이 아닐 경우를 처리하는 조건문을 작성하세요.\n12. A[i]가 0이 아닐 경우 \"0\"을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 한 줄을 출력하기 위해 \\n을 출력하세요.\n16. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n17. [cond_start(2)] A[i]가 1인지 확인하는 조건문을 작성하세요.\n18. A[i]가 1이라면 \"0\"을 출력하고, 프로그램을 종료하세요.\n19. [cond_end(2)]\n20. [rep_end(1)]\n21. \"1\"을 출력하여 실행이 종료되는 경우를 처리하세요.\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int N; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { int a; scanf(\"%d\", &a); int A[9]; for (int i = 0; i < 8; i++) { if (a & ~1 != a) { A[i] = '-'; } else { A[i] = '_'; } a = a >> 1; } for (int i = 7; i >=0; i--) { printf(\"%c\", A[i]); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n5. 정수형 변수 a를 선언하세요.\n6. a에 입력을 받으세요.\n7. int형 배열 A를 크기 9로 선언하세요.\n8. [rep_start(2)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(3)] a의 비트 연산을 통해 a가 홀짝인지 확인하는 조건문을 작성하세요.\n10. a가 홀수면 A[i]에 '-'를 저장하세요.\n11. [cond_end(3)]\n12. [cond_start(3)] a가 짝수면 A[i]에 '_'를 저장하세요.\n13. a를 오른쪽으로 1 비트 쉬프트하세요.\n14. [cond_end(3)]\n15. [rep_end(2)]\n16. [rep_start(2)] i를 7부터 0까지 반복하는 for 루프를 작성하세요.\n17. A[i]의 값을 출력하세요.\n18. [rep_end(2)]\n19. [rep_end(1)]\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int N; scanf(\"%x\", &N); for (int i = 0; i < 4; i++) { unsigned int a; a = 0xff & N; printf(\"%X \", a); N = N >> 8; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 N을 선언하세요.\n3. N에 16진수 형태로 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. unsigned int 형 변수 a를 선언하세요.\n6. N의 마지막 8비트를 a에 저장하세요. (N과 0xff의 비트 AND 연산)\n7. a를 16진수 형태로 출력하세요.\n8. N의 비트를 오른쪽으로 8비트 이동하세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int N; unsigned int N2; int N3 = 1; scanf(\"%u\", &N); N2 = N; int cnt = 0; while (N2 != 0) { N2 = N2 / 10; cnt++; } for (int i = 1; i < cnt; i++) { N3 = N3 * 10; } while (N3!=0) { if (N / N3 == 1)printf(\"q\"); else if (N / N3 == 2)printf(\"w\"); else if (N / N3 == 3)printf(\"e\"); else if (N / N3 == 4)printf(\"r\"); else if (N / N3 == 5)printf(\"t\"); else if (N / N3 == 6)printf(\"y\"); else if (N / N3 == 7)printf(\"u\"); else if (N / N3 == 8)printf(\"i\"); else if (N / N3 == 9)printf(\"o\"); else if (N / N3 == 0)printf(\"p\"); N = N % N3; N3 = N3 / 10; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 N을 선언하세요.\n3. unsigned int 형 변수 N2를 선언하세요.\n4. int 형 변수 N3을 1로 초기화하세요.\n5. N에 대한 입력을 받으세요.\n6. N2에 N의 값을 저장하세요.\n7. int 형 변수 cnt를 0으로 초기화하세요.\n8. [rep_start(1)] N2가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n9. N2를 10으로 나누어 N2를 업데이트하세요.\n10. cnt를 1 증가시키세요.\n11. [rep_end(1)]\n12. [rep_start(1)] i를 1로 초기화하고 cnt보다 작은 동안 반복하는 for 루프를 작성하세요.\n13. N3에 10을 곱하여 N3를 업데이트하세요.\n14. [rep_end(1)]\n15. [rep_start(1)] N3가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n16. [cond_start(2)] N을 N3로 나누었을 때 결과가 1인지 확인하는 조건문을 작성하세요.\n17. 결과가 1이면 \"q\"를 출력하세요.\n18. [cond_end(2)]\n19. [cond_start(2)] N을 N3로 나누었을 때 결과가 2인지 확인하는 조건문을 작성하세요.\n20. 결과가 2이면 \"w\"를 출력하세요.\n21. [cond_end(2)]\n22. [cond_start(2)] N을 N3로 나누었을 때 결과가 3인지 확인하는 조건문을 작성하세요.\n23. 결과가 3이면 \"e\"를 출력하세요.\n24. [cond_end(2)]\n25. [cond_start(2)] N을 N3로 나누었을 때 결과가 4인지 확인하는 조건문을 작성하세요.\n26. 결과가 4이면 \"r\"을 출력하세요.\n27. [cond_end(2)]\n28. [cond_start(2)] N을 N3로 나누었을 때 결과가 5인지 확인하는 조건문을 작성하세요.\n29. 결과가 5이면 \"t\"를 출력하세요.\n30. [cond_end(2)]\n31. [cond_start(2)] N을 N3로 나누었을 때 결과가 6인지 확인하는 조건문을 작성하세요.\n32. 결과가 6이면 \"y\"를 출력하세요.\n33. [cond_end(2)]\n34. [cond_start(2)] N을 N3로 나누었을 때 결과가 7인지 확인하는 조건문을 작성하세요.\n35. 결과가 7이면 \"u\"를 출력하세요.\n36. [cond_end(2)]\n37. [cond_start(2)] N을 N3로 나누었을 때 결과가 8인지 확인하는 조건문을 작성하세요.\n38. 결과가 8이면 \"i\"를 출력하세요.\n39. [cond_end(2)]\n40. [cond_start(2)] N을 N3로 나누었을 때 결과가 9인지 확인하는 조건문을 작성하세요.\n41. 결과가 9이면 \"o\"를 출력하세요.\n42. [cond_end(2)]\n43. [cond_start(2)] N을 N3로 나누었을 때 결과가 0인지 확인하는 조건문을 작성하세요.\n44. 결과가 0이면 \"p\"를 출력하세요.\n45. [cond_end(2)]\n46. N을 N에 대한 N3의 나머지로 업데이트하세요.\n47. N3를 10으로 나누어 N3를 업데이트하세요.\n48. [rep_end(1)]\n49. return 0;으로 프로그램을 종료하세요.\n50. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int a, b; int A[100] = { 0 }; int B[100] = { 0 }; int max = 0; scanf(\"%d %d\", &a, &b); for (int i = 1; i < 100; i++) { if (a % i == 0) { A[i]++; } if (b % i == 0) { B[i]++; } } for (int i = 99; i >= 0; i--) { if (A[i] != 0 && B[i] != 0) { if (A[i] > max && B[i] > max) { max = i; } } } printf(\"%d\", (a * b) / max); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 a와 b를 선언하세요.  \n3. 정수형 배열 A를 크기 100으로 선언하고 0으로 초기화하세요.  \n4. 정수형 배열 B를 크기 100으로 선언하고 0으로 초기화하세요.  \n5. int형 변수 max를 0으로 초기화하세요.  \n6. M과 N에 입력을 받으세요.  \n7. [rep_start(1)] i를 1부터 99까지 반복하는 for 루프를 작성하세요.  \n8. [cond_start(2)] a가 i로 나누어지는지 확인하는 조건문을 작성하세요.  \n9. a가 i로 나누어지면 A[i]를 1 증가시키세요.  \n10. [cond_end(2)]  \n11. [cond_start(2)] b가 i로 나누어지는지 확인하는 조건문을 작성하세요.  \n12. b가 i로 나누어지면 B[i]를 1 증가시키세요.  \n13. [cond_end(2)]  \n14. [rep_end(1)]  \n15. [rep_start(1)] i를 99부터 0까지 반복하는 for 루프를 작성하세요.  \n16. [cond_start(2)] A[i]와 B[i]가 모두 0이 아닌지 확인하는 조건문을 작성하세요.  \n17. [cond_start(3)] A[i]가 max보다 크고 B[i]가 max보다 큰지 확인하는 조건문을 작성하세요.  \n18. 둘 다 크면 max를 i로 설정하세요.  \n19. [cond_end(3)]  \n20. [cond_end(2)]  \n21. [rep_end(1)]  \n22. max의 값을 이용해 (a * b)를 max로 나눈 값을 출력하세요.  \n23. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { char S[101]; char W[101]; gets(S); gets(W); int cnt = 0; int cnt2 = 0; int cnt_word = 0; for (int i = 0; W[i] != '\\0'; i++) { cnt++; } for (int i = 0; S[i] != '\\0'; i++) { if (S[i] == W[0]) { cnt2++; for (int j = 1; j<cnt; j++) { if (S[i+j] == W[j]) { cnt2++; } else { cnt2 = 0; break; } } if (cnt2 == cnt) { cnt_word++; } cnt2 = 0; } } printf(\"%d\", cnt_word); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 S와 W를 각각 101 크기로 선언하세요.\n3. 사용자로부터 문자열 S를 입력받습니다.\n4. 사용자로부터 문자열 W를 입력받습니다.\n5. int형 변수 cnt를 0으로 초기화하여 문자열 W의 길이를 저장할 준비를 합니다.\n6. [rep_start(1)] W의 길이를 계산하는 for 루프를 작성하세요.\n7. W의 각 문자를 확인하여 길이를 세어 cnt를 증가시키세요.\n8. [rep_end(1)]\n9. int형 변수 cnt2와 cnt_word를 각각 0으로 초기화하세요.\n10. [rep_start(1)] S의 길이를 확인하기 위한 for 루프를 시작합니다.\n11. [cond_start(1)] S의 현재 문자가 W의 첫 번째 문자와 같은지 확인하는 조건문을 작성하세요.\n12. S의 현재 문자가 W의 첫 번째 문자와 같다면 cnt2를 증가시키세요.\n13. [rep_start(2)] W의 길이만큼 반복하기 위한 for 루프를 시작합니다.\n14. [cond_start(3)] S의 다음 문자가 W의 다음 문자와 같은지 확인하는 조건문을 작성하세요.\n15. S의 현재 문자와 W의 현재 문자가 같으면 cnt2를 증가시키세요.\n16. [cond_end(3)]\n17. [cond_start(3)] S의 현재 문자와 W의 현재 문자가 다르면 cnt2를 0으로 초기화하고 루프를 종료합니다.\n18. [cond_end(3)]\n19. [rep_end(2)]\n20. [cond_start(2)] cnt2가 W의 길이와 같으면 cnt_word를 증가시키세요.\n21. [cond_end(2)]\n22. cnt2를 0으로 초기화하여 다음 문자를 위해 준비합니다.\n23. [cond_end(1)]\n24. [rep_end(1)]\n25. S 안에 W가 얼마나 나타나는지 cnt_word를 출력하세요.\n26. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned N; unsigned A[32] = { 0 }; scanf(\"%u\", &N); for (int i = 31; i >= 0; i--) { A[i] = N % 2; N /= 2; } int cnt = 0; for (int i = 0; i < 33; i++) { if (A[i] == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned형 변수 N을 선언하세요.\n3. unsigned형 배열 A를 32개의 요소를 갖고 0으로 초기화하여 선언하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 유도해 31부터 0까지 역순으로 반복하는 for 루프를 작성하세요.\n6. A[i]에 N을 2로 나눈 나머지를 저장하세요.\n7. N을 2로 나누어 값을 업데이트하세요.\n8. [rep_end(1)]\n9. int형 변수 cnt를 선언하고 0으로 초기화하세요.\n10. [rep_start(1)] i를 선언해 0부터 32까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] A[i]가 1인지 확인하는 조건문을 작성하세요.\n12. A[i]가 1이라면 cnt를 증가시키세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. cnt를 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N = 0; unsigned int cnt = 0; scanf(\"%u\", &N); while (N > 0) { if (N % 2 == 1) cnt++; N = N / 2; } printf(\"%u\", cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. unsigned int형 변수 cnt를 0으로 초기화하여 카운트를 셉니다.\n4. N에 대한 입력을 받기 위해 scanf 함수를 사용하세요.\n5. [rep_start(1)] N이 0보다 큰 동안 반복하는 while 루프를 작성하세요.\n6. [cond_start(2)] N이 홀수인지 확인하는 조건문을 작성하세요.\n7. N이 홀수라면 cnt를 1 증가시키세요.\n8. [cond_end(2)]\n9. N을 2로 나누어 업데이트하세요.\n10. [rep_end(1)]\n11. N의 이진수 표현에서 1의 개수를 출력하세요. \n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); while (n > 0) { unsigned int arr[8]; unsigned int A; scanf(\"%u\", &A); int index = 7; while (index >= 0) { arr[index] = A % 2; A /= 2; index--; } for (int i = 0; i < 8; i++) { if (arr[i] == 1) printf(\"-\"); else printf(\"_\"); } n--; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. [rep_start(1)] n이 0보다 큰 동안 반복하는 while 루프를 작성하세요.\n5. unsigned int형 배열 arr[8]을 선언하세요.\n6. unsigned int형 변수 A를 선언하세요.\n7. A에 대한 입력을 받으세요.\n8. int형 변수 index를 7로 초기화하세요.\n9. [rep_start(2)] index가 0 이상인 동안 반복하는 while 루프를 작성하세요.\n10. A를 2로 나눈 나머지를 arr[index]에 저장하세요.\n11. A를 2로 나누어 업데이트하세요.\n12. index를 1 감소시키세요.\n13. [rep_end(2)]\n14. [rep_start(2)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(3)] arr[i]가 1인지 확인하는 조건문을 작성하세요.\n16. arr[i]가 1이라면 \"-\"를 출력하세요.\n17. [cond_end(3)]\n18. [cond_start(3)] arr[i]가 1이 아닐 경우를 처리하는 조건문을 작성하세요.\n19. arr[i]가 1이 아니면 \"_\"를 출력하세요.\n20. [cond_end(3)]\n21. [rep_end(2)]\n22. n을 1 감소시키세요.\n23. [rep_end(1)]\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void print_and(int *_a, int *_b) { for (int i = 0; i < 32; i++) { if ((_a[i] == 1) && (_b[i] == 1)) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); } void print_or(int *_a, int *_b) { for (int i = 0; i < 32; i++) { if ((_a[i] == 1) || (_b[i] == 1)) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); } void print_xor(int *_a, int *_b) { for (int i = 0; i < 32; i++) { if (_a[i] == _b[i]) { printf(\"0\"); } else { printf(\"1\"); } } printf(\"\\n\"); } void determin_logic(int *_a, int *_b) { int logic_a = 0, logic_b = 0; for (int i = 0; i < 32; i++) { if (_a[i] == 1) { logic_a = 1; } if (_b[i] == 1) { logic_b = 1; } } printf(\"%d\\n\", logic_a && logic_b); printf(\"%d\\n\", logic_a || logic_b); } int main() { char a[33], b[33]; int len1 = 0, len2 = 0, _a[32], _b[32]; gets(a); gets(b); while (a[len1] != '\\0') { _a[len1] = a[len1] - '0'; len1++; } while (b[len2] != '\\0') { _b[len2] = b[len2] - '0'; len2++; } for (int i = len1; i < 32; i++) { _a[i] = 0; } for (int i = len2; i < 32; i++) { _b[i] = 0; } print_and(_a, _b); print_or(_a, _b); print_xor(_a, _b); determin_logic(_a, _b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 함수 print_and를 정의하세요. (매개변수: int 포인터 _a, int 포인터 _b)\n2. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n3. [cond_start(2)] _a[i]와 _b[i]가 모두 1인지 확인하는 조건문을 작성하세요.\n4. 두 값이 모두 1이라면 '1'을 출력하세요.\n5. [cond_end(2)]\n6. 그렇지 않으면 '0'을 출력하세요.\n7. [rep_end(1)]\n8. 줄바꿈을 출력하세요.\n9. [func_def_end(1)]\n10. [func_def_start(1)] 반환형이 없는 함수 print_or를 정의하세요. (매개변수: int 포인터 _a, int 포인터 _b)\n11. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] _a[i] 또는 _b[i]가 1인지 확인하는 조건문을 작성하세요.\n13. 하나라도 1이라면 '1'을 출력하세요.\n14. [cond_end(2)]\n15. 그렇지 않으면 '0'을 출력하세요.\n16. [rep_end(1)]\n17. 줄바꿈을 출력하세요.\n18. [func_def_end(1)]\n19. [func_def_start(1)] 반환형이 없는 함수 print_xor를 정의하세요. (매개변수: int 포인터 _a, int 포인터 _b)\n20. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n21. [cond_start(2)] _a[i]와 _b[i]가 같은지 확인하는 조건문을 작성하세요.\n22. 두 값이 동일하다면 '0'을 출력하세요.\n23. [cond_end(2)]\n24. 그렇지 않으면 '1'을 출력하세요.\n25. [rep_end(1)]\n26. 줄바꿈을 출력하세요.\n27. [func_def_end(1)]\n28. [func_def_start(1)] 반환형이 없는 함수 determin_logic를 정의하세요. (매개변수: int 포인터 _a, int 포인터 _b)\n29. 정수형 변수 logic_a와 logic_b를 0으로 초기화하세요.\n30. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n31. [cond_start(2)] _a[i]가 1인지 확인하는 조건문을 작성하세요.\n32. _a[i]가 1이라면 logic_a를 1로 설정하세요.\n33. [cond_end(2)]\n34. [cond_start(2)] _b[i]가 1인지 확인하는 조건문을 작성하세요.\n35. _b[i]가 1이라면 logic_b를 1로 설정하세요.\n36. [cond_end(2)]\n37. [rep_end(1)]\n38. logic_a와 logic_b의 논리곱을 출력하세요.\n39. logic_a와 logic_b의 논리합을 출력하세요.\n40. [func_def_end(1)]\n41. [func_def_start(1)] 반환형이 int인 main 함수를 정의하세요. (매개변수 없음)\n42. char형 배열 a와 b를 선언하세요.\n43. len1과 len2를 0으로 초기화하세요.\n44. 정수형 배열 _a와 _b를 선언하세요.\n45. 사용자의 입력을 통해 a에 문자열을 저장하세요.\n46. 사용자의 입력을 통해 b에 문자열을 저장하세요.\n47. [rep_start(1)] a에서 null 문자에 도달할 때까지 반복하는 while 루프를 작성하세요.\n48. a[len1]의 값에서 '0'을 빼고 _a[len1]에 저장하세요.\n49. len1을 1 증가시킵니다.\n50. [rep_end(1)]\n51. [rep_start(1)] b에서 null 문자에 도달할 때까지 반복하는 while 루프를 작성하세요.\n52. b[len2]의 값에서 '0'을 빼고 _b[len2]에 저장하세요.\n53. len2를 1 증가시킵니다.\n54. [rep_end(1)]\n55. [rep_start(1)] i를 len1부터 31까지 반복하는 for 루프를 작성하세요.\n56. _a[i]를 0으로 설정하세요.\n57. [rep_end(1)]\n58. [rep_start(1)] i를 len2부터 31까지 반복하는 for 루프를 작성하세요.\n59. _b[i]를 0으로 설정하세요.\n60. [rep_end(1)]\n61. print_and 함수를 호출하여 _a와 _b를 인자로 전달하세요.\n62. print_or 함수를 호출하여 _a와 _b를 인자로 전달하세요.\n63. print_xor 함수를 호출하여 _a와 _b를 인자로 전달하세요.\n64. determin_logic 함수를 호출하여 _a와 _b를 인자로 전달하세요.\n65. return 0으로 프로그램을 종료하세요.\n66. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int cnt = 0; while (N != 0) { if (N % 2) { cnt++; } N = N / 2; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하여 카운터를 선언하세요.\n5. [rep_start(1)] N이 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n6. [cond_start(2)] N을 2로 나눈 나머지가 1인지 확인하는 조건문을 작성하세요.\n7. N이 홀수라면 cnt를 1 증가시키세요.\n8. [cond_end(2)]\n9. N을 2로 나누어 업데이트합니다.\n10. [rep_end(1)]\n11. cnt를 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ unsigned int n; scanf(\"%u\",&n); int cnt=0; while(n!=0){ if(n&1) cnt++; n=n>>1; } printf(\"%d\",cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. n에 대해 사용자로부터 입력을 받으세요.  \n4. int형 변수 cnt를 0으로 초기화하세요.  \n5. [rep_start(1)] n이 0이 아닐 동안 반복하는 while 루프를 작성하세요.  \n6. [cond_start(2)] n의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.  \n7. n의 최하위 비트가 1이라면 cnt를 1 증가시키세요.  \n8. [cond_end(2)]  \n9. n을 오른쪽으로 1비트 이동하세요.  \n10. [rep_end(1)]  \n11. cnt의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int N; scanf(\"%u\", &N); int A[32] = { 0 }; int B[4] = { 0 }; for (int i = 0; i < 32; i++) { if (N & ~1 != N) { A[31 - i] = 1; } else { A[31 - i] = 0; } N = N >> 1; } for (int i = 0; i < 4; i++) { for (int j = 0; j < 8; j++) { if (A[8*i+j] == 1) { B[i]++; } } } for (int i = 0; i < 4; i++) { printf(\"%d \", B[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 배열 A를 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.  \n5. int형 배열 B를 크기 4로 선언하고 모든 요소를 0으로 초기화하세요.  \n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] N의 마지막 비트가 1인지 확인하고, N의 최상위 비트를 바탕으로 A 배열의 값을 설정하는 조건문을 작성하세요.  \n8. N의 가장 오른쪽 비트를 반전하여 N과 비교합니다.  \n9. N의 맨 비트가 1이라면 A[31 - i]를 1로 설정하세요.  \n10. 그렇지 않다면 A[31 - i]를 0으로 설정하세요.  \n11. N을 오른쪽으로 1비트 시프트합니다.  \n12. [cond_end(2)]  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.  \n15. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n16. [cond_start(3)] A 배열의 해당 비트가 1인지 확인하는 조건문을 작성하세요.  \n17. A[8*i+j]가 1이라면 B[i]를 증가시켜줍니다.  \n18. [cond_end(3)]  \n19. [rep_end(2)]  \n20. [rep_end(1)]  \n21. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.  \n22. B[i]를 출력하세요.  \n23. [rep_end(1)]  \n24. return 0;으로 프로그램을 종료하세요.  \n25. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned a,b; scanf(\"%u %u\", &a, &b); int c = 0; for (int i = 1; i < 100; i++) { for (int j = 1; j < 100; j++) { if (a >= b) { if (b * j == a * i) { printf(\"%u\", b * j); c++; break; } if (c != 0) { break; } } else { if (a * j == b * i) { printf(\"%u\", a * j); c++; break; } if (c != 0) { break; } } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned형 변수 a와 b를 선언하세요.\n3. a와 b에 입력을 받으세요.\n4. int형 변수 c를 0으로 초기화하세요.\n5. [rep_start(1)] i를 1부터 99까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 1부터 99까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(3)] a가 b보다 크거나 같은지 확인하는 조건문을 작성하세요.\n8. [cond_start(4)] b * j가 a * i와 같은지 확인하는 조건문을 작성하세요.\n9. b * j가 a * i와 같다면 그 값을 출력하세요.\n10. c를 1 증가시키세요.\n11. [cond_end(4)]\n12. [cond_start(4)] c가 0이 아니면 반복문을 종료하기 위한 조건문을 작성하세요.\n13. b와 a의 조건을 반대로 설정하세요.\n14. [cond_start(4)] a * j가 b * i와 같은지 확인하는 조건문을 작성하세요.\n15. a * j가 b * i와 같다면 그 값을 출력하세요.\n16. c를 1 증가시키세요.\n17. [cond_end(4)]\n18. [cond_start(4)] c가 0이 아니면 반복문을 종료하기 위한 조건문을 작성하세요.\n19. [cond_end(3)]\n20. [rep_end(2)]\n21. [rep_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a = 0; scanf(\"%X\", &a); unsigned int b = 0xFF; for (int i = 0; i < 4; i++) { printf(\"%X \", a & b); a = a / 256; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 16진수 입력을 받으세요.\n4. unsigned int형 변수 b를 0xFF로 초기화하세요.\n5. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n6. a와 b의 AND 연산 결과를 16진수 형식으로 출력하세요.\n7. a를 256으로 나누어 다음 반복을 준비하세요.\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char A[32]; for (int i = 0; i < 32; i++) { scanf(\"%c\", &A[i]); } int cnt = 0; for (int i = 0; i < 32; i++) { if (A[i] - '0' == 1) { printf(\"0\"); cnt++; } else { printf(\"1\"); } } printf(\"\\n\"); if (cnt) { printf(\"0\"); } else { printf(\"1\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 A를 32개의 요소로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. A 배열에 i번째 문자를 입력받아 저장하세요.\n5. [rep_end(1)]\n6. int형 변수 cnt를 0으로 초기화하세요.\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A[i]에서 '0'을 빼서 1인지 확인하는 조건문을 작성하세요.\n9. A[i]가 1이라면 \"0\"을 출력하고, cnt를 1 증가시키세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A[i]가 1이 아닐 경우의 조건문을 작성하세요.\n12. \"1\"을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. 줄 바꿈을 위해 \"\\n\"을 출력하세요.\n16. [cond_start(1)] cnt가 0이 아닌지 확인하는 조건문을 작성하세요.\n17. cnt가 0이 아니면 \"0\"을 출력하세요.\n18. [cond_end(1)]\n19. [cond_start(1)] cnt가 0일 경우의 조건문을 작성하세요.\n20. cnt가 0이면 \"1\"을 출력하세요.\n21. [cond_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { unsigned int n; int arr_int; scanf(\"%X\", &n); for (int i = 0; i < 4; i++) { printf(\"%X \", n & 0xff); n = n >> 8; } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 arr_int를 선언하세요.\n4. n에 16진수 형식으로 입력을 받으세요.\n5. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n6. n의 하위 8비트를 16진수 형식으로 출력하세요. (n & 0xff)\n7. n을 오른쪽으로 8비트 시프트 하여 n의 값을 갱신하세요.\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int A, B; unsigned int ans = 0; scanf(\"%u %u\", &A, &B); for (int i = 10000; i > 0; i--) { if (i % A == 0 && i % B == 0) { ans = i; } } if(ans>0) printf(\"%u\", ans); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 무부호 정수형 변수 A와 B를 선언하세요.\n3. 무부호 정수형 변수 ans를 0으로 초기화하세요.\n4. A와 B에 입력을 받으세요.\n5. [rep_start(1)] i를 10000부터 1까지 감소하며 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] i가 A와 B의 공통 배수인지 확인하는 조건문을 작성하세요.\n7. i가 A와 B의 공통 배수라면 ans에 i를 저장하세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. [cond_start(1)] ans가 0보다 큰지 확인하는 조건문을 작성하세요.\n11. ans가 0보다 크면 ans를 출력하세요.\n12. [cond_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int cnt = 0; while (N > 0) { if (N % 2 == 1) { cnt++; } N /= 2; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 변수 cnt를 0으로 초기화하세요.  \n5. [rep_start(1)] N이 0보다 큰 동안 반복하는 while 루프를 작성하세요.  \n6. [cond_start(2)] N이 2로 나누어 떨어지지 않는지 확인하는 조건문을 작성하세요.  \n7. N이 홀수라면 cnt를 1 증가시키세요.  \n8. [cond_end(2)]  \n9. N을 2로 나누어 업데이트하세요.  \n10. [rep_end(1)]  \n11. cnt의 값을 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; unsigned int array[10] = { 0 }; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &array[i]); } for (int j = 0; j < N; j++) { int arr[8] = { 0 }; for (int i = 0; i < 8; i++) { arr[i] = array[j] % 2; array[j] /= 2; } for (int i = 7; i >= 0; i--) { if (arr[i] == 1) { printf(\"-\"); } else printf(\"_\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. unsigned int형 배열 array를 선언하고 10개의 요소를 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. array의 i번째 요소에 대해 unsigned int형 값을 입력 받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] j를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n9. 정수형 배열 arr를 선언하고 8개의 요소를 0으로 초기화하세요.\n10. [rep_start(2)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. array[j]의 2로 나눈 나머지를 arr의 i번째 요소에 저장하세요.\n12. array[j]를 2로 나눈 결과로 업데이트하세요.\n13. [rep_end(2)]\n14. [rep_start(2)] i를 7로 초기화하여 7부터 0까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(3)] arr의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n16. arr[i]가 1이면 \"-\"를 출력하세요.\n17. arr[i]가 1이 아니면 \"_\"를 출력하세요.\n18. [cond_end(3)]\n19. [rep_end(2)]\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a = 0; scanf(\"%u\", &a); int cnt = 0; int b[32] = { 0 }; for (int i = 0; i < 32; i++) { b[i] = a % 2; a = a / 2; } for (int i = 0; i < 32; i++) { if (b[i] == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하세요.\n5. int형 배열 b를 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n7. b[i]에 a를 2로 나눈 나머지를 저장하세요.\n8. a를 2로 나눈 몫으로 업데이트하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] b[i]가 1인지 확인하는 조건문을 작성하세요.\n12. b[i]가 1이라면 cnt를 1 증가시키세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. cnt의 값을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "char convert_to_qwerty(char digit) { switch (digit) { case '0': return 'p'; case '1': return 'q'; case '2': return 'w'; case '3': return 'e'; case '4': return 'r'; case '5': return 't'; case '6': return 'y'; case '7': return 'u'; case '8': return 'i'; case '9': return 'o'; default: return '\\0'; } } int main() { char n[101]; scanf(\"%s\", n); for (int i = 0; n[i] !='\\0'; i++) { char result = convert_to_qwerty(n[i]); if (result != '\\0') { printf(\"%c\", result); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] char 반환형 함수 convert_to_qwerty를 정의하세요. (매개변수: char digit)\n2. [rep_start(1)] digit 값을 검사하기 위한 switch 문을 시작하세요.\n3. [cond_start(2)] digit이 '0'인지 확인하는 경우를 작성하세요.\n4. '0'일 경우 'p'를 반환하세요.\n5. [cond_end(2)]\n6. [cond_start(2)] digit이 '1'인지 확인하는 경우를 작성하세요.\n7. '1'일 경우 'q'를 반환하세요.\n8. [cond_end(2)]\n9. [cond_start(2)] digit이 '2'인지 확인하는 경우를 작성하세요.\n10. '2'일 경우 'w'를 반환하세요.\n11. [cond_end(2)]\n12. [cond_start(2)] digit이 '3'인지 확인하는 경우를 작성하세요.\n13. '3'일 경우 'e'를 반환하세요.\n14. [cond_end(2)]\n15. [cond_start(2)] digit이 '4'인지 확인하는 경우를 작성하세요.\n16. '4'일 경우 'r'을 반환하세요.\n17. [cond_end(2)]\n18. [cond_start(2)] digit이 '5'인지 확인하는 경우를 작성하세요.\n19. '5'일 경우 't'를 반환하세요.\n20. [cond_end(2)]\n21. [cond_start(2)] digit이 '6'인지 확인하는 경우를 작성하세요.\n22. '6'일 경우 'y'를 반환하세요.\n23. [cond_end(2)]\n24. [cond_start(2)] digit이 '7'인지 확인하는 경우를 작성하세요.\n25. '7'일 경우 'u'를 반환하세요.\n26. [cond_end(2)]\n27. [cond_start(2)] digit이 '8'인지 확인하는 경우를 작성하세요.\n28. '8'일 경우 'i'를 반환하세요.\n29. [cond_end(2)]\n30. [cond_start(2)] digit이 '9'인지 확인하는 경우를 작성하세요.\n31. '9'일 경우 'o'를 반환하세요.\n32. [cond_end(2)]\n33. [cond_start(2)] 위의 경우에 해당하지 않는 default 문을 작성하세요.\n34. 잘못된 경우에는 '\\0'을 반환하세요.\n35. [cond_end(2)]\n36. [rep_end(1)]\n37. [func_def_end(1)]\n38. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n39. char형 배열 n을 선언하여 최대 100개의 문자를 저장할 수 있도록 합니다.\n40. n에 대한 문자열 입력을 받으세요.\n41. [rep_start(1)] i를 선언하여 n의 끝(문자열이 '\\0'이 아닐 때)까지 반복하는 for 루프를 작성하세요.\n42. convert_to_qwerty 함수를 통해 n[i]의 qwerty 문자 변환 결과를 result에 저장하세요.\n43. [cond_start(2)] result가 '\\0'이 아닌지 확인하는 조건문을 작성하세요.\n44. result가 유효하다면, 해당 문자를 출력하세요.\n45. [cond_end(2)]\n46. [rep_end(1)]\n47. return 0;으로 프로그램을 종료하세요.\n48. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int A; int B; scanf(\"%d %d\", &A, &B); for (int i = 1; 1; i++) { for (int j = 1; 1; j++) { if ((A * j) < (B * i)) { continue; } else if ((A * j) > (B * i)) { break; } else{ printf(\"%d\", A * j); return 0; } } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A와 B를 선언하세요.\n3. A와 B에 입력을 받으세요.\n4. [rep_start(1)] i를 1로 초기화하고 무한 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 1로 초기화하고 무한 반복하는 for 루프를 작성하세요.\n6. [cond_start(3)] (A * j)가 (B * i)보다 작은지 확인하는 조건문을 작성하세요.\n7. (A * j)가 (B * i)보다 작다면 다음 반복으로 넘어가세요.\n8. [cond_end(3)]\n9. [cond_start(3)] (A * j)가 (B * i)보다 큰지 확인하는 조건문을 작성하세요.\n10. (A * j)가 (B * i)보다 크다면 반복문을 종료하세요.\n11. [cond_end(3)]\n12. (A * j)가 (B * i)와 같다면 해당 값을 출력하고 프로그램을 종료하세요.\n13. [rep_end(2)]\n14. [rep_end(1)]\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char S[100] = { 0 }; char W[100] = { 0 }; int cnt = 0; int cnt1 = 0; int k = 0; gets(S); gets(W); while (W[k] != '\\0') { k++; } for (int i = 0; S[i] != '\\0'; i++) { cnt = 0; if (W[0] == S[i]) { for (int j = 0; W[j] != '\\0'; j++) { if (W[j] == S[i + j]) cnt++; else break; } if (cnt == k) { cnt1++; } } } printf(\"%d\", cnt1); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 S와 W를 각각 100크기로 선언하고 초기화하세요.  \n3. 정수형 변수 cnt, cnt1, k를 0으로 초기화하세요.  \n4. S에 사용자 입력을 받으세요.  \n5. W에 사용자 입력을 받으세요.  \n6. [rep_start(1)] W의 길이를 계산하기 위해 k가 W의 문자열 끝까지 반복하는 while 루프를 작성하세요.  \n7. k를 1 증가시키세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] S의 각 문자를 통해 반복하는 for 루프를 작성하세요.  \n10. cnt를 0으로 초기화하세요.  \n11. [cond_start(2)] S의 현재 문자가 W의 첫 번째 문자와 같은지 확인하세요.  \n12. [cond_start(3)] W의 길이만큼 S의 문자를 비교하기 위한 for 루프를 작성하세요.  \n13. [cond_start(4)] S의 현재 위치에서 W의 문자가 일치하는지 확인하세요.  \n14. cnt를 1 증가시키세요.  \n15. [cond_end(4)]  \n16. W의 현재 문자와 S의 비교 위치 문자가 다르면 루프를 종료하세요.  \n17. [cond_end(3)]  \n18. [cond_start(2)] cnt가 k와 같은지 확인하여 W가 S에 등장했는지 확인하세요.  \n19. cnt1을 1 증가시키세요.  \n20. [cond_end(2)]  \n21. [rep_end(1)]  \n22. S에서 W가 등장한 횟수를 cnt1으로 출력하세요.  \n23. return 0;으로 프로그램을 종료하세요.  \n24. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; int count = 0; scanf(\"%u\", &n); for (; n;n>>=1) { count += n & 1; } printf(\"%d\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int 타입의 변수 n을 선언하세요.  \n3. 정수형 변수 count를 0으로 초기화하여 선언하세요.  \n4. n에 대한 값을 입력받기 위해 scanf를 호출하세요.  \n5. [rep_start(1)] n이 0이 아닐 때까지 반복하는 for 루프를 작성하세요.  \n6. n의 가장 오른쪽 비트(1 또는 0)를 확인하기 위해 n과 1의 비트 AND 연산을 수행하고, count에 추가하세요.  \n7. n을 오른쪽으로 한 비트 이동시켜 다음 비트를 확인할 수 있도록 합니다.  \n8. [rep_end(1)]  \n9. count의 값을 출력하세요.  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main(){ char S[100]; char W[100]; gets(S); gets(W); int check = 0; int cnt = 0; for(int i = 0;S[i]!='\\0';i++){ for(int j = 0;W[j]!='\\0';j++){ if(S[i+j]!=W[j]){ check++; break; } } if(check!=0){ check = 0; } else{ cnt++; } } printf(\"%d\",cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 S와 W를 각각 100 크기로 선언하여 입력을 받을 준비를 하세요.\n3. S와 W에 대해 각각 입력을 받기 위해 gets 함수를 사용하세요.\n4. int형 변수 check를 0으로 초기화하여 비교 체크용 카운터를 설정하세요.\n5. int형 변수 cnt를 0으로 초기화하여 일치하는 문자열의 카운트를 설정하세요.\n6. [rep_start(1)] S 문자열의 각 문자를 탐색하기 위한 반복문을 작성하세요. (조건: S[i]가 널 문자('\\0')가 아닐 때까지)\n7. [rep_start(2)] W 문자열의 각 문자를 탐색하기 위한 반복문을 작성하세요. (조건: W[j]가 널 문자('\\0')가 아닐 때까지)\n8. [cond_start(3)] S의 현재 문자와 W의 현재 문자를 비교하는 조건문을 작성하세요.\n9. S[i+j]와 W[j]가 다르면 check를 증가시키고 반복문을 종료하세요.\n10. [cond_end(3)]\n11. [cond_start(2)] check가 0이 아닌지를 확인하는 조건문을 작성하세요. (즉, 일치하지 않는 경우)\n12. 일치하지 않았다면 check를 0으로 초기화하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] check가 0인 경우(즉, 일치하는 경우) cnt를 증가시키세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. cnt의 값을 출력하여 전체 일치 개수를 보여주세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%X\", &N); int x = 0xFF; for (int i = 0; i < 4; i++) { printf(\"%X \", x & N); N /= 256; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 16진수 형식으로 입력을 받으세요.\n4. int형 변수 x를 0xFF로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n6. N과 x의 비트 AND 연산 결과를 16진수 형식으로 출력하세요.\n7. N을 256으로 나누어 다음 반복을 준비하세요.\n8. [rep_end(1)]\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char arr[33]; scanf(\"%32s\", arr); for (int i = 0; i < 32; i++) { if (arr[i] == '1') { printf(\"0\"); } else { printf(\"1\"); } } printf(\"\\n\"); unsigned int n = 0; for (int i = 0; i < 32; i++) { n = n << 1; if (arr[i] == '1') { n |= 1; } } printf(\"%u\", !n); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 arr을 크기 33으로 선언하세요.\n3. scanf를 사용하여 최대 32개의 문자를 arr 배열에 입력받으세요.\n4. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] arr[i]가 '1'인지 확인하는 조건문을 작성하세요.\n6. arr[i]가 '1'이라면 \"0\"을 출력하세요.\n7. [cond_end(2)]\n8. 그렇지 않으면 \"1\"을 출력하세요.\n9. [rep_end(1)]\n10. 줄 바꿈을 위한 printf(\"\\n\")을 호출하세요.\n11. unsigned int형 변수 n을 0으로 초기화하세요.\n12. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n13. n을 왼쪽으로 한 비트 이동하세요.\n14. [cond_start(2)] arr[i]가 '1'인지 확인하는 조건문을 작성하세요.\n15. arr[i]가 '1'이라면 n의 최하위 비트에 1을 설정하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. n이 0이 아닐 때 0을 출력하는 printf(\"%u\", !n) 호출하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a; unsigned int c[100] = { 0 }; int b = 0; scanf(\"%u\", &a); for (int i = 0; i < 100; i++) { c[i] = a % 2; a = a / 2; } for (int i = 0; i < 100; i++) { if (c[i] == 1) { b++; } } printf(\"%d\", b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. unsigned int형 배열 c를 100개의 요소로 선언하고 0으로 초기화하세요.\n4. int형 변수 b를 0으로 초기화하세요.\n5. a에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n7. c[i]에 a를 2로 나눈 나머지를 저장하세요.\n8. a를 2로 나눈 결과로 업데이트하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] c[i]가 1인지 확인하는 조건문을 작성하세요.\n12. c[i]가 1이라면 b를 1 증가시키세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. b의 값을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int a = 0; int b = 0; scanf(\"%d\", &a); scanf(\"%d\", &b); int min = 0; int max = 0; int real_min = 0; if (a == b) { real_min = a; } else if (a == 1 && b == 1) { real_min = 1; } else if (a > b) { min = b; max = a; for (int i = min; i <= a*b; i++) { if (i % a == 0 && i % b == 0) { real_min = i; break; } } } else if (a < b) { min = a; max = b; for (int i = min; i <= a*b; i++) { if (i % a == 0 && i % b == 0) { real_min = i; break; } } } printf(\"%d\", real_min); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a와 b를 0으로 초기화하여 선언하세요.\n3. a에 대한 입력을 받으세요.\n4. b에 대한 입력을 받으세요.\n5. 정수형 변수 min, max, real_min을 0으로 초기화하여 선언하세요.\n6. [cond_start(1)] a와 b가 같은지 확인하는 조건문을 작성하세요.\n7. a와 b가 같다면 real_min에 a의 값을 저장하세요.\n8. [cond_end(1)]\n9. [cond_start(1)] a가 1이고 b도 1인지 확인하는 조건문을 작성하세요.\n10. a와 b가 모두 1이라면 real_min에 1을 저장하세요.\n11. [cond_end(1)]\n12. [cond_start(1)] a가 b보다 큰지 확인하는 조건문을 작성하세요.\n13. a가 b보다 크다면 min에 b를, max에 a를 저장하세요.\n14. [rep_start(1)] i를 선언하여 min부터 a*b까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(2)] i가 a와 b의 공배수인지 확인하는 조건문을 작성하세요.\n16. i가 a와 b의 공배수라면 real_min에 i를 저장하고 루프를 종료하세요.\n17. [cond_end(2)]\n18. [rep_end(1)]\n19. [cond_end(1)]\n20. [cond_start(1)] a가 b보다 작은지 확인하는 조건문을 작성하세요.\n21. a가 b보다 작다면 min에 a를, max에 b를 저장하세요.\n22. [rep_start(1)] i를 선언하여 min부터 a*b까지 반복하는 for 루프를 작성하세요.\n23. [cond_start(2)] i가 a와 b의 공배수인지 확인하는 조건문을 작성하세요.\n24. i가 a와 b의 공배수라면 real_min에 i를 저장하고 루프를 종료하세요.\n25. [cond_end(2)]\n26. [rep_end(1)]\n27. [cond_end(1)]\n28. real_min의 값을 출력하세요.\n29. return 0;으로 프로그램을 종료하세요.\n30. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n = 0; scanf(\"%d\", &n); unsigned int arr[256] = { 0 }; for (int i = 0; i < n; i++) { scanf(\"%u\", &arr[i]); } for (int j = 0; j < n; j++) { for (int z = 7; z >= 0; z--) { if ((arr[j] >> z) & 1) { printf(\"-\"); } else { printf(\"_\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화합니다.\n3. n에 사용자로부터 입력을 받습니다.\n4. unsigned int형 배열 arr을 선언하고 256개의 요소를 0으로 초기화합니다.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 arr의 i번째 요소에 사용자로부터 입력을 받습니다.\n7. [rep_end(1)]\n8. [rep_start(1)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] z를 선언해 7부터 0까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] arr[j]의 z번째 비트가 1인지 확인하는 조건문을 작성하세요.\n11. z번째 비트가 1이라면 \"-\"를 출력하세요.\n12. [cond_end(3)]\n13. z번째 비트가 0이라면 \"_\"를 출력하세요.\n14. [rep_end(2)]\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); int count = 0; while (N > 0) { count += (N & 1); N >>= 1; } printf(\"%d\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 변수 count를 0으로 초기화하세요.  \n5. [rep_start(1)] N이 0보다 큰 동안 반복하는 while 루프를 작성하세요.  \n6. count에 N의 최하위 비트가 1인지 확인한 후 추가하세요. (비트 연산: N & 1)  \n7. N을 오른쪽으로 한 비트 시프트하세요. (N >>= 1)  \n8. [rep_end(1)]  \n9. count의 값을 출력하세요.  \n10. return 0;으로 프로그램을 종료하세요.  \n11. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char binary[33]; scanf(\"%32s\", binary); for (int i = 0; i < 32; i++) { putchar(binary[i] == '0' ? '1' : '0'); } putchar('\\n'); int result = 1; for (int i = 0; i < 32; i++) { if (binary[i] == '1') { result = 0; break; } } printf(\"%d\\n\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 33크기의 char 배열 binary를 선언하세요.\n3. binary 배열에 최대 32개의 문자를 입력받으세요.\n4. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] binary[i]가 '0'인지 확인하는 조건문을 작성하세요.\n6. binary[i]가 '0'이라면 '1'을 출력하세요.\n7. [cond_end(2)]\n8. 그렇지 않으면 '0'을 출력하세요.\n9. [rep_end(1)]\n10. 줄 바꿈을 출력하세요.\n11. 정수형 변수 result를 1로 초기화하세요.\n12. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] binary[i]가 '1'인지 확인하는 조건문을 작성하세요.\n14. binary[i]가 '1'이라면 result를 0으로 설정하세요.\n15. 반복문을 종료하기 위해 break를 사용하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. result의 값을 출력하세요.\n19. 줄 바꿈을 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { char A[33] = { 0 }; char B[33] = { 0 }; int and = 0; int or = 0; gets(A); gets(B); for (int i = 0; i < 32; i++) { A[i] = A[i] - 48; B[i] = B[i] - 48; } for (int i = 0; i < 32; i++) { if (A[i] == 1 && B[i] == 1) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (A[i] == 1 || B[i] == 1) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if ((A[i] == 1 && B[i] == 0) || (A[i] == 0 && B[i] == 1)) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (A[i] == 1) { for (int j = 0; j < 32; j++) { if (B[j] == 1) { and = 1; } } } } printf(\"%d\\n\", and); for (int i = 0; i < 32; i++) { if (A[i] == 1 || B[i] == 1) { printf(\"1\"); return 0; } } printf(\"0\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 A와 B를 선언하고, 각각 33개의 요소를 0으로 초기화하세요.\n3. int형 변수 and를 0으로 초기화하세요.\n4. int형 변수 or를 0으로 초기화하세요.\n5. A에 문자열을 입력받으세요.\n6. B에 문자열을 입력받으세요.\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. A의 i번째 요소에서 48을 빼고, B의 i번째 요소에서도 48을 빼세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] A의 i번째 요소와 B의 i번째 요소가 모두 1인지 확인하는 조건문을 작성하세요.\n12. 두 값이 모두 1이라면 1을 출력하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] 두 값이 모두 1이 아니라면 0을 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. A와 B에 대한 계산을 끝낸 후 줄 바꿈을 출력하세요.\n18. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n19. [cond_start(2)] A의 i번째 요소가 1이거나 B의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n20. 조건이 참이라면 1을 출력하세요.\n21. [cond_end(2)]\n22. [cond_start(2)] 두 값 모두 아닐 경우 0을 출력하세요.\n23. [cond_end(2)]\n24. [rep_end(1)]\n25. A와 B에 대한 계산을 끝낸 후 줄 바꿈을 출력하세요.\n26. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n27. [cond_start(2)] A의 i번째 요소가 1이고 B의 i번째 요소가 0이거나, A의 i번째 요소가 0이고 B의 i번째 요소가 1인 경우를 확인하는 조건문을 작성하세요.\n28. 조건이 참이라면 1을 출력하세요.\n29. [cond_end(2)]\n30. [cond_start(2)] 그렇지 않으면 0을 출력하세요.\n31. [cond_end(2)]\n32. [rep_end(1)]\n33. A에서 1이 있는지 확인하기 위해 반복문을 작성세요.\n34. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n35. [cond_start(2)] A의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n36. A의 i번째 요소가 1이라면, [rep_start(2)] j를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n37. B의 j번째 요소가 1인지 확인하는 조건문을 작성하세요.\n38. B의 j번째 요소가 1이라면 and를 1로 설정하세요.\n39. [rep_end(2)]\n40. [cond_end(2)]\n41. [rep_end(1)]\n42. A와 B에 대한 계산 후 and 값을 출력하세요.\n43. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n44. [cond_start(2)] A의 i번째 요소가 1이거나 B의 i번째 요소가 1인 경우를 확인하는 조건문을 작성하세요.\n45. 조건이 참이라면 1을 출력하고 return 0;으로 함수 종료하세요.\n46. [cond_end(2)]\n47. 0을 출력하세요.\n48. [cond_end(1)]\n49. return 0;으로 프로그램을 종료하세요.\n50. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { int A[32]; for (int i = 0; i < 32; i++) { scanf(\"%1d\", &A[i]); } int cnt = 0; for (int i = 0; i < 32; i++) { if (A[i] == 1) { cnt = cnt + 1; printf(\"%d\", 0); } else { printf(\"%d\", 1); } } printf(\"\\n\"); if (cnt == 0) { printf(\"1\"); } else { printf(\"0\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 A를 크기 32로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. A 배열의 각 요소에 대해 1자리 정수를 입력받으세요.\n5. [rep_end(1)]\n6. int형 변수 cnt를 0으로 초기화하세요.\n7. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A 배열의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n9. A[i]가 1이라면 cnt를 1 증가시키고 0을 출력하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A[i]가 1이 아닐 경우를 처리하는 조건문을 작성하세요.\n12. 1이 아닐 경우 1을 출력하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. printf(\"\\n\");로 줄 바꿈을 하세요.\n16. [cond_start(1)] cnt가 0인지 확인하는 조건문을 작성하세요.\n17. cnt가 0이라면 1을 출력하세요.\n18. [cond_end(1)]\n19. [cond_start(1)] cnt가 0이 아닐 경우를 처리하는 조건문을 작성하세요.\n20. cnt가 0이 아닐 경우 0을 출력하세요.\n21. [cond_end(1)]\n22. return 0;으로 프로그램을 종료하세요.\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A_1[32] = { 0 }; unsigned int B_1[32] = { 0 }; unsigned int C_1[32] = { 0 }; int a = 0; int b = 0; for (int i = 0; i < 32; i++) { scanf(\"%1u\", &A_1[i]); } for (int i = 0; i < 32; i++) { scanf(\"%1u\", &B_1[i]); } for (int i = 0; i < 32; i++) { C_1[i] = A_1[i] & B_1[i]; } for (int i = 0; i < 32; i++) { printf(\"%u\", C_1[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { C_1[i] = A_1[i] | B_1[i]; } for (int i = 0; i < 32; i++) { printf(\"%u\", C_1[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { C_1[i] = A_1[i] ^ B_1[i]; } for (int i = 0; i < 32; i++) { printf(\"%u\", C_1[i]); } printf(\"\\n\"); for (int i = 0; i < 32; i++) { if (A_1[i] == 1) { a = 1; break; } } for (int i = 0; i < 32; i++) { if (B_1[i] == 1) { b = 1; break; } } printf(\"%d\\n\", a && b); printf(\"%d\\n\", a || b); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 배열 A_1을 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.  \n3. unsigned int형 배열 B_1을 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.  \n4. unsigned int형 배열 C_1을 크기 32로 선언하고 모든 요소를 0으로 초기화하세요.  \n5. int형 변수 a와 b를 0으로 초기화하세요.  \n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n7. A_1 배열의 각 요소에 대해 1자리의 unsigned 정수 입력을 받으세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n10. B_1 배열의 각 요소에 대해 1자리의 unsigned 정수 입력을 받으세요.  \n11. [rep_end(1)]  \n12. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n13. C_1 배열의 각 요소에 대해 A_1과 B_1의 비트 AND 연산을 수행하여 저장하세요.  \n14. [rep_end(1)]  \n15. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n16. C_1 배열의 각 요소를 출력하세요.  \n17. [rep_end(1)]  \n18. 줄바꿈을 출력하세요.  \n19. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n20. C_1 배열의 각 요소에 대해 A_1과 B_1의 비트 OR 연산을 수행하여 저장하세요.  \n21. [rep_end(1)]  \n22. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n23. C_1 배열의 각 요소를 출력하세요.  \n24. [rep_end(1)]  \n25. 줄바꿈을 출력하세요.  \n26. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n27. C_1 배열의 각 요소에 대해 A_1과 B_1의 비트 XOR 연산을 수행하여 저장하세요.  \n28. [rep_end(1)]  \n29. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n30. C_1 배열의 각 요소를 출력하세요.  \n31. [rep_end(1)]  \n32. 줄바꿈을 출력하세요.  \n33. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n34. A_1의 각 요소가 1인지 확인하여 a를 1로 설정하고 루프를 종료하세요.  \n35. [rep_end(1)]  \n36. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.  \n37. B_1의 각 요소가 1인지 확인하여 b를 1로 설정하고 루프를 종료하세요.  \n38. [rep_end(1)]  \n39. a와 b의 논리 AND 결과를 출력하세요.  \n40. a와 b의 논리 OR 결과를 출력하세요.  \n41. return 0;으로 프로그램을 종료하세요.  \n42. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int countBits(unsigned int n) { int count = 0; for (; n; n >>= 1) { count += n & 1; } return count; } int main() { unsigned int num; scanf(\"%u\", &num); printf(\"%d\\n\", countBits(num)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 함수 countBits를 정의하세요. (매개변수: unsigned int n)\n2. int형 변수 count를 0으로 초기화하여 비트 수를 셉니다.\n3. [rep_start(1)] n이 0이 아닌 동안 반복하는 루프를 시작합니다.\n4. count에 n의 최하위 비트가 1인지 확인하여 더하세요.\n5. n을 오른쪽으로 한 비트 시프트하여 다음 비트로 이동합니다.\n6. [rep_end(1)]\n7. count의 값을 반환하여 1의 개수를 반환합니다.\n8. [func_def_end(1)]\n9. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n10. unsigned int형 변수 num을 선언하세요.\n11. num에 대한 입력을 받으세요.\n12. countBits 함수를 호출하여 num의 비트 수를 계산하고 출력하세요.\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; int cnt = 0; unsigned int shift = 1; scanf(\"%u\", &n); for (int i = 0; i < 32; i++) { if (n & shift) { cnt++; } shift = shift << 1; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 n을 선언하세요.  \n3. 소수의 개수를 셀 int형 변수 cnt를 0으로 초기화하세요.  \n4. unsigned int형 변수 shift를 1로 초기화하세요.  \n5. n에 대한 입력을 받으세요.  \n6. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.  \n7. [cond_start(2)] n이 shift와 비트 AND 연산을 통해 특정 비트를 확인하는 조건문을 작성하세요.  \n8. 해당 비트가 1이라면 cnt를 1 증가시키세요.  \n9. [cond_end(2)]  \n10. shift 값을 왼쪽으로 1만큼 시프트하세요.  \n11. [rep_end(1)]  \n12. cnt의 값을 출력하세요.  \n13. return 0;으로 프로그램을 종료하세요.  \n14. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; unsigned char a[10]; unsigned int shift; scanf(\"%u\", &n); for (int i = 0; i < n; i++) { scanf(\"%u\", &a[i]); } for (int i = 0; i < n; i++) { shift = 1 << 7; for (int j = 0; j < 8; j++) { if (a[i] & shift) { printf(\"-\"); } else { printf(\"_\"); } shift = shift >> 1; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 변수 n을 선언하세요.\n3. unsigned char형 배열 a를 10개의 원소로 선언하세요.\n4. unsigned int 형 변수 shift를 선언하세요.\n5. n의 값을 입력받기 위한 scanf 함수를 호출하세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. i번째 원소 a[i]에 대한 값을 입력받기 위한 scanf 함수를 호출하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. shift를 1을 왼쪽으로 7 비트 시프트하여 초기화하세요.\n11. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] a[i]와 shift의 비트 AND 연산 결과가 있는지 확인하는 조건문을 작성하세요.\n13. 비트가 1이면 '-'를 출력하세요.\n14. [cond_end(2)]\n15. [cond_start(2)] 비트가 0일 경우 '_'를 출력하세요.\n16. [cond_end(2)]\n17. shift를 1 비트를 오른쪽으로 시프트하세요.\n18. [rep_end(2)]\n19. [rep_end(1)]\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void printBinary(unsigned int n) { for (int i = 31; i >= 0; i--) { printf(\"%d\", (n >> i) & 1); } printf(\"\\n\"); } int main() { unsigned int num = 0; char ch; for (int i = 0; i < 32; i++) { scanf(\" %c\", &ch); num = (num << 1) | (ch - '0'); } printBinary(~num); printf(\"%d\\n\", !num); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 printBinary을 정의하세요. (매개변수: unsigned int n)\n2. [rep_start(1)] i를 선언해 31부터 0까지 반복하는 for 루프를 작성하세요.\n3. n의 i번째 비트를 출력하세요. (n >> i & 1)\n4. [rep_end(1)]\n5. 다음 줄에 개행을 출력하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int형 변수 num을 0으로 초기화하세요.\n9. char형 변수 ch를 선언하세요.\n10. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. %c 형식으로 ch에 입력을 받으세요. (입력 전 공백을 건너뜁니다.)\n12. num에 ch의 값을 이진수로 변환하여 설정하세요. (num = (num << 1) | (ch - '0'))\n13. [rep_end(1)]\n14. printBinary 함수를 호출하여 ~num의 이진수 표현을 출력하세요.\n15. num이 0이 아니면 0이 아닌 값을 출력하세요. (!num)\n16. 다음 줄에 개행을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int N; int A[11]; int B[8]; scanf(\"%d\",&N); for(int i=0;i<N;i++){ scanf(\"%d \",&A[i]); } for(int i=0;i<N;i++){ for(int j=0;j<8;j++){ B[7-j] = A[i]%2; A[i] = A[i]/2; } for(int j=0;j<8;j++){ if(B[j] == 1){ printf(\"-\"); } else{ printf(\"_\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 크기가 11인 정수형 배열 A를 선언하세요.\n4. 크기가 8인 정수형 배열 B를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. A[i]에 정수를 입력받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. B[7-j]에 A[i]를 2로 나눈 나머지를 저장하세요. \n12. A[i]를 2로 나누어 업데이트하세요.\n13. [rep_end(2)]\n14. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(3)] B[j]가 1인지 확인하는 조건문을 작성하세요.\n16. B[j]가 1이면 \"-\"를 출력하세요.\n17. [cond_end(3)]\n18. [cond_start(3)] 그렇지 않으면 0인 경우를 처리하는 조건문을 작성하세요.\n19. B[j]가 0이면 \"_\"를 출력하세요.\n20. [cond_end(3)]\n21. [rep_end(2)]\n22. [rep_end(1)]\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { char A[33]; scanf(\"%32s\", A); unsigned int a = 0; for (int i = 0; i < 32; i++) { a = (a << 1) + (A[i] - '0'); } unsigned int a_1 = ~a; for (int i = 31; i >= 0; i--) { printf(\"%d\", (a_1 >> i) & 1); } printf(\"\\n\"); unsigned int a_2 = !a; printf(\"%d\\n\", a_2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char 형 배열 A를 33개의 공간으로 선언하세요.\n3. A에 최대 32개의 문자를 입력받기 위해 scanf 함수를 사용하세요.\n4. unsigned int형 변수 a를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n6. 배열 A의 각 문자에서 '0'을 빼서 a에 비트를 추가하는 연산을 수행하세요.\n7. [rep_end(1)]\n8. unsigned int형 변수 a_1을 a의 비트를 반전시켜 정의하세요.\n9. [rep_start(1)] i를 31부터 0까지 반복하는 for 루프를 작성하세요.\n10. a_1의 i번째 비트를 & 연산으로 가져와 출력하세요.\n11. [rep_end(1)]\n12. 줄 바꿈을 위해 printf 함수를 호출하세요.\n13. unsigned int형 변수 a_2를 a가 0이 아닐 때는 0, 0일 때는 1로 설정하세요.\n14. a_2를 출력하세요.\n15. return 0;으로 프로그램을 종료하세요.\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void printVisualRepresentation(unsigned int n) { for (int i = 7; i >= 0; i--) { if ((n >> i) & 1) { printf(\"-\"); } else { printf(\"_\"); } } } int main() { int N; scanf(\"%d\", &N); unsigned int num; for (int i = 0; i < N; i++) { scanf(\"%u\", &num); printVisualRepresentation(num); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 printVisualRepresentation 함수를 정의합니다. (매개변수: unsigned int n)\n2. [rep_start(1)] i를 선언해 7부터 0까지 거꾸로 반복하는 for 루프를 작성합니다.\n3. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성합니다.\n4. n의 i번째 비트가 1이라면 \"-\"를 출력합니다.\n5. [cond_end(2)]\n6. [cond_start(2)] n의 i번째 비트가 0이라면 \"_\"를 출력합니다.\n7. [cond_end(2)]\n8. [rep_end(1)]\n9. [func_def_end(1)]\n10. [func_def_start(1)] 반환형이 있는 main 함수를 정의합니다. (매개변수 없음)\n11. 정수형 변수 N을 선언합니다.\n12. N에 대한 입력을 받습니다.\n13. unsigned int형 변수 num을 선언합니다.\n14. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성합니다.\n15. num에 대한 입력을 받습니다.\n16. printVisualRepresentation 함수 호출하여 num의 비트 표현을 출력합니다.\n17. [rep_end(1)]\n18. 줄 바꿈을 출력합니다.\n19. return 0;으로 프로그램을 종료합니다.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N; int cnt[4] = { 0 }; scanf(\"%u\", &N); for (int i = 3; i >= 0; i--) { for (int j = 0; j < 8; j++) { cnt[i] = cnt[i] + (N & 1); N = N >> 1; } } for (int i = 0; i < 4; i++) { printf(\"%d \", cnt[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. int형 배열 cnt를 선언하고 4개의 요소를 0으로 초기화하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 3부터 0까지 감소하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 0부터 7까지 증가하는 for 루프를 작성하세요.\n7. cnt 배열의 i번째 요소에 N의 가장 오른쪽 비트가 1인지 확인하여 더하세요.\n8. N을 오른쪽으로 1 비트 시프트 하여 다음 비트를 준비하세요.\n9. [rep_end(2)]\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 3까지 증가하는 for 루프를 작성하세요.\n12. cnt 배열의 i번째 요소를 출력하세요.\n13. [rep_end(1)]\n14. 프로그램을 종료합니다.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); unsigned int A[10]; for (int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } int arr[8] = { 0 }; int cnt = 0; int j = 0; for (int i = 0; i < N; i++) { j = 0; arr[0] = 0; arr[1] = 0; arr[2] = 0; arr[3] = 0; arr[4] = 0; arr[5] = 0; arr[6] = 0; arr[7] = 0; while (1) { if (A[i] <= 0) { break; } else { int a = A[i] % 2; A[i] = A[i] / 2; arr[7 - j] = a; j++; } } for (int i = 0; i < 8; i++) { if (arr[i] == 1)printf(\"-\"); else if (arr[i] == 0)printf(\"_\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int N이라는 변수를 선언하세요.\n3. N에 대한 값을 입력받으세요.\n4. unsigned int형 배열 A를 10개의 요소로 선언하세요.\n5. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 A의 i번째 요소에 값을 입력받으세요.\n7. [rep_end(1)]\n8. int형 배열 arr를 8개의 요소로 선언하고 모두 0으로 초기화하세요.\n9. int형 변수 cnt를 0으로 초기화하세요.\n10. int형 변수 j를 0으로 초기화하세요.\n11. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n12. j를 0으로 초기화하세요.\n13. arr의 모든 요소를 0으로 초기화하세요.\n14. [rep_start(2)] 무한 루프를 시작하세요.\n15. [cond_start(2)] A[i]가 0보다 작거나 같은지 확인하는 조건문을 작성하세요.\n16. A[i]가 0 이하라면 루프를 탈출하세요.\n17. [cond_end(2)]\n18. [cond_start(2)] A[i]의 2로 나누어지는 나머지를 a에 저장하세요.\n19. A[i]를 2로 나누어 업데이트하세요.\n20. arr에서 j번째 역순 인덱스에 a를 저장하세요.\n21. j를 증가시키세요.\n22. [rep_end(2)]\n23. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n24. [cond_start(2)] arr의 i번째 요소가 1인지 확인하세요.\n25. arr[i]가 1이라면 \"-\"를 출력하세요.\n26. [cond_else(2)] arr[i]가 0이라면 \"_\"를 출력하세요.\n27. [cond_end(2)]\n28. [rep_end(1)]\n29. return 0;으로 프로그램을 종료하세요.\n30. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void printBinary(unsigned int n) { for (int i = 31; i >= 0; i--) { printf(\"%d\", (n >> i) & 1); } printf(\"\\n\"); } int main() { unsigned int A = 0, B = 0; char ch; for (int i = 0; i < 32; i++) { scanf(\" %c\", &ch); A = (A << 1) | (ch - '0'); } for (int i = 0; i < 32; i++) { scanf(\" %c\", &ch); B = (B << 1) | (ch - '0'); } printBinary(A & B); printBinary(A | B); printBinary(A ^ B); printf(\"%d\\n\", A && B); printf(\"%d\\n\", A || B); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 printBinary를 정의하세요. (매개변수: unsigned int n)\n2. [rep_start(1)] i를 31부터 0까지 반복하는 for 루프를 작성하세요.\n3. n의 i번째 비트를 추출하여 출력하세요. (1인지 0인지 확인하기 위해 비트 시프트 및 AND 연산 사용)\n4. [rep_end(1)]\n5. 한 줄 바꿈을 출력하세요.\n6. [func_def_end(1)]\n7. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n8. unsigned int형 변수 A와 B를 0으로 초기화하며 선언하세요.\n9. char형 변수 ch를 선언하세요.\n10. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n11. 입력으로 받은 문자를 ch에 저장하세요. (공백을 무시함)\n12. A를 1비트 왼쪽으로 시프트하고(즉, 자리수를 올리며) ch의 숫자 값을 추가하여 A에 값을 저장하세요.\n13. [rep_end(1)]\n14. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n15. 입력으로 받은 문자를 ch에 저장하세요. (공백을 무시함)\n16. B를 1비트 왼쪽으로 시프트하고(즉, 자리수를 올리며) ch의 숫자 값을 추가하여 B에 값을 저장하세요.\n17. [rep_end(1)]\n18. printBinary 함수 호출하여 A와 B의 AND 연산 결과를 출력하세요.\n19. printBinary 함수 호출하여 A와 B의 OR 연산 결과를 출력하세요.\n20. printBinary 함수 호출하여 A와 B의 XOR 연산 결과를 출력하세요.\n21. A와 B가 모두 TRUE(0이 아님)일 경우 1을 출력하세요.\n22. A나 B 중 하나라도 TRUE(0이 아님)인 경우 1을 출력하세요.\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned int A[32] = { 0 }; for (int i = 0; i < 32; i++)scanf(\"%1u\", &A[i]); for (int i = 0; i < 32; i++) { if (A[i] == 1) { printf(\"0\"); } else printf(\"1\"); } printf(\"\\n\"); int zero = 0; for (int i = 0; i < 32; i++) { if (A[i] == 1) { zero = 0; break; } else zero = 1; } printf(\"%d\", zero); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A를 32개 요소로 초기화하여 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. 각 자리의 이진수를 입력받아 배열 A의 i번째 요소에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n7. [cond_start(2)] A[i]가 1인지 확인하는 조건문을 작성하세요.\n8. A[i]가 1이라면 \"0\"을 출력하세요.\n9. 그렇지 않으면 \"1\"을 출력하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. 줄바꿈을 위해 \"\\n\"을 출력하세요.\n13. 정수형 변수 zero를 0으로 초기화하세요.\n14. [rep_start(1)] i를 선언해 0부터 31까지 반복하는 for 루프를 작성하세요.\n15. [cond_start(2)] A[i]가 1인지 확인하는 조건문을 작성하세요.\n16. A[i]가 1이라면 zero를 0으로 설정하고 루프를 종료하세요.\n17. 그렇지 않으면 zero를 1로 설정하세요.\n18. [cond_end(2)]\n19. [rep_end(1)]\n20. zero의 값을 출력하세요.\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> unsigned int gcd(unsigned int a, unsigned int b) { while (b != 0) { unsigned int temp = b; b = a % b; a = temp; } return a; } unsigned int lcm(unsigned int a, unsigned int b) { return (a * b) / gcd(a, b); } int main() { unsigned int a, b; scanf(\"%u %u\", &a, &b); if (a > 100 || b > 100) return 0; unsigned int result = lcm(a, b); printf(\"%u\\n\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 gcd 함수를 정의하세요. (매개변수: unsigned int a, unsigned int b)\n2. [rep_start(1)] b가 0이 아닐 동안 반복하는 while 루프를 작성하세요.\n3. unsigned int형 변수 temp를 b로 초기화하세요.\n4. b를 a를 b로 나눈 나머지로 업데이트하세요.\n5. a를 temp로 업데이트하세요.\n6. [rep_end(1)]\n7. 계산이 끝나면 a를 반환하세요.\n8. [func_def_end(1)]\n9. [func_def_start(1)] unsigned int 반환형 lcm 함수를 정의하세요. (매개변수: unsigned int a, unsigned int b)\n10. a와 b의 곱을 gcd(a, b)로 나눈 값을 반환하세요.\n11. [func_def_end(1)]\n12. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n13. unsigned int형 변수 a와 b를 선언하세요.\n14. a와 b에 입력을 받으세요.\n15. [cond_start(1)] a가 100보다 크거나 b가 100보다 큰지 확인하는 조건문을 작성하세요.\n16. 조건이 참이라면 0을 반환하여 프로그램을 종료하세요.\n17. [cond_end(1)]\n18. unsigned int형 변수 result를 선언하고 lcm(a, b)의 결과로 초기화하세요.\n19. result를 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int countOccurrences(char* S, char* W) { int count = 0; int i, j, k; int lenS = 0, lenW = 0; while (S[lenS] != '\\0') { lenS++; } while (W[lenW] != '\\0') { lenW++; } for (i = 0; i <= lenS - lenW; i++) { for (j = 0, k = i; j < lenW && S[k] == W[j]; j++, k++); if (j == lenW) { count++; } } return count; } int main() { char S[100], W[100]; scanf(\"%s\", S); scanf(\"%s\", W); int result = countOccurrences(S, W); printf(\"%d\\n\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 함수 countOccurrences를 정의하세요. (매개변수: char* S, char* W)\n2. int형 변수 count를 0으로 초기화하세요.\n3. int형 변수 i, j, k를 선언하세요.\n4. int형 변수 lenS와 lenW를 0으로 초기화하세요.\n5. [rep_start(1)] S의 길이를 계산하는 while 루프를 작성하세요.\n6. S의 현재 문자가 널 문자가 아닐 동안 lenS를 증가시키세요.\n7. [rep_end(1)]\n8. [rep_start(1)] W의 길이를 계산하는 while 루프를 작성하세요.\n9. W의 현재 문자가 널 문자가 아닐 동안 lenW를 증가시키세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 0부터 lenS - lenW까지 반복하는 for 루프를 작성하세요.\n12. [rep_start(2)] j와 k를 초기화하여 현재 i 위치에서 W와 S의 부분 문자열을 비교하는 for 루프를 작성하세요.\n13. W의 각 문자가 S에서 일치하는지 확인하세요.\n14. [rep_end(2)]\n15. [cond_start(2)] j가 lenW와 같은지 확인하는 조건문을 작성하세요.\n16. 일치하면 count를 증가시키세요.\n17. [cond_end(2)]\n18. [rep_end(1)]\n19. count를 반환하세요.\n20. [func_def_end(1)]\n21. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n22. char형 배열 S와 W를 각각 크기 100으로 선언하세요.\n23. 문자열 S에 대한 입력을 받으세요.\n24. 문자열 W에 대한 입력을 받으세요.\n25. int형 변수 result에 countOccurrences 함수를 호출하여 반환된 값을 저장하세요.\n26. result를 출력하세요.\n27. return 0;으로 프로그램을 종료하세요.\n28. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 문자열 에 문자열 가 몇 개 존재하는 지 검사하는 프로그램을 작성하시오. 입력 설명 (문자열) : 검색을 실행할 문자열 (문자열) : 검색할 문자열 출력 설명 에 가 존재하는 개수를 출력한다. 입력 예시 복사 ababa aba 출력 예시 복사 2 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define SZ 100 int strlen(char _str[]) { int i = 0; while (_str[i] != '\\0') { i++; } return i; } int main() { unsigned char str[SZ]; unsigned char word[SZ]; gets(str); gets(word); int cnt = 0; for (int i = 0; i <= strlen(str) - strlen(word); i++) { int flag = 1; for (int j = 0; j < strlen(word); j++) { if (word[j] != str[i + j]) { flag = 0; break; } } if (flag == 1) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 함수 strlen을 정의하세요. (매개변수: char _str[])\n2. 정수형 변수 i를 0으로 초기화하세요.\n3. [rep_start(1)] _str의 끝을 찾기 위해 반복하는 while 루프를 작성하세요.\n4. _str의 i번째 문자가 널(NULL) 문자인지 확인하세요.\n5. 널 문자가 아닐 경우, i를 증가시킵니다.\n6. [rep_end(1)]\n7. _str의 길이 i를 반환하세요.\n8. [func_def_end(1)]\n9. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n10. unsigned char 배열 str을 선언하여 크기를 SZ로 지정하세요.\n11. unsigned char 배열 word를 선언하여 크기를 SZ로 지정하세요.\n12. str에 사용자 입력을 받아옵니다.\n13. word에 사용자 입력을 받아옵니다.\n14. int형 변수 cnt를 0으로 초기화하여 단어의 개수를 세기 위한 카운터로 사용하세요.\n15. [rep_start(1)] i를 선언해 str의 시작부터 word의 길이만큼 반복하는 for 루프를 작성하세요.\n16. int형 변수 flag를 1로 초기화합니다.\n17. [rep_start(2)] j를 선언해 word의 길이만큼 반복하는 for 루프를 작성하세요.\n18. [cond_start(2)] word의 j번째 문자가 str의 i+j번째 문자와 동일한지 확인하세요.\n19. 동일하지 않다면 flag를 0으로 설정하고 반복을 중단하세요.\n20. [cond_end(2)]\n21. [cond_start(2)] flag가 1인 경우, 즉 일치하는 경우를 확인하세요.\n22. cnt를 1 증가시킵니다.\n23. [cond_end(2)]\n24. [rep_end(1)]\n25. str 안에서 word가 발견된 횟수를 출력합니다.\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void read_digital_signal(int N, char* S, unsigned char* result) { for (int i = 0; i < N; i++) { unsigned char byte_val = 0; for (int j = 0; j < 8; j++) { byte_val <<= 1; if (S[i * 8 + j] == '-') { byte_val |= 1; } } result[i] = byte_val; } } int main() { int N; scanf(\"%d\", &N); char S[81]; scanf(\"%s\", S); unsigned char result[10]; read_digital_signal(N, S, result); for (int i = 0; i < N; i++) { printf(\"%d \", result[i]); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 read_digital_signal 함수를 정의하세요. (매개변수: int N, char* S, unsigned char* result)\n2. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n3. unsigned char 타입의 변수를 byte_val로 선언하고 0으로 초기화하세요.\n4. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. byte_val을 1비트 왼쪽으로 이동시키세요.\n6. [cond_start(3)] S의 i * 8 + j 위치의 값이 '-'인지 확인하는 조건문을 작성하세요.\n7. 이 조건이 참이라면 byte_val에 1을 OR 연산하여 설정하세요.\n8. [cond_end(3)]\n9. [rep_end(2)]\n10. result 배열의 i번째 인덱스에 byte_val 값을 저장하세요.\n11. [rep_end(1)]\n12. [func_def_end(1)]\n13. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n14. 정수형 변수 N을 선언하세요.\n15. N에 사용자로부터 입력을 받으세요.\n16. char형 배열 S를 81 크기로 선언하세요.\n17. S에 문자열을 사용자로부터 입력받으세요.\n18. unsigned char 타입의 배열 result를 10 크기로 선언하세요.\n19. read_digital_signal 함수를 호출하여 N, S, result를 인자로 전달하세요.\n20. [rep_start(1)] i를 선언하여 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n21. result 배열의 i번째 값을 정수로 출력하세요.\n22. [rep_end(1)]\n23. 줄바꿈을 출력하세요.\n24. return 0;으로 프로그램을 종료하세요.\n25. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "unsigned int gcd(unsigned int max, unsigned int min) { unsigned int r; while (max % min != 0) { r = max % min; max = min; min = r; } return min; } int main() { unsigned int a, b; unsigned int ans; scanf(\"%u %u\", &a, &b); int min_num = (a < b ? a : b); int max_num = (a > b ? a : b); unsigned int gcd_num = gcd(max_num, min_num); unsigned int lcm_num = (a * b) / gcd_num; printf(\"%u\", lcm_num); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 gcd 함수를 정의하세요. (매개변수: unsigned int max, unsigned int min)\n2. unsigned int 형 변수 r을 선언하세요.\n3. [rep_start(1)] max를 min으로 나눈 나머지가 0이 아닌 동안 반복하는 while 루프를 작성하세요.\n4. r에 max를 min으로 나눈 나머지를 저장하세요.\n5. max를 min으로 설정하세요.\n6. min을 r로 설정하세요.\n7. [rep_end(1)]\n8. 최종적으로 min을 반환하세요.\n9. [func_def_end(1)]\n10. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n11. unsigned int 형 변수 a와 b를 선언하세요.\n12. unsigned int 형 변수 ans를 선언하세요.\n13. a와 b에 대한 입력을 받으세요.\n14. [cond_start(1)] a와 b 중 작은 값을 min_num에 할당하는 조건문을 작성하세요.\n15. min_num에 a가 더 작으면 a를 할당하세요, 그렇지 않으면 b를 할당하세요.\n16. [cond_end(1)]\n17. [cond_start(1)] a와 b 중 큰 값을 max_num에 할당하는 조건문을 작성하세요.\n18. max_num에 a가 더 크면 a를 할당하세요, 그렇지 않으면 b를 할당하세요.\n19. [cond_end(1)]\n20. unsigned int형 변수 gcd_num에 gcd(max_num, min_num)의 값을 할당하세요.\n21. unsigned int형 변수 lcm_num에 (a * b) / gcd_num 값을 할당하세요.\n22. lcm_num을 출력하세요.\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A; int B; int max, min,ans; scanf(\"%d %d\", &A, &B); if (A >= B) { max = A; min = B; } else { max = B; min = A; } for (int i = 1; ; i++) { for (int j = 1; j < max; j++) { A = min * i; B = max * j; if (A==B) { printf(\"%d\", min*i); return 0; } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A, B, max, min, ans를 선언하세요.\n3. A와 B에 입력을 받으세요.\n4. [cond_start(1)] A가 B보다 크거나 같은지 확인하는 조건문을 작성하세요.\n5. A가 크다면 A를 max에, B를 min에 저장하세요.\n6. [cond_end(1)]\n7. [cond_start(1)] A가 B보다 작으면 B를 max에, A를 min에 저장하세요.\n8. [cond_end(1)]\n9. [rep_start(1)] i를 1로 초기화하고 무한 반복하는 for 루프를 시작하세요.\n10. [rep_start(2)] j를 1로 초기화하고 j가 max보다 작은 동안 반복하는 for 루프를 시작하세요.\n11. A를 min과 i의 곱으로 업데이트하세요.\n12. B를 max와 j의 곱으로 업데이트하세요.\n13. [cond_start(3)] A와 B가 같은지 확인하는 조건문을 작성하세요.\n14. A와 B가 같다면 min과 i의 곱을 출력하고 프로그램을 종료하세요.\n15. [cond_end(3)]\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main() { unsigned int n; int count = 0; scanf(\"%d\", &n); for (int i = 0; n > 0; i++) { if (n & 1) { count++; } n = n >> 1; } printf(\"%d\", count); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. 무부호 정수형 변수 n을 선언하세요.\n3. 정수형 변수 count를 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 선언하고 n이 0보다 큰 동안 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] n의 마지막 비트가 1인지 확인하는 조건문을 작성하세요.\n7. n의 마지막 비트가 1이라면 count를 1 증가시키세요.\n8. [cond_end(2)]\n9. n을 오른쪽으로 1비트 시프트하여 절반으로 축소하세요.\n10. [rep_end(1)]\n11. count의 값을 출력하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void count_bits_per_byte(unsigned int N, unsigned char* result) { for (int i = 0; i < 4; i++) { result[i] = 0; for (int j = 0; j < 8; j++) { if (N & (1 << (i * 8 + j))) { result[i]++; } } } } int main() { unsigned int N; scanf(\"%u\", &N); unsigned char result[4]; count_bits_per_byte(N, result); for (int i = 3; i >= 0; i--) { printf(\"%d \", result[i]); } printf(\"\\n\"); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] void 반환형 함수 count_bits_per_byte를 정의하세요. (매개변수: unsigned int N, unsigned char* result)\n2. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n3. result[i]를 0으로 초기화하세요.\n4. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(3)] N의 i번째 바이트의 j번째 비트가 1인지 확인하는 조건문을 작성하세요.\n6. i번째 바이트의 j번째 비트가 1이라면 result[i]를 증가시키세요.\n7. [cond_end(3)]\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. [func_def_end(1)]\n11. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n12. unsigned int 변수 N을 선언하세요.\n13. N에 대한 입력을 받으세요.\n14. unsigned char형 배열 result를 4로 선언하세요.\n15. count_bits_per_byte 함수를 호출하여 N과 result를 인자로 넘기세요.\n16. [rep_start(1)] i를 선언해 3부터 0까지 반복하는 for 루프를 작성하세요.\n17. result[i]의 값을 출력하세요.\n18. 출력 후 공백을 추가하세요.\n19. [rep_end(1)]\n20. 새로운 줄을 출력하세요.\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> void printBytes(unsigned int n) { for (int i = 0; i < 4; i++) { printf(\"%X\", n & 0xFF); if (i < 3) { printf(\" \"); } n >>= 8; } printf(\"\\n\"); } int main() { unsigned int num; scanf(\"%X\", &num); printBytes(num); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 함수 printBytes를 정의하세요. (매개변수: unsigned int n)\n2. [rep_start(1)] i를 선언해 0부터 3까지 반복하는 for 루프를 작성하세요.\n3. i가 0일 때부터 3까지 반복하여 n의 각 바이트를 출력합니다.\n4. n의 최하위 바이트를 0xFF와 AND하여 결과를 출력하세요.\n5. [cond_start(2)] i가 3보다 작은지 확인하는 조건문을 작성하세요.\n6. i가 3보다 작다면 공백을 출력하세요.\n7. [cond_end(2)]\n8. n을 오른쪽으로 8비트 시프트합니다.\n9. [rep_end(1)]\n10. 줄 바꿈 문자를 출력하세요.\n11. [func_def_end(1)]\n12. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n13. unsigned int형 변수 num을 선언하세요.\n14. 16진수 형식으로 num에 값을 입력받으세요.\n15. printBytes 함수를 호출하여 num의 바이트를 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int array[33] = { 0 }; for (int i = 0; i < 32; i++) { scanf(\"%1d\", &array[i]); } for (int i = 0; i < 32; i++) { if (array[i] == 0) { printf(\"1\"); } else { printf(\"0\"); } } printf(\"\\n\"); int cnt = 0; for ( int i = 0; i < 32; i++) { if (array[i] != 0) { printf(\"0\"); cnt++; break; } } if (cnt == 0) { printf(\"1\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 array를 선언하고 33개의 요소를 0으로 초기화합니다.\n3. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n4. 배열의 각 요소에 사용자 입력을 1자리 정수로 받아 저장합니다.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 0부터 31까지 반복하는 또 다른 for 루프를 작성하세요.\n7. [cond_start(2)] 배열의 i번째 요소가 0인지 확인하는 조건문을 작성하세요.\n8. 요소가 0이라면 \"1\"을 출력하세요.\n9. [cond_end(2)]\n10. [cond_start(2)] 요소가 0이 아니라면 \"0\"을 출력하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. 줄바꿈을 출력합니다.\n14. int형 변수 cnt를 0으로 초기화합니다.\n15. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n16. [cond_start(2)] 배열의 i번째 요소가 0이 아닌지 확인하는 조건문을 작성하세요.\n17. 요소가 0이 아니라면 \"0\"을 출력하고, cnt를 1 증가시킵니다.\n18. 이후 루프를 종료합니다.\n19. [cond_end(2)]\n20. [cond_start(1)] cnt가 0인지 확인하는 조건문을 작성하세요.\n21. cnt가 0이라면 \"1\"을 출력하세요.\n22. [cond_end(1)]\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A_1[32] = { 0 }; int a = 1; for (int i = 0; i < 32; i++) { scanf(\"%1u\", &A_1[i]); } for (int i = 0; i < 32; i++) { if (A_1[i] == 1) { A_1[i] = 0; a = 0; } else if (A_1[i] == 0) { A_1[i] = 1; } } for (int i = 0; i < 32; i++) { printf(\"%u\", A_1[i]); } printf(\"\\n\"); printf(\"%d\\n\", a); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 배열 A_1을 크기 32로 선언하고 초기값을 0으로 설정하세요.\n3. int형 변수 a를 1로 초기화하세요.\n4. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n5. 배열 A_1의 요소를 1자리 정수로 입력받으세요.\n6. [rep_end(1)]\n7. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] A_1의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.\n9. A_1[i]가 1이라면, 해당 요소를 0으로 설정하고 a를 0으로 변경하세요.\n10. [cond_end(2)]\n11. [cond_start(2)] A_1의 i번째 요소가 0인지 확인하는 조건문을 작성하세요.\n12. A_1[i]가 0이라면 해당 요소를 1로 설정하세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. [rep_start(1)] i를 0부터 31까지 반복하는 for 루프를 작성하세요.\n16. A_1의 각 요소를 출력하세요.\n17. [rep_end(1)]\n18. 줄 바꿈 문자를 출력하세요.\n19. a의 값을 출력하세요.\n20. [func_def_end(1)]\n21. return 0;으로 프로그램을 종료하세요."
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char S[100]; char W[100]; int i = 0; int j = 0; int cnt2 = 0; scanf(\"%s\", S); scanf(\"%s\", W); for (i; S[i] != '\\0'; i++); for (j; W[j] != '\\0'; j++); for (int p = 0; p < i; p++) { if (S[p] == W[0]) { int cnt = 0; for (int q = 0; q < j; q++) { if (S[p + q] == W[q]) cnt++; } if (cnt == j) cnt2++; } } printf(\"%d\", cnt2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. char형 배열 S와 W를 선언하여 각각 100개의 문자를 저장할 수 있도록 합니다.  \n3. 정수형 변수 i, j, cnt2를 0으로 초기화합니다.  \n4. S 배열에 문자열을 입력받습니다.  \n5. W 배열에 문자열을 입력받습니다.  \n6. [rep_start(1)] S의 각 문자를 탐색하기 위해 i를 초기화하고 반복하는 for 루프를 작성하세요.  \n7. S[i]가 문자열의 끝을 나타내는 null 문자('\\0')가 아닐 때까지 반복합니다.  \n8. [rep_end(1)]  \n9. [rep_start(1)] W의 각 문자를 탐색하기 위해 j를 초기화하고 반복하는 for 루프를 작성하세요.  \n10. W[j]가 문자열의 끝을 나타내는 null 문자('\\0')가 아닐 때까지 반복합니다.  \n11. [rep_end(1)]  \n12. [rep_start(1)] p를 0으로 초기화하고, i까지 반복하는 for 루프를 작성하세요.  \n13. [cond_start(2)] S 배열의 p번째 문자가 W의 첫 번째 문자와 같은지 확인하는 조건문을 작성하세요.  \n14. S[p]가 W[0]와 같으면 수행합니다.  \n15. int형 변수 cnt를 0으로 초기화합니다.  \n16. [rep_start(2)] q를 0으로 초기화하고, W의 길이만큼 반복하는 for 루프를 작성하세요.  \n17. [cond_start(3)] S의 p + q번째 문자가 W의 q번째 문자와 같은지 확인하는 조건문을 작성하세요.  \n18. S[p + q]가 W[q]와 같으면 cnt를 증가시킵니다.  \n19. [cond_end(3)]  \n20. [rep_end(2)]  \n21. [cond_start(2)] cnt가 W의 길이 j와 같은지 확인하는 조건문을 작성하세요.  \n22. 만약 cnt가 j와 같다면 cnt2를 증가시킵니다.  \n23. [cond_end(2)]  \n24. [rep_end(1)]  \n25. S 배열에서 W 배열의 문자열이 몇 번 나왔는지 세어서 cnt2를 출력합니다.  \n26. return 0;으로 프로그램을 종료하세요.  \n27. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 정수를 입력받아, 바이트 단위로 비트 1의 개수를 출력하는 프로그램을 작성하시오. 입력 설명 (정수) : 처리할 정수 출력 설명 의 비트 1의 개수를 바이트 단위로 세고, 띄어쓰기로 구분하여 출력하라. 입력 예시 복사 3223682 출력 예시 복사 0 3 2 2 Hint #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int n; int cnt1 = 0; int cnt2 = 0; int cnt3 = 0; int cnt4 = 0; scanf(\"%u\", &n); for (int i = 31; i >= 24; i--) { if ((n >> i) & 0x01) { cnt1++; } } for (int i = 23; i >= 16; i--) { if ((n >> i) & 0x01) { cnt2++; } } for (int i = 15; i >= 8; i--) { if ((n >> i) & 0x01) { cnt3++; } } for (int i = 7; i >= 0; i--) { if ((n >> i) & 0x01) { cnt4++; } } printf(\"%d %d %d %d\", cnt1, cnt2, cnt3, cnt4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 cnt1, cnt2, cnt3, cnt4를 0으로 초기화하세요. (각각 비트 1의 개수를 세기 위함)\n4. n에 대해 비율의 정수를 입력받으세요.\n5. [rep_start(1)] i를 선언하고 31부터 24까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n7. i번째 비트가 1이라면 cnt1을 1 증가시키세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언하고 23부터 16까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n12. i번째 비트가 1이라면 cnt2을 1 증가시키세요.\n13. [cond_end(2)]\n14. [rep_end(1)]\n15. [rep_start(1)] i를 선언하고 15부터 8까지 반복하는 for 루프를 작성하세요.\n16. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n17. i번째 비트가 1이라면 cnt3을 1 증가시키세요.\n18. [cond_end(2)]\n19. [rep_end(1)]\n20. [rep_start(1)] i를 선언하고 7부터 0까지 반복하는 for 루프를 작성하세요.\n21. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n22. i번째 비트가 1이라면 cnt4를 1 증가시키세요.\n23. [cond_end(2)]\n24. [rep_end(1)]\n25. cnt1, cnt2, cnt3, cnt4의 값을 띄어쓰기로 구분하여 출력하세요.\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { char S[101]; char W[101]; int count = 0; int lenS = 0; int lenW = 0; scanf(\"%s\", S); scanf(\"%s\", W); while (S[lenS] != '\\0') lenS++; while (W[lenW] != '\\0') lenW++; for (int i = 0; i <= lenS - lenW; i++) { int j; for (j = 0; j < lenW; j++) { if (S[i + j] != W[j]) { break; } } if (j == lenW) { count++; } } printf(\"%d\\n\", count); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 문자형 배열 S와 W를 각각 101크기로 선언하세요.  \n3. 찾은 패턴의 개수를 저장할 int형 변수 count를 0으로 초기화하세요.  \n4. S의 길이를 저장할 int형 변수 lenS를 0으로 초기화하세요.  \n5. W의 길이를 저장할 int형 변수 lenW를 0으로 초기화하세요.  \n6. S 문자열을 입력받으세요.  \n7. W 문자열을 입력받으세요.  \n8. [rep_start(1)] S 문자열의 길이를 계산하기 위한 while 루프를 작성하세요.  \n9. S의 끝에 도달할 때까지 lenS를 증가시키세요.  \n10. [rep_end(1)]  \n11. [rep_start(1)] W 문자열의 길이를 계산하기 위한 while 루프를 작성하세요.  \n12. W의 끝에 도달할 때까지 lenW를 증가시키세요.  \n13. [rep_end(1)]  \n14. [rep_start(1)] i를 선언해 S 문자열의 길이(lenS)에서 W 문자열의 길이(lenW)를 뺀 값까지 반복하는 for 루프를 작성하세요.  \n15. int형 변수를 j로 선언하세요.  \n16. [rep_start(2)] j를 0부터 lenW까지 반복하는 for 루프를 작성하세요.  \n17. [cond_start(2)] S의 i+j번째 문자와 W의 j번째 문자가 일치하지 않는지 확인하는 조건문을 작성하세요.  \n18. 일치하지 않으면 루프를 빠져나가세요.  \n19. [cond_end(2)]  \n20. [cond_start(2)] j가 lenW와 같은 경우를 확인하는 조건문을 작성하세요.  \n21. W 문자열이 S 문자열의 부분 문자열로 발견되면 count를 증가시키세요.  \n22. [cond_end(2)]  \n23. [rep_end(2)]  \n24. [rep_end(1)]  \n25. S 문자열에서 W 문자열이 발견된 횟수를 출력하세요.  \n26. return 0;으로 프로그램을 종료하세요.  \n27. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { char str[101]; char word[101]; gets(str); gets(word); int cnt = 0; int i, j; for (i = 0; str[i] != '\\0'; i++) { for (j = 0; word[j] != '\\0'; j++) { if (str[i + j] != word[j]) break; } if (word[j] == '\\0') cnt++; } printf(\"%d\", cnt); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. char형 배열 str을 선언하고 크기를 101로 설정하세요.\n3. char형 배열 word를 선언하고 크기를 101로 설정하세요.\n4. str에서 입력을 받기 위해 gets 함수를 사용하여 문자열을 입력받으세요.\n5. word에서 입력을 받기 위해 gets 함수를 사용하여 문자열을 입력받으세요.\n6. int형 변수 cnt를 0으로 초기화하여 단어의 개수를 세는 변수로 사용하세요.\n7. int형 변수 i와 j를 선언하여 반복문에서 사용할 인덱스를 준비하세요.\n8. [rep_start(1)] i를 0으로 초기화하고 str의 끝까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 0으로 초기화하고 word의 끝까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] str의 현재 인덱스와 word의 현재 인덱스의 문자가 일치하는지 확인하는 조건문을 작성하세요.\n11. 문자들이 일치하지 않으면 루프를 중단하세요.\n12. [cond_end(3)]\n13. [cond_start(2)] word의 현재 인덱스가 끝에 도달했는지 확인하는 조건문을 작성하세요.\n14. word의 끝에 도달하면 cnt을 증가시키세요.\n15. [cond_end(2)]\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. str에서 word의 출현 횟수를 출력하세요.\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 0 문제 설명 정수를 입력받아, 비트 1의 개수를 출력하는 프로그램을 작성하시오. 입력 설명 (정수) : 처리할 정수 출력 설명 의 비트 1의 개수를 출력하라. 입력 예시 복사 23 출력 예시 복사 4 #endif #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int n; scanf(\"%u\", &n); int cnt = 0; for (int i = 31; i >= 0; i--) { if ((n >> i) & 0x01) { cnt++; } } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. int형 변수 cnt를 0으로 초기화하여 비트 1의 개수를 세기 위한 변수를 선언하세요.\n5. [rep_start(1)] i를 선언하여 31부터 0까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] n의 i번째 비트를 체크하는 조건문을 작성하세요.\n7. i번째 비트가 1이라면 cnt를 1 증가시키세요.\n8. [cond_end(2)]\n9. [rep_end(1)]\n10. cnt를 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; unsigned int ans; unsigned int shift = 0xFF; scanf(\"%X\", &n); for (int i = 0; i < 4; i++) { ans = n & shift; printf(\"%X \", ans); n = n >> 8; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 부호 없는 정수형 변수 n을 선언하세요.\n3. 부호 없는 정수형 변수 ans를 선언하세요.\n4. 부호 없는 정수형 변수 shift를 0xFF로 초기화하세요.\n5. n에 16진수 값을 입력받기 위해 scanf 함수를 호출하세요.\n6. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n7. n과 shift의 비트 단위를 AND 연산하여 ans에 저장하세요.\n8. ans를 16진수 형식으로 출력하세요.\n9. n을 8비트 오른쪽으로 시프트하여 n을 업데이트하세요.\n10. [rep_end(1)]\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; unsigned int A = 0; char S[80]; scanf(\"%d\", &N); for (int i = 0; i <= N * 8; i++) { scanf(\"%c\", &S[i]); } for (int i = 0; i < N; i++) { A = 0; for (int j = 8;j>=1; j--) { if (S[i*8+j] == '-') { A = A + (1 << 8-j); } } printf(\"%d \", A); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. unsigned int형 변수 A를 0으로 초기화하세요.\n4. char형 배열 S의 크기를 80으로 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 0부터 N * 8까지 반복하는 for 루프를 작성하세요.\n7. 배열 S의 i번째 요소에 문자를 입력받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. A를 0으로 초기화하세요.\n11. [rep_start(2)] j를 8부터 1까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] S 배열의 i*8+j번째 요소가 '-'인지 확인하는 조건문을 작성하세요.\n13. S[i*8+j]가 '-'라면 A에 (1 << 8-j)를 더하세요.\n14. [cond_end(2)]\n15. [rep_end(2)]\n16. A의 값을 출력하세요.\n17. [rep_end(1)]\n18. 프로그램의 실행을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N = 0; int array[10]; int store[10][9] = {0}; scanf(\"%u\", &N); for (int i = 0; i < N; i++) { scanf(\"%d\", &array[i]); } for (int i = 0; i <N; i++) { for (int j = 0; j < 8; j++) { if (array[i] % 2 == 1) { store[i][j] = 1; array[i] = array[i] / 2; } else if (array[i] % 2 == 0) { store[i][j] = 0; array[i] = array[i] / 2; } if (array[i] == 0) { continue; } } } for (int i = 0; i < N; i++) { for (int j = 7; j >=0; j--) { if (store[i][j] == 1) { printf(\"-\"); } else { printf(\"_\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. N을 저장할 unsigned int형 변수를 0으로 초기화하세요.\n3. int형 배열 array를 10개 크기로 선언하세요.\n4. int형 2차원 배열 store를 10x9 크기로 선언하고 모든 요소를 0으로 초기화하세요.\n5. N에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. index i에 해당하는 array 요소에 대한 입력을 받으세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] array[i]가 홀수인지 확인하는 조건문을 작성하세요.\n12. array[i]가 홀수라면 store[i][j]에 1을 저장하고, array[i]를 2로 나눕니다.\n13. [cond_end(2)]\n14. [cond_start(2)] array[i]가 짝수인지 확인하는 조건문을 작성하세요.\n15. array[i]가 짝수라면 store[i][j]에 0을 저장하고, array[i]를 2로 나눕니다.\n16. [cond_end(2)]\n17. [cond_start(2)] array[i]가 0인지 확인하는 조건문을 작성하세요.\n18. array[i]가 0이라면 반복을 건너뜁니다.\n19. [cond_end(2)]\n20. [rep_end(2)]\n21. [rep_end(1)]\n22. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n23. [rep_start(2)] j를 선언해 7부터 0까지 역순으로 반복하는 for 루프를 작성하세요.\n24. [cond_start(2)] store[i][j]가 1인지 확인하는 조건문을 작성하세요.\n25. store[i][j]가 1이라면 \"-\"를 출력하세요.\n26. [cond_end(2)]\n27. [cond_start(2)] store[i][j]가 0인지 확인하는 조건문을 작성하세요.\n28. store[i][j]가 0이라면 \"_\"를 출력하세요.\n29. [cond_end(2)]\n30. [rep_end(2)]\n31. [rep_end(1)]\n32. return 0;으로 프로그램을 종료하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned int N; scanf(\"%X\", &N); for (int i = 0; i < 4; i++) { printf(\"%X \", N & 0xFF); N = N>>8 ; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 16진수 형식으로 입력을 받으세요.\n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. N의 하위 8비트를 16진수 형식으로 출력하세요.\n6. N의 비트를 오른쪽으로 8만큼 시프트하세요.\n7. [rep_end(1)]\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main() { int n; int a[256]; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; i++) { for (int j = 7; j >= 0; j--) { if (a[i] & (1 << j)) { printf(\"-\"); } else { printf(\"_\"); } } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 크기가 256인 정수형 배열 a를 선언하세요.\n4. 사용자로부터 n의 값을 입력받으세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 사용자로부터 a[i]의 값을 입력받으세요.\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 7부터 0까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] a[i]의 j번째 비트가 1인지 확인하는 조건문을 작성하세요.\n11. a[i]의 j번째 비트가 1이라면 \"-\"을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] a[i]의 j번째 비트가 0이라면 \"_\"을 출력하세요.\n14. [cond_end(3)]\n15. [rep_end(2)]\n16. [rep_end(1)]\n17. 프로그램이 끝났음을 나타내는 명령어를 추가하거나 리턴을 설정하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n = 0; scanf(\"%X\", &n); for (int i = 0; i < 4; i++) { printf(\"%X \", (n >> (i * 8)) & 0xFF); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 0으로 초기화하세요.\n3. n에 16진수 입력을 받기 위해 scanf를 사용하세요.\n4. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n5. n을 i*8만큼 오른쪽으로 시프트한 후, 0xFF와 비트 AND 연산을 수행하여 결과를 16진수로 출력하세요.\n6. [rep_end(1)]\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int gcd(int a, int b) { while (b != 0) { int temp = b; b = a % b; a = temp; } return a; } int lcm(int a, int b) { return (a * b) / gcd(a, b); } int main() { int a, b; scanf(\"%d %d\", &a, &b); int result = lcm(a, b); printf(\"%d\", result); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 함수 gcd를 정의하세요. (매개변수: int a, int b)\n2. [rep_start(1)] b가 0이 아닐 때까지 반복하는 while 루프를 작성하세요.\n3. int형 변수 temp를 b로 선언하고 초기화하세요.\n4. b에 a를 b로 나눈 나머지를 대입하세요.\n5. a에 temp 값을 대입하세요.\n6. [rep_end(1)]\n7. a를 반환하세요.\n8. [func_def_end(1)]\n9. [func_def_start(1)] int 반환형 함수 lcm을 정의하세요. (매개변수: int a, int b)\n10. gcd 함수를 호출하여 (a * b)를 gcd로 나눈 값을 반환하세요.\n11. [func_def_end(1)]\n12. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n13. 정수형 변수 a와 b를 선언하세요.\n14. a와 b에 입력을 받으세요.\n15. lcm 함수를 호출하여 result에 결과를 저장하세요.\n16. result를 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); int a_1[80]; for (int i = 0; i < n; i++) { scanf(\"%d\", &a_1[i]); } int c = 0; for (int i = 0; i < n && c <8*n; i++) { int a = a_1[i]; for (int j = 7; j >= 0 && c<8*n; j--) { if ((a >> j) & 1) { printf(\"-\"); } else { printf(\"_\"); } } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. int형 배열 a_1을 크기 80으로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 배열 a_1의 i번째 요소에 대한 입력을 받으세요.\n7. [rep_end(1)]\n8. int형 변수 c를 0으로 초기화하세요.\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하되 c가 8*n보다 작은 동안 실행하는 for 루프를 작성하세요.\n10. 배열 a_1의 i번째 요소를 변수 a에 할당하세요.\n11. [rep_start(2)] j를 7부터 0까지 감소시키면서 반복하는 for 루프를 작성하세요.\n12. [cond_start(3)] a의 j번째 비트가 1인지 확인하는 조건문을 작성하세요.\n13. j번째 비트가 1이면 \"-\"를 출력하세요.\n14. [cond_end(3)]\n15. [cond_start(3)] j번째 비트가 0이면 \"_\"를 출력하는 조건문을 작성하세요.\n16. [cond_end(3)]\n17. [rep_end(2)]\n18. [rep_end(1)]\n19. return 0;으로 프로그램을 종료하세요.\n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; int address = 0x1000; scanf(\"%d\", &n); address += 4 * n; printf(\"%X\", address); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 변수 address를 0x1000으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. address에 n의 4배를 더하세요.\n6. 주소 값을 16진수 형식으로 출력하세요.\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int i; int address = 0x1000; scanf(\"%d\", &i); for (int j = 0; j < i; j++) { address = address + 4; } printf(\"%X\", address); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. 주소값을 저장할 int형 변수 address를 0x1000으로 초기화하세요.\n4. i에 대한 입력을 받으세요.\n5. [rep_start(1)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n6. address에 4를 더하여 새 주소값을 설정하세요.\n7. [rep_end(1)]\n8. address의 값을 16진수 형식으로 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int i; scanf(\"%d\",&i); printf(\"%X\",(0x1000+i*4)); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. i에 대한 입력을 받으세요.\n4. (0x1000 + i * 4)의 결과를 16진수 형태로 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int I; scanf(\"%d\", &I); unsigned int arr[100]; for (int i = 0; i < 100; i++) { arr[i] = 0x1000 + 0x4*i; } printf(\"%X\", arr[I]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 I를 선언하세요.\n3. I에 대해 입력을 받으세요.\n4. unsigned int형 배열 arr를 100개의 요소로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n6. arr의 i번째 요소를 0x1000과 0x4*i의 합으로 초기화하세요.\n7. [rep_end(1)]\n8. arr[I]의 값을 16진수 형식으로 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int i; scanf(\"%d\", &i); i = 4 * (i); printf(\"%X\", 0x1000 + i); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. i에 대한 입력을 받으세요.\n4. i를 4배로 곱하세요.\n5. 0x1000에 i를 더하여 결과를 16진수로 출력하세요.\n6. return 0;으로 프로그램을 종료하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int I; scanf(\"%d\", &I); printf(\"%X\", 4096 + 4 * I); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 I를 선언하세요.  \n3. I에 대한 입력을 받으세요.  \n4. 4096에 4 곱하기 I를 더한 결과를 16진수 형식으로 출력하세요.  \n5. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int arr[100]; int i; scanf(\"%d\", &i); for (int j = 0; j < 100; j++) { arr[j] = 0X1000 + (0x04)*j; } for (int j = 0; j < 100; j++) { if (i == j) { printf(\"%X\", arr[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 arr을 크기 100으로 선언하세요.\n3. 정수형 변수 i를 선언하세요.\n4. i에 대한 입력을 받으세요.\n5. [rep_start(1)] j를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n6. arr[j]에 0x1000과 0x04에 j를 곱한 값을 더하여 초기화하세요.\n7. [rep_end(1)]\n8. [rep_start(1)] j를 선언해 0부터 99까지 반복하는 for 루프를 작성하세요.\n9. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n10. i가 j와 같다면 arr[i]를 16진수 형식으로 출력하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n[101]; int k; scanf(\"%d\", &k); n[0] = 0x1000; int prev = 0x1000; for (int i = 1; i < 101; i++) { n[i] = prev + 4; prev = n[i]; } printf(\"%X\", n[k]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 n을 선언하고, 크기를 101로 지정하세요.\n3. 정수형 변수 k를 선언하세요.\n4. k에 대한 입력을 받으세요.\n5. n[0]에 0x1000 값을 할당하세요.\n6. int형 변수 prev를 선언하고 0x1000 값을 할당하세요.\n7. [rep_start(1)] i를 선언해 1부터 100까지 반복하는 for 루프를 작성하세요.\n8. n[i]에 prev + 4의 값을 할당하세요.\n9. prev에 n[i]의 값을 할당하세요.\n10. [rep_end(1)]\n11. n[k]의 값을 16진수로 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; int address = 0x1000; int val = 0; scanf(\"%x\", &n); val = n - address; printf(\"%d\", val / 4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. 정수형 변수 address를 0x1000으로 초기화하세요.\n4. 정수형 변수 val을 0으로 초기화하세요.\n5. 16진수 형식으로 n에 값을 입력받으세요.\n6. val에 n에서 address를 빼는 연산 결과를 저장하세요.\n7. val을 4로 나눈 값을 출력하세요.\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i + j == 8 || i == j || i == 4 || j == 4)printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 정수형 반환이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int형 2차원 배열 A를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf를 사용해 배열 A의 각 요소에 입력을 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] 배열의 인덱스 i와 j의 합이 8인지, i가 j와 같은지, i가 4인지, j가 4인지 확인하는 조건문을 작성하세요.\n11. 조건이 참이라면 공백을 출력하세요.\n12. 그렇지 않으면 배열 A의 요소를 출력하세요.\n13. [cond_end(3)]\n14. printf를 사용해 줄 바꿈을 추가하세요.\n15. [rep_end(2)]\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; unsigned int arr[100]; unsigned int T; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &arr[i]); } scanf(\"%u\", &T); for (int j = 0; j < N; j++) { if (arr[j] <= T) arr[j] = 0; printf(\"%u \", arr[j]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. unsigned int형 배열 arr[100]을 선언하세요.\n4. unsigned int형 변수 T를 선언하세요.\n5. N에 대한 입력을 받으세요.\n6. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. arr 배열의 i번째 요소에 대한 입력을 받으세요.\n8. [rep_end(1)]\n9. T에 대한 입력을 받으세요.\n10. [rep_start(1)] j를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[j]가 T보다 작거나 같은지 확인하는 조건문을 작성하세요.\n12. arr[j]가 T보다 작거나 같다면 arr[j]를 0으로 설정하세요.\n13. [cond_end(2)]\n14. arr[j]의 값을 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int A; scanf(\"%x\",&A); A = A-(0x1000); A = A/4; printf(\"%d\",A); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 A를 선언하세요.  \n3. 16진수 형식으로 A에 입력을 받으세요.  \n4. A에서 0x1000을 감소시킵니다.  \n5. A를 4로 나누어 새로운 값을 A에 저장합니다.  \n6. A의 값을 10진수 형식으로 출력하세요.  \n7. return 0;으로 프로그램을 종료하세요.  \n8. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i; scanf(\"%d\", &i); int k = 0x1000; printf(\"%X\", k + 4 * i); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i를 선언하세요.  \n3. i에 정수를 입력 받으세요.  \n4. 정수형 변수 k를 0x1000으로 초기화하세요.  \n5. k와 4*i의 합을 16진수 형식으로 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int a[8] = { 0 }; unsigned int b = 0; scanf(\"%u\", &b); for (int i = 0; i < 8; i++) { a[i] = b % 2; b = b / 2; } for (int i = 0; i < 8; i++) { printf(\"%d\", a[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 a를 8개의 0으로 초기화하여 선언하세요.\n3. unsigned int형 변수 b를 선언하고 초기값을 0으로 설정하세요.\n4. b의 값을 입력 받으세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. a 배열의 i번째 요소에 b를 2로 나누었을 때의 나머지 값을 저장하세요.\n7. b를 2로 나누어 업데이트하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. a 배열의 i번째 요소를 출력하세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int I; scanf(\"%u\", &I); printf(\"%0X\", 0x1000 + I * 4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2.unsigned int형 변수 I를 선언하세요.\n3. I에 입력을 받으세요.\n4. 입력받은 I에 4를 곱한 값에 0x1000을 더한 후, 16진수 형식으로 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main() { int n, m; int address = 0x1000; scanf(\"%d %d\", &n, &m); address += (n * 5) * 4 + m * 4; printf(\"%X\", address); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n과 m을 선언하세요.  \n3. 주소를 저장할 변수 address를 0x1000으로 초기화하세요.  \n4. n과 m의 값을 입력 받으세요.  \n5. address에 (n * 5) * 4 + m * 4를 더하여 업데이트하세요.  \n6. address의 값을 16진수 형식으로 출력하세요.  \n7. return 0;으로 프로그램을 종료하세요.  \n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int x; unsigned int a[8]; scanf(\"%d\", &x); for (int i = 0; i < 8; i++) { a[i] = x % 2; x = x / 2; } for (int i = 0; i < 8; i++) { printf(\"%d\", a[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형 int인 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 x를 선언하세요.\n3. unsigned int형 배열 a[8]를 선언하여 8개의 정수를 저장할 수 있도록 설정하세요.\n4. x에 정수를 입력 받기 위해 scanf 함수를 호출하세요.\n5. [rep_start(1)] i를 선언하고 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. a[i]에 x를 2로 나눈 나머지를 저장하여 이진수의 각 비트를 저장하세요.\n7. x를 2로 나눈 몫으로 업데이트하여 다음 비트를 준비하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언하고 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. 배열 a의 각 요소를 출력하세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i; scanf(\"%x\", &i); int k = 0x1000; printf(\"%d\", (i - k) / 4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i를 선언하세요.  \n3. 16진수 형식으로 i에 입력을 받으세요.  \n4. int형 변수 k를 0x1000으로 초기화하세요.  \n5. (i - k)를 4로 나눈 값을 출력하세요.  \n6. [func_def_end(1)]  \n7. return 0;으로 프로그램을 종료하세요.  \n"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; scanf(\"%d\", &a); for (int i = 0; i < 8; i++) { printf(\"%d\", (a >> i)&1); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. int형 변수 a를 0으로 초기화하세요.  \n3. M 변수를 위한 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n5. a를 i 비트만큼 오른쪽으로 이동시킨 후 가장 오른쪽 비트를 추출하여 출력하세요.  \n6. [rep_end(1)]  \n7. return 0;으로 프로그램을 종료하세요.  \n8. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int i = 0; scanf(\"%d\", &i); printf(\"%X\", i * 4 + 0x1000); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i를 0으로 초기화하세요.  \n3. i에 대한 입력을 받으세요.  \n4. 입력받은 i의 값을 4배한 후 0x1000을 더한 결과를 16진수 형식으로 출력하세요.  \n5. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void){ int i; int arr[100] = { }; scanf(\"%d\", &i); printf(\"%X\", 0x1000+i*4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. 크기가 100인 정수형 배열 arr을 선언하지만 초기화는 하지 않으세요.\n4. i에 대한 입력을 받으세요.\n5. 0x1000와 i를 4배한 값을 더한 결과를 16진수 형식으로 출력하세요.\n6. 프로그램을 종료하기 위해 return 0;을 사용하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { unsigned int A; scanf(\"%X\", &A); unsigned int arr[100]; for (int i = 0; i < 100; i++) { arr[i] = i; } printf(\"%d\", arr[(A - 0x1000)/4]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 A를 선언하세요.  \n3. 16진수 형식으로 A에 입력을 받으세요.  \n4. unsigned int형 배열 arr을 크기 100으로 선언하세요.  \n5. [rep_start(1)] i를 선언하여 0부터 99까지 반복하는 for 루프를 작성하세요.  \n6. 배열 arr의 각 인덱스에 해당하는 값을 i로 초기화하세요.  \n7. [rep_end(1)]  \n8. (A - 0x1000)을 4로 나눈 값으로 arr의 인덱스를 지정하여 해당 값을 출력하세요.  \n9. return 0;으로 프로그램을 종료하세요.  \n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A; scanf(\"%X\", &A); printf(\"%d\", (A - 4096) / 4); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 A를 선언하세요.  \n3. A에 16진수 입력을 받기 위해 scanf 함수를 호출하세요.  \n4. A에서 4096을 빼고 4로 나눈 값을 출력하기 위해 printf 함수를 호출하세요.  \n5. [func_def_end(1)]  \n6. return 0;으로 프로그램을 종료하세요.  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a = 0; scanf(\"%u\", &a); for (int i = 0; i < 8; i++) { if (a == 0) { printf(\"0\"); } else if (a > 0) { printf(\"%u\", a % 2); a = a / 2; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] a가 0인지 확인하는 조건문을 작성하세요.\n6. a가 0이라면 \"0\"을 출력하세요.\n7. [cond_end(2)]\n8. [cond_start(2)] a가 0보다 큰지 확인하는 조건문을 작성하세요.\n9. a가 0보다 크다면 a를 2로 나눈 나머지를 출력하세요.\n10. a를 2로 나누어 값을 업데이트하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a[9][9] = { 0 }; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i + j == 8) { printf(\" \"); } else if (i == 4) { printf(\" \"); } else if (j == 4) { printf(\" \"); } else if (i == j) { printf(\" \"); } else { printf(\"%u\", a[i][j]); } printf(\" \"); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 9x9 배열 a를 0으로 초기화하여 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 대해 사용자로부터 unsigned int 값을 입력받아 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(1)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n11. i와 j의 합이 8이라면 공백을 출력하세요.\n12. [cond_end(1)]\n13. [cond_start(1)] i가 4인지 확인하는 조건문을 작성하세요.\n14. i가 4라면 공백을 출력하세요.\n15. [cond_end(1)]\n16. [cond_start(1)] j가 4인지 확인하는 조건문을 작성하세요.\n17. j가 4라면 공백을 출력하세요.\n18. [cond_end(1)]\n19. [cond_start(1)] i와 j가 같다면 (대각선 위치) 공백을 출력하는 조건문을 작성하세요.\n20. i와 j가 같다면 공백을 출력하세요.\n21. [cond_end(1)]\n22. [cond_start(1)] 위의 조건들이 모두 해당되지 않는 경우에 배열 a의 요소를 출력하는 조건문을 작성하세요.\n23. 배열 a의 i, j번째 요소를 출력하세요.\n24. [cond_end(1)]\n25. 공백을 출력하세요.\n26. [rep_end(2)]\n27. 줄바꿈을 출력하세요.\n28. [rep_end(1)]\n29. return 0;으로 프로그램을 종료하세요.\n30. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i, j; scanf(\"%d %d\", &i, &j); int k = 0x1000; printf(\"%X\", (i * 20 + j * 4) + k); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i와 j를 선언하세요.  \n3. i와 j에 입력을 받으세요.  \n4. int형 변수 k를 0x1000으로 초기화하세요.  \n5. (i * 20 + j * 4)와 k의 합을 16진수 형식으로 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); int array[8] = { 0 }; for (int i = 0; i < 8; i++) { array[i] = N%2; N/=2; } for (int i = 0; i <8; i++) { printf(\"%d\", array[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력을 받으세요.  \n4. 정수형 배열 array를 크기 8로 선언하고 0으로 초기화하세요.  \n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n6. array[i]에 N을 2로 나눈 나머지를 저장하세요.  \n7. N을 2로 나눈 값으로 업데이트하세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n10. array[i]의 값을 출력하세요.  \n11. [rep_end(1)]  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> #define UINT unsigned int int main() { int n, m; int address = 0x1000; int val = 0; int A, B; scanf(\"%x\", &n); val = (n - address) / 4; A = val / 5; B = val % 5; printf(\"%d %d\", A, B); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n과 m을 선언하세요.\n3. 정수형 변수 address를 0x1000으로 초기화하세요.\n4. 정수형 변수 val을 0으로 초기화하세요.\n5. 정수형 변수 A와 B를 선언하세요.\n6. 16진수 형식으로 n에 입력을 받으세요.\n7. val에 n과 address의 차이를 4로 나눈 값을 저장하세요.\n8. A에 val을 5로 나눈 몫을 저장하세요.\n9. B에 val을 5로 나눈 나머지를 저장하세요.\n10. A와 B의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int arr[9][9] = { 0 }; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &arr[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == 4 || j == 4 || i == j || i + j == 8) { printf(\" \"); } else { printf(\"%u \", arr[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int형 2차원 배열 arr을 선언하고 모두 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. arr[i][j]에 사용자로부터 입력받은 unsigned int 값을 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] 현재 위치(i, j)가 특정 조건을 충족하는지 확인하는 조건문을 작성하세요.\n11. (i가 4이거나 j가 4이거나 i와 j가 같거나 i + j가 8이면) 조건이 충족된다면 공백을 출력하세요.\n12. [cond_end(2)]\n13. 그렇지 않다면 arr[i][j]의 값을 출력하세요.\n14. [rep_end(2)]\n15. 각 행의 출력을 마친 후 개행 문자('\\n')를 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n = 0; int dec[8] = { 0 }; int i = 0; scanf(\"%d\", &n); while (n > 0) { dec[i] = n % 2; n = n / 2; i++; } for (int j = 0; j < 8; j++) { printf(\"%d\", dec[j]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 0으로 초기화하세요.\n3. 크기가 8인 int형 배열 dec를 선언하고, 모든 요소를 0으로 초기화하세요.\n4. 정수형 변수 i를 0으로 초기화하세요.\n5. n에 대한 입력을 받으세요.\n6. [rep_start(1)] n이 0보다 큰 동안 반복하는 while 루프를 작성하세요.\n7. dec 배열의 i번째 요소에 n을 2로 나눈 나머지를 저장하세요.\n8. n을 2로 나눈 몫으로 업데이트하세요.\n9. i의 값을 1 증가시키세요.\n10. [rep_end(1)]\n11. [rep_start(1)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n12. dec 배열의 j번째 요소를 출력하세요.\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { int A; int B; scanf(\"%d %d\", &A, &B); printf(\"%X\", 0x1000 + A * 20 + B * 4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. int형 변수 A를 선언하세요.\n3. int형 변수 B를 선언하세요.\n4. A와 B에 입력을 받으세요.\n5. 0x1000, A * 20, B * 4를 더한 값을 16진수 형식으로 출력하세요.\n6. return 0;으로 프로그램을 종료하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int a = 0; scanf(\"%d\", &a); int b = 0; printf(\"%d\", 1 & a); for (int i = 0; i < 7; i++) { a = a >> 1; printf(\"%d\", 1&a); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a를 0으로 초기화하세요.\n3. a에 사용자로부터 정수를 입력받으세요.\n4. 정수형 변수 b를 0으로 초기화하세요.\n5. a의 가장 오른쪽 비트와 1을 비트 AND 연산하여 출력하세요.\n6. [rep_start(1)] i를 0부터 6까지 반복하는 for 루프를 작성하세요.\n7. a를 오른쪽으로 1비트 시프트하여 a의 값을 변경하세요.\n8. a의 가장 오른쪽 비트와 1을 비트 AND 연산하여 출력하세요.\n9. [rep_end(1)]\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int A, B; int address = 0x1000; scanf(\"%d %d\", &A, &B); for (int j = 0; j < A; j++) { address = address + 20; } for (int j = 0; j < B; j++) { address = address + 4; } printf(\"%X\", address); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 A와 B를 선언하세요.  \n3. 주소를 저장할 int형 변수 address를 0x1000으로 초기화하세요.  \n4. A와 B에 입력을 받으세요.  \n5. [rep_start(1)] j를 선언해 A만큼 반복하는 for 루프를 작성하세요.  \n6. address에 20을 더하여 주소를 업데이트하세요.  \n7. [rep_end(1)]  \n8. [rep_start(1)] j를 선언해 B만큼 반복하는 for 루프를 작성하세요.  \n9. address에 4를 더하여 주소를 업데이트하세요.  \n10. [rep_end(1)]  \n11. address의 값을 16진수 형식으로 출력하세요.  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[9][9]; unsigned int i, j; for (i = 0; i < 9; i++) { for (j = 0; j < 9; j++) { scanf(\"%u\", &A[i][j]); } } for (i = 0; i< 4; i++) { for (j = 0; j < 9; j++) { if (i - j == 0||i+j==8||j==4) printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } printf(\"\\n\"); for (i = 5; i < 9; i++) { for (j = 0; j < 9; j++) { if (i - j == 0||i+j==8||j==4) printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int 형 배열 A를 선언하세요.\n3. unsigned int 타입의 변수 i와 j를 선언하세요.\n4. [rep_start(1)] i를 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 0부터 8까지 반복하는 for 루프를 작성하세요.\n6. 배열 A의 i,j 위치에 입력을 받으세요.\n7. [rep_end(2)]\n8. [rep_end(1)]\n9. [rep_start(1)] i를 0부터 3까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 0부터 8까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] i와 j의 차이가 0이거나, i와 j의 합이 8이거나, j가 4인지를 확인하는 조건문을 작성하세요.\n12. 해당 조건이 만족하면 공백을 출력하세요.\n13. 그렇지 않다면 배열 A의 i,j 값을 출력하세요.\n14. [cond_end(2)]\n15. printf를 이용해 줄 바꿈을 출력하세요.\n16. [rep_end(2)]\n17. printf를 이용해 줄 바꿈을 출력하세요.\n18. [rep_start(1)] i를 5부터 8까지 반복하는 for 루프를 작성하세요.\n19. [rep_start(2)] j를 0부터 8까지 반복하는 for 루프를 작성하세요.\n20. [cond_start(2)] i와 j의 차이가 0이거나, i와 j의 합이 8이거나, j가 4인지를 확인하는 조건문을 작성하세요.\n21. 해당 조건이 만족하면 공백을 출력하세요.\n22. 그렇지 않다면 배열 A의 i,j 값을 출력하세요.\n23. [cond_end(2)]\n24. printf를 이용해 줄 바꿈을 출력하세요.\n25. [rep_end(2)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int hr[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &hr[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) { printf(\" \"); } else if (i + j == 8) { printf(\" \"); } else if (j == 4) { printf(\" \"); } else if (i == 4) { printf(\" \"); } else { printf(\"%u \", hr[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 이차원 배열 hr을 선언하여 9x9 크기로 만드세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. 배열 hr의 각 요소에 대해 사용자로부터 unsigned int 값을 입력 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i와 j가 같다면 조건문을 작성하세요.\n11. 조건이 참이라면 공백을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n14. 조건이 참이라면 공백을 출력하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] j가 4인지 확인하는 조건문을 작성하세요.\n17. 조건이 참이라면 공백을 출력하세요.\n18. [cond_end(3)]\n19. [cond_start(3)] i가 4인지 확인하는 조건문을 작성하세요.\n20. 조건이 참이라면 공백을 출력하세요.\n21. [cond_end(3)]\n22. 그렇지 않다면 hr[i][j]를 출력하세요.\n23. [rep_end(2)]\n24. 각 행의 끝에서 줄 바꿈을 출력하세요.\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int cake[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &cake[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == 4) printf(\" \"); else if (j == 4) printf(\" \"); else if (i == j) printf(\" \"); else if (i + j == 8) printf(\" \"); else printf(\"%u \", cake[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 2D 배열 cake를 정의하고, 9x9 크기로 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. 입력으로 받은 값을 cake 배열의 i,j 위치에 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i가 4인지 확인하는 조건문을 작성하세요.\n11. i가 4이면 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] j가 4인지 확인하는 조건문을 작성하세요.\n14. j가 4이면 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n17. i와 j가 같으면 공백을 출력하세요.\n18. [cond_end(2)]\n19. [cond_start(2)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n20. i와 j의 합이 8이면 공백을 출력하세요.\n21. [cond_end(2)]\n22. 그렇지 않으면 해당 위치의 cake 배열 값을 출력하세요.\n23. [rep_end(2)]\n24. printf로 줄바꿈을 출력하세요.\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n; scanf(\"%d\", &n); for(int i=0;i<8;i++) { printf(\"%d\",n & 1); n = n >> 1; } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int 형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.  \n5. n의 최하위 비트와 1을 비트 AND 연산하여 출력하세요.  \n6. n을 오른쪽으로 1비트 이동시키세요.  \n7. [rep_end(1)]  \n8. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n; scanf(\"%d\", &n); int cnt = 0; int arr[8] = { 0 }; for (int i = 0; i < 8; i++) { arr[i] = n % 2; n = n / 2; } for (int i = 0; i < 8; i++) { printf(\"%d\", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 변수 cnt를 0으로 초기화하세요.\n5. 정수형 배열 arr을 크기 8로 선언하고, 모든 요소를 0으로 초기화하세요.\n6. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n7. arr[i]에 n을 2로 나눈 나머지를 저장하세요.\n8. n을 2로 나눈 몫으로 업데이트하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n11. arr[i]의 값을 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i; scanf(\"%x\", &i); int k = 0x1000; int n1 = (i - k) / 20; i -= n1 * 20; int n2 = (i - k) / 4; printf(\"%d %d\", n1, n2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. i에 16진수 입력을 받으세요.\n4. 0x1000으로 초기화된 정수형 변수 k를 선언하세요.\n5. n1을 계산하여 (i - k) / 20을 저장하세요. \n6. i에서 n1 * 20을 빼세요.\n7. n2를 계산하여 (i - k) / 4를 저장하세요.\n8. n1과 n2의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A; int B; scanf(\"%d %d\", &A, &B); int v = 5 * A + B; v = 4 * v; printf(\"%X\", 0x1000 + v); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A와 B를 선언하세요.\n3. A와 B에 입력을 받으세요.\n4. 변수 v를 선언하고 5 * A + B로 초기화하세요.\n5. v를 4배로 증가시키세요.\n6. 0x1000과 v를 더한 값을 16진수 형식으로 출력하세요.\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int i[2] = { 0 }; scanf(\"%d %d\", &i[0], &i[1]); printf(\"%X\", i[0] * 4 * 5 + i[1] * 4 + 0x1000); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 i를 크기 2로 선언하고, 초기값 0으로 설정하세요.\n3. M과 N의 값을 입력받기 위해 scanf 함수를 사용하세요.\n4. 입력받은 값을 i 배열의 첫 번째와 두 번째 요소에 저장하세요.\n5. 계산을 위해 i[0]에 4와 5를 곱하고, i[1]에 4를 곱한 값을 더한 후, 0x1000을 더합니다.\n6. 그 결과를 16진수 형식으로 출력하기 위해 printf 함수를 사용하세요.\n7. [func_def_end(1)]\n"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void){ int i; scanf(\"%X\", &i); int idx = ((i-0x1000)/4); printf(\"%d\", idx); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 i를 선언하세요.  \n3. 16진수 형식으로 i에 입력을 받으세요.  \n4. int형 변수 idx를 선언하고, i에서 0x1000을 뺀 후 4로 나눈 몫을 계산하여 저장하세요.  \n5. idx의 값을 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int n; scanf(\"%d\", &n); for(int i=1;i<9;i++) { printf(\"%d\", n & 1); n = n >> 1; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n의 값을 입력 받으세요.\n4. [rep_start(1)] i를 1부터 8까지 반복하는 for 루프를 작성하세요.\n5. n의 최하위 비트가 1인지 확인하여 출력하세요.\n6. n을 오른쪽으로 1비트 시프트하여 다음 비트를 준비하세요.\n7. [rep_end(1)]\n8. return 0;으로 프로그램을 종료하세요.\n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[100][100] = {0}; for (int i = 1; i <= 9; i++) { for (int j = 1; j <= 9 ; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 1; i <= 9; i++) { for (int j = 1; j <= 9; j++) { if (i == j) printf(\" \"); else if (i + j == 10) printf(\" \"); else if (i == 5) printf(\" \"); else if (j == 5) printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int 형 2차원 배열 A를 100x100 크기로 선언하고 초기화하세요.\n3. [rep_start(1)] i를 1부터 9까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 1부터 9까지 반복하는 for 루프를 작성하세요.\n5. scanf 함수를 사용하여 A[i][j]에 값을 입력받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 1부터 9까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 1부터 9까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같으면 공백을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] i와 j의 합이 10인지 확인하는 조건문을 작성하세요.\n14. i와 j의 합이 10이면 공백을 출력하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] i가 5인지 확인하는 조건문을 작성하세요.\n17. i가 5이면 공백을 출력하세요.\n18. [cond_end(3)]\n19. [cond_start(3)] j가 5인지 확인하는 조건문을 작성하세요.\n20. j가 5이면 공백을 출력하세요.\n21. [cond_end(3)]\n22. 그 외의 경우에는 A[i][j]을 출력하세요.\n23. [rep_end(2)]\n24. printf를 사용하여 줄 바꿈을 출력하세요.\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); N = N & 102; printf(\"%d\", N); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 입력을 받으세요.  \n4. N의 값을 102와 비트 AND 연산을 수행하여 다시 N에 저장하세요.  \n5. N의 값을 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int A; scanf(\"%x\",&A); A = A-0x1000; A = A/4; int B = A/5; int C = A%5; printf(\"%d %d\",B,C); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A를 선언하세요.\n3. 16진수 형식으로 A에 입력을 받으세요.\n4. A에서 0x1000을 빼세요.\n5. A를 4로 나누어 A의 값을 수정하세요.\n6. int형 변수 B를 선언하고 A를 5로 나누어 저장하세요.\n7. int형 변수 C를 선언하고 A를 5로 나눈 나머지를 저장하세요.\n8. B와 C의 값을 출력하세요.\n9. return 0;으로 프로그램을 종료하세요.\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); for (int i = 0; i < 8; i++) { printf(\"%d\", N >> i & 0x01); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. N을 i만큼 오른쪽으로 shift하고, 0x01로 AND 연산하여 결과를 출력하세요.\n6. [rep_end(1)]\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); for (int i = 0; i < 8; i++) { printf(\"%d\", (n >> i) & 0x01); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 정수 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. n의 i번째 비트를 추출하여 출력하세요. (n을 i만큼 오른쪽으로 쉬프트하고 0x01과 비트 AND 연산을 수행하세요)\n6. [rep_end(1)]\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned int A[9][9] = { 0 }; for (int i = 0; i < 9; i++) { scanf(\"%u %u %u %u %u %u %u %u %u\", &A[i][0], &A[i][1], &A[i][2], &A[i][3], &A[i][4], &A[i][5], &A[i][6], &A[i][7], &A[i][8]); } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if ((i == j)||(j==4)||(j==8-i)||(i==4)) printf(\" \"); else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] `int` 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int 배열 A를 0으로 초기화하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. 9개의 unsigned int 값을 입력받아 배열 A의 i번째 행에 저장하세요.\n5. [rep_end(1)]\n6. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n7. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n8. [cond_start(2)] 현재 위치가 대각선(i == j), 중간열(j == 4), 대각선 반대(j == 8 - i), 또는 중앙행(i == 4)인지 확인하는 조건문을 작성하세요.\n9. 해당 위치라면 공백을 출력하세요.\n10. [cond_end(2)]\n11. 그렇지 않다면 배열 A의 i,j 요소를 출력하세요.\n12. 공백과 숫자 사이에 띄어쓰기를 두세요.\n13. [rep_end(2)]\n14. 행이 끝나면 줄바꿈을 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a = 0; scanf(\"%u\", &a); unsigned int b[8] = { 0 }; for (int i = 0; i < 8; i++) { b[i] = a & 1; a = a >> 1; } for (int i = 0; i < 8; i++) { printf(\"%u\", b[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 사용자로부터 unsigned int를 입력받으세요.\n4. unsigned int형 배열 b를 선언하고 8개의 요소를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. b[i]에 a의 최하위 비트를 저장하세요 (a & 1).\n7. a를 오른쪽으로 1비트 시프트하여 a의 값을 업데이트하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. b[i]의 값을 출력하세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned int a = 0; scanf(\"%u\", &a); int b[8] = { 0 }; for (int i = 0; i < 8; i++) { b[i] = a % 2; a = a / 2; } b[0] = 0; b[3] = 0; b[4] = 0; b[7] = 0; int sum = 0; int two = 1; for (int i = 0; i < 8; i++) { if (b[i] == 0) { continue; } else { for (int j = 1; j < 1 + i; j++) { two = two * 2; } sum = sum + two; two = 1; } } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 0으로 초기화하세요.\n3. a에 대한 입력을 받으세요.\n4. int형 배열 b를 크기 8로 선언하고, 모든 요소를 0으로 초기화하세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. a의 2로 나눈 나머지를 b[i]에 저장하세요. (a를 2진수의 각 자리로 변환)\n7. a를 2로 나누어 업데이트하세요.\n8. [rep_end(1)]\n9. 배열 b의 0번째, 3번째, 4번째, 7번째 인덱스를 0으로 설정하여 불필요한 비트를 제거하세요.\n10. int형 변수 sum을 0으로 초기화하세요.\n11. int형 변수 two를 1로 초기화하세요.\n12. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n13. [cond_start(2)] b[i]의 값이 0인지 확인하는 조건문을 작성하세요.\n14. b[i]가 0이면 다음 반복으로 넘어가세요. (continue)\n15. [cond_end(2)]\n16. [rep_start(2)] j를 1로 초기화한 후 i+1까지 반복하는 for 루프를 작성하세요.\n17. two에 2를 곱하세요.\n18. [rep_end(2)]\n19. sum에 two를 더하세요.\n20. two를 1로 초기화하세요.\n21. [rep_end(1)]\n22. sum의 값을 출력하세요.\n23. return 0;으로 프로그램을 종료하세요.\n24. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int N = 0; int i; scanf(\"%d\", &N); for (i = 0; i < 8; i++) { if (N >> i & 1) { printf(\"1\"); } else { printf(\"0\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. 정수형 변수 i를 선언하세요.\n4. N에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] N의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.\n7. i번째 비트가 1이라면 \"1\"을 출력하세요.\n8. [cond_end(2)]\n9. [cond_start(2)] i번째 비트가 1이 아닐 경우에 처리하는 조건문을 작성하세요.\n10. i번째 비트가 0이라면 \"0\"을 출력하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int arr[10][10] = { 0 }; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &arr[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if ((i == j) || (i+j==8)) arr[i][j] = 999; if (i == 4 || j == 4) { arr[i][j] = 999; } } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (arr[i][j] != 999) { printf(\"%u \", arr[i][j]); } else { printf(\" \"); } } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의합니다. (매개변수 없음)\n2. 10x10 크기의 unsigned int형 2차원 배열 arr을 0으로 초기화합니다.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n5. 사용자로부터 arr[i][j]에 대한 unsigned int 값을 입력받습니다.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n10. [cond_start(2)] i와 j가 대각선(즉, i == j)에 있는지, 또는 반대 대각선(i + j == 8)에 있는지 확인하는 조건문을 작성합니다.\n11. 대각선에 있으면 arr[i][j]의 값을 999로 설정합니다.\n12. [cond_end(2)]\n13. [cond_start(2)] i가 4이거나 j가 4인지 확인하는 조건문을 작성합니다.\n14. i가 4이거나 j가 4이면 arr[i][j]를 999로 설정합니다.\n15. [cond_end(2)]\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n19. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성합니다.\n20. [cond_start(2)] arr[i][j]의 값이 999가 아닌지 확인하는 조건문을 작성합니다.\n21. 999가 아니면 arr[i][j]를 출력합니다.\n22. [cond_end(2)]\n23. [cond_start(2)] arr[i][j]의 값이 999인 경우를 처리하는 조건문을 작성합니다.\n24. 999인 경우에는 공백을 출력합니다.\n25. [cond_end(2)]\n26. 줄 바꿈을 출력합니다.\n27. [rep_end(2)]\n28. [rep_end(1)]\n29. return 0;으로 프로그램을 종료합니다.\n30. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int a[9][9]; for (int i = 0;i < 9;i++) { for (int j = 0;j < 9;j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0;i < 9;i++) { for (int j = 0;j < 9;j++) { if (i == j) { printf(\" \"); } else if (i + j == 8) { printf(\" \"); } else if (i==4||j == 4) { printf(\" \"); } else { printf(\"%u \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 9x9 크기의 unsigned int형 배열 a를 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n5. 배열 a의 각 원소에 대한 입력을 받기 위해 scanf를 사용하세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.  \n11. i와 j가 같다면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. [cond_start(2)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.  \n14. i와 j의 합이 8이라면 공백을 출력하세요.  \n15. [cond_end(2)]  \n16. [cond_start(2)] i가 4이거나 j가 4인지 확인하는 조건문을 작성하세요.  \n17. i나 j가 4라면 공백을 출력하세요.  \n18. [cond_end(2)]  \n19. 그렇지 않으면 배열 a의 i, j 원소를 출력하세요.  \n20. [rep_end(2)]  \n21. 줄바꿈을 위해 printf를 호출하세요.  \n22. [rep_end(1)]  \n23. return 0;으로 프로그램을 종료하세요.  \n24. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int a[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) { printf(\" \"); } else if ((9 - j-1)==i) { printf(\" \"); } else if (i == (9/2)) { printf(\" \"); } else if (j == (9/2)) { printf(\" \"); } else { printf(\"%u \", a[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 정수형 배열 a를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf를 이용해 a[i][j]에 정수를 입력 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같다면 공백을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] (9 - j - 1)이 i와 같은지 확인하는 조건문을 작성하세요.\n14. (9 - j - 1)과 i가 같다면 공백을 출력하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] i가 4인지 확인하는 조건문을 작성하세요.\n17. i가 4라면 공백을 출력하세요.\n18. [cond_end(3)]\n19. [cond_start(3)] j가 4인지 확인하는 조건문을 작성하세요.\n20. j가 4라면 공백을 출력하세요.\n21. [cond_end(3)]\n22. [cond_start(3)] 위의 조건들에 해당하지 않으면 배열 a[i][j]의 값을 출력하세요.\n23. 배열 a[i][j]의 값을 공백과 함께 출력하세요.\n24. [cond_end(3)]\n25. [rep_end(2)]\n26. printf로 줄을 바꾸세요.\n27. [rep_end(1)]\n28. return 0;으로 프로그램을 종료하세요.\n29. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int n = 0; int i = 0; int dec[8] = { 0 }; scanf(\"%d\", &n); while (n > 0) { dec[i] = n % 2; n = n / 2; i++; } dec[0] = 0; dec[3] = 0; dec[4] = 0; dec[7] = 0; int two = 1; int sum = 0; for (int i = 0; i < 7; i++) { if (dec[i] == 1) { sum += two; } two *= 2; } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 0으로 초기화하여 선언하세요.  \n3. 정수형 변수 i를 0으로 초기화하여 선언하세요.  \n4. 크기가 8인 정수형 배열 dec를 0으로 초기화하여 선언하세요.  \n5. n에 사용자로부터 정수를 입력받으세요.  \n6. [rep_start(1)] n이 0보다 큰 동안 반복하는 while 루프를 시작하세요.  \n7. dec 배열의 현재 인덱스 i에 n을 2로 나눈 나머지를 저장하세요.  \n8. n을 2로 나눈 몫으로 업데이트하세요.  \n9. i를 1 증가시키세요.  \n10. [rep_end(1)]  \n11. dec 배열의 첫 번째 인덱스에 0을 저장하세요.  \n12. dec 배열의 네 번째 인덱스에 0을 저장하세요.  \n13. dec 배열의 다섯 번째 인덱스에 0을 저장하세요.  \n14. dec 배열의 여덟 번째 인덱스에 0을 저장하세요.  \n15. int형 변수 two를 1로 초기화하여 선언하세요.  \n16. int형 변수 sum을 0으로 초기화하여 선언하세요.  \n17. [rep_start(1)] i를 0부터 6까지 반복하는 for 루프를 시작하세요.  \n18. [cond_start(2)] dec 배열의 i번째 요소가 1인지 확인하는 조건문을 작성하세요.  \n19. dec[i]가 1이라면, sum에 두의 값(two)을 더하세요.  \n20. 두의 값을 2배로 증가시키세요.  \n21. [cond_end(2)]  \n22. [rep_end(1)]  \n23. sum의 값을 출력하세요.  \n24. return 0;으로 프로그램을 종료하세요.  \n25. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A, B; scanf(\"%d %d\", &A, &B); printf(\"%X\", 4096 + 20 * A + 4 * B); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 A와 B를 선언하세요.  \n3. A와 B에 입력을 받으세요.  \n4. printf 함수를 이용하여 특정 계산의 결과를 16진수 형식으로 출력하세요. (계산식: 4096 + 20 * A + 4 * B)  \n5. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> main() { unsigned int a[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &a[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) printf(\" \"); else if (i == 4 || j == 4) printf(\" \"); else if (i + j == 8) printf(\" \"); else printf(\"%u \", a[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 메인 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int형 2차원 배열 a를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 첫 번째 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 두 번째 for 루프를 작성하세요.\n5. 배열 a의 각 요소에 대해 입력을 받아 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 새로운 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 또 다른 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같다면 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] i가 4이거나 j가 4인지 확인하는 조건문을 작성하세요.\n14. i가 4이거나 j가 4라면 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n17. i와 j의 합이 8라면 공백을 출력하세요.\n18. [cond_end(2)]\n19. 그렇지 않다면 a[i][j]의 값을 출력하세요.\n20. [rep_end(2)]\n21. 각 행의 출력 후 줄 바꿈을 추가하세요.\n22. [rep_end(1)]\n23. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); for (int i = 0; i < 8; i++) ((n >> i) & 1) ? printf(\"1\") : printf(\"0\"); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n5. [cond_start(2)] n의 i번째 비트가 1인지 확인하는 조건문을 작성하세요.  \n6. i번째 비트가 1이라면 \"1\"을 출력하세요.  \n7. [cond_end(2)]  \n8. 그렇지 않으면 \"0\"을 출력하세요.  \n9. [rep_end(1)]  \n10. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int A; int x = 0; int y = 0; scanf(\"%X\", &A); while (1) { if (A < 0x1014) { break; } A = A - 20; x = x + 1; } while (1) { if (A < 0x1004) { break; } A = A - 4; y = y + 1; } printf(\"%d %d\", x, y); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 A를 선언하세요.  \n3. int형 변수 x를 0으로 초기화하세요.  \n4. int형 변수 y를 0으로 초기화하세요.  \n5. A에 16진수 형태로 입력을 받으세요.  \n6. [rep_start(1)] 무한 루프를 시작합니다.  \n7. [cond_start(2)] A가 0x1014보다 작은지 확인하는 조건문을 작성하세요.  \n8. A가 0x1014보다 작다면 루프를 종료하세요.  \n9. A에서 20을 빼세요.  \n10. x에 1을 더하세요.  \n11. [cond_end(2)]  \n12. [rep_end(1)] 루프를 종료합니다.  \n13. [rep_start(1)] 또 다른 무한 루프를 시작합니다.  \n14. [cond_start(2)] A가 0x1004보다 작은지 확인하는 조건문을 작성하세요.  \n15. A가 0x1004보다 작다면 루프를 종료하세요.  \n16. A에서 4를 빼세요.  \n17. y에 1을 더하세요.  \n18. [cond_end(2)]  \n19. [rep_end(1)] 루프를 종료합니다.  \n20. x와 y의 값을 출력하세요.  \n21. return 0;으로 프로그램을 종료하세요.  \n22. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int cake[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &cake[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) { if (i == 4 || j == 4) { printf(\" \"); } else { printf(\" \"); } } else if (i == 4 || j == 4) { printf(\" \"); } else if (j == 4) { printf(\" \"); } else if (i + j == 8) { printf(\" \"); } else { printf(\"%u \", cake[i][j]); } } if (i == 4) { printf(\"\\n\"); } else { printf(\"\\n\"); } } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 2차원 배열 cake[9][9]을 선언하여 케이크 데이터를 저장할 공간을 만듭니다.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf를 이용하여 cake[i][j]에 unsigned int 값을 입력 받습니다.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n11. [cond_start(3)] i가 4인지 또는 j가 4인지 확인하는 조건문을 작성하세요.\n12. 해당하는 경우, 공백을 출력합니다.\n13. [cond_end(3)]\n14. [cond_end(2)]\n15. [cond_start(2)] i가 4이거나 j가 4인지 확인하는 조건문을 작성하세요.\n16. 해당하는 경우, 공백을 출력합니다.\n17. [cond_end(2)]\n18. [cond_start(2)] j가 4인지 확인하는 조건문을 작성하세요.\n19. 해당하는 경우, 공백을 출력합니다.\n20. [cond_end(2)]\n21. [cond_start(2)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n22. 해당하는 경우, 공백을 출력합니다.\n23. [cond_end(2)]\n24. 그렇지 않은 경우, cake[i][j]의 값을 출력합니다.\n25. [cond_start(2)] i가 4인지 확인하는 조건문을 작성하세요.\n26. 해당하는 경우, 줄 바꿈을 출력합니다.\n27. [cond_end(2)]\n28. 그렇지 않은 경우, 줄 바꿈을 출력합니다.\n29. [rep_end(2)]\n30. [rep_end(1)]\n31. return 0;으로 프로그램을 종료하세요.\n32. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int A; int k =0; scanf(\"%X\", &A); while (1) { if (A < 0x1004) { break; } A = A - 4; k = k + 1; } printf(\"%d\", k); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A를 선언하세요.\n3. 정수형 변수 k를 0으로 초기화하세요.\n4. A에 16진수 입력을 받으세요.\n5. [rep_start(1)] 무한 반복을 위한 while 루프를 작성하세요.\n6. [cond_start(2)] A가 0x1004보다 작은지 확인하는 조건문을 작성하세요.\n7. A가 0x1004보다 작다면 반복을 종료하세요.\n8. [cond_end(2)]\n9. A에서 4를 빼세요.\n10. k에 1을 더하여 k의 값을 증가시키세요.\n11. [rep_end(1)]\n12. k의 값을 출력하세요.\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N; unsigned int A[1000], T; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } scanf(\"%u\", &T); for (int i = 0; i < N; i++) { if (A[i] <= T)printf(\"0 \"); else printf(\"%u \", A[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. 크기가 1000인 unsigned int형 배열 A를 선언하세요.\n4. unsigned int형 변수 T를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 i번째 요소에 대한 값을 입력받으세요.\n8. [rep_end(1)]\n9. T의 값을 입력받으세요.\n10. [rep_start(1)] i를 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] 배열 A의 i번째 요소가 T보다 작거나 같은지 확인하는 조건문을 작성하세요.\n12. A[i]가 T보다 작거나 같다면 \"0 \"을 출력하세요.\n13. [cond_end(2)]\n14. 그렇지 않다면 A[i] 값을 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void){ int i, j; scanf(\"%d %d\", &i, &j); printf(\"%X\", 0x1000 + i*20 + j*4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i와 j를 선언하세요.\n3. i와 j에 대한 입력을 받으세요.\n4. 0x1000에 i에 20을 곱하고 j에 4를 곱한 값을 더한 후 16진수 형태로 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int A[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == 4) { printf(\" \"); } else if (j == 4) { printf(\" \"); } else if (i == j) { printf(\" \"); } else if ((i + j) == 8) { printf(\" \"); } else { printf(\"%u \", A[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 배열 A를 정의하여 정수형 데이터를 저장할 수 있는 공간을 할당하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf 함수를 사용하여 2차원 배열 A의 각 요소에 입력값을 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i가 4인지 확인하는 조건문을 작성하세요.\n11. i가 4라면 공백을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] j가 4인지 확인하는 조건문을 작성하세요.\n14. j가 4라면 공백을 출력하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] i와 j가 같다면 대각선 요소이므로 공백을 출력하세요.\n17. [cond_end(3)]\n18. [cond_start(3)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n19. i와 j의 합이 8이라면 공백을 출력하세요.\n20. [cond_end(3)]\n21. [cond_start(3)] 위의 모든 조건을 만족하지 않을 경우 A[i][j]의 값을 출력하세요.\n22. [cond_end(3)]\n23. [rep_end(2)]\n24. printf를 사용하여 줄 바꿈을 출력하세요.\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A[10][10] = { 0 }; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) { printf(\" \"); } else if (j == 8 - i) { printf(\" \"); } else if (i == 4) { continue; } else if (j == 4) { printf(\" \"); continue; } else printf(\"%u \", A[i][j]); } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 2차원 배열 A를 선언하고 초기화합니다. (10x10 크기, 모든 값 0)\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf 함수를 사용하여 배열 A의 각 요소에 입력을 받습니다.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] 현재 위치가 대각선인지 확인하는 조건문을 작성하세요.\n11. 대각선 위치(i == j)라면 공백을 출력합니다.\n12. [cond_end(2)]\n13. [cond_start(2)] 현재 위치가 반대 대각선인지 확인하는 조건문을 작성하세요.\n14. 반대 대각선 위치(j == 8 - i)라면 공백을 출력합니다.\n15. [cond_end(2)]\n16. [cond_start(2)] 현재 i가 4인 경우를 확인하는 조건문을 작성하세요.\n17. i가 4라면 continue를 사용하여 다음 반복으로 넘어갑니다.\n18. [cond_end(2)]\n19. [cond_start(2)] 현재 j가 4인 경우를 확인하는 조건문을 작성하세요.\n20. j가 4라면 공백을 출력하고 continue를 사용하여 다음 반복으로 넘어갑니다.\n21. [cond_end(2)]\n22. 아니라면 배열 A의 값을 출력합니다.\n23. [rep_end(2)]\n24. printf 함수를 사용하여 줄 바꿈을 출력합니다.\n25. [rep_end(1)]\n26. return 0;으로 프로그램을 종료하세요.\n27. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { unsigned int a; scanf(\"%u\", &a); for (int i = 0;i < 8;i++) { if (a % 2 == 1) { printf(\"1\"); a = a / 2; } else { printf(\"0\"); a = a / 2; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수의 정의를 시작합니다. (매개변수 없음)\n2. unsigned int형 변수 a를 선언합니다.\n3. a에 대한 입력을 scanf를 사용하여 받습니다.\n4. [rep_start(1)] i를 이용해 0부터 7까지 반복하는 for 루프를 시작합니다.\n5. [cond_start(2)] a가 2로 나누었을 때 나머지가 1인지 확인하는 조건문을 작성합니다.\n6. 만약 a가 홀수라면 \"1\"을 출력합니다.\n7. a를 2로 나눈 값으로 업데이트합니다.\n8. [cond_end(2)]\n9. [cond_start(2)] a가 짝수인 경우의 조건문을 작성합니다.\n10. a가 짝수라면 \"0\"을 출력합니다.\n11. a를 2로 나눈 값으로 업데이트합니다.\n12. [cond_end(2)]\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료합니다.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n; scanf(\"%d\", &n); printf(\"%d\", n &= 0b01100110); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. n을 0b01100110 비트마스크와 AND 연산하여 결과를 출력하세요.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int a; scanf(\"%u\", &a); for (int i = 0; i < 8; i++) { if (a & (1 << i))printf(\"1\"); else printf(\"0\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 a를 선언하세요.\n3. a에 대한 입력을 받으세요. (unsigned int형)\n4. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] a의 i 번째 비트가 1인지 확인하는 조건문을 작성하세요.\n6. i 번째 비트가 1이라면 \"1\"을 출력하세요.\n7. [cond_end(2)]\n8. 그렇지 않으면 \"0\"을 출력하세요.\n9. [rep_end(1)]\n10. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned int N = 0; scanf(\"%u\", &N); for (int i = 0; i < 8; i++) { printf(\"%d\", N & 0x01); N >>= 1; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 0으로 초기화하세요.  \n3. N에 대해 사용자의 입력을 받으세요.  \n4. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.  \n5. N의 최하위 비트를 출력하세요.  \n6. N을 오른쪽으로 1비트 시프트하세요.  \n7. [rep_end(1)]  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int A[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &A[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i + j == 8)printf(\" \"); else if (i == j)printf(\" \"); else if (i == 4)printf(\" \"); else if (j == 4)printf(\" \"); else printf(\"%u \", A[i][j]); } if (i != 8)printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 배열 A를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. A[i][j]에 사용자로부터 입력받은 unsigned int 값을 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(3)] i와 j의 합이 8인지 확인하는 조건문을 작성하세요.\n11. i와 j의 합이 8이라면 공백을 출력하세요.\n12. [cond_end(3)]\n13. [cond_start(3)] i와 j가 같은지 확인하는 조건문을 작성하세요.\n14. i와 j가 같다면 공백을 출력하세요.\n15. [cond_end(3)]\n16. [cond_start(3)] i가 4인지 확인하는 조건문을 작성하세요.\n17. i가 4라면 공백을 출력하세요.\n18. [cond_end(3)]\n19. [cond_start(3)] j가 4인지 확인하는 조건문을 작성하세요.\n20. j가 4라면 공백을 출력하세요.\n21. [cond_end(3)]\n22. 그렇지 않다면 A[i][j]의 값을 출력하세요.\n23. [cond_end(3)]\n24. [rep_end(2)]\n25. [cond_start(1)] i가 8이 아닐 경우 개행 문자를 출력하는 조건문을 작성하세요.\n26. i가 8이 아닐 경우 개행 문자를 출력하세요.\n27. [cond_end(1)]\n28. [rep_end(1)]\n29. return 0;으로 프로그램을 종료하세요.\n30. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int i = 0; scanf(\"%X\", &i); printf(\"%d %d\", (i - 0x1000) / (5 * 4), ((i - 0x1000) % 20) / 4); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 0으로 초기화하세요.\n3. 사용자로부터 hexadecimal 형식으로 입력을 받으세요.\n4. 입력받은 값을 변수 i에 저장하세요.\n5. i에서 0x1000을 빼고, 5 * 4로 나눈 값을 출력하세요.\n6. i에서 0x1000을 빼고, 20으로 나눈 나머지 값을 4로 나눈 값을 출력하세요.\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { const int n = 9; unsigned int matrix[n][n]; for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { scanf(\"%u\", &matrix[i][j]); } } for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { if ((i == j) || (i + j) == 8 || (i == n / 2) || (j == n / 2)) { printf(\" \"); } else { printf(\"%u \", matrix[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 상수 int형 변수 n을 9로 초기화하여 정방형 행렬의 크기를 정의하세요.\n3. unsigned int형 2차원 배열 matrix를 n x n 크기로 선언하세요.\n4. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n5. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n6. 행렬의 각 요소를 사용자로부터 입력받아 matrix[i][j]에 저장하세요.\n7. [rep_end(2)]\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n10. [rep_start(2)] j를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] 현재 요소의 위치가 대각선, 반대 대각선, 중앙 행 또는 중앙 열에 있는지 확인하는 조건문을 작성하세요.\n12. 위치가 위 조건에 맞으면 공백을 출력하세요.\n13. 그렇지 않으면 matrix[i][j]의 값을 출력하세요.\n14. [cond_end(2)]\n15. 한 행이 끝나면 줄바꿈을 출력하세요.\n16. [rep_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int A; scanf(\"%X\", &A); printf(\"%d %d\", (A - 4096) / 20, ((A - 4096) % 20) / 4); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 A를 선언하세요.\n3. A에 16진수 입력을 받으세요.\n4. A에서 4096을 빼고 20으로 나눈 몫과 나머지를 20으로 나눈 후 4로 나누어서 출력하세요.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int n[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &n[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j || i == 4 || j == 4 || j+i == 8) { printf(\" \"); } else { printf(\"%u \", n[i][j]); } } printf(\"\\n\"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 9x9 크기의 unsigned int형 2차원 배열 n을 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. n 배열의 각 요소에 사용자로부터 unsigned int형 값을 입력받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(1)] i와 j가 같은지, i가 4인지, j가 4인지, 또는 i+j가 8인지 확인하는 조건문을 작성하세요.\n11. 조건에 부합하면 공백을 출력하세요.\n12. [cond_end(1)]\n13. 조건에 해당되지 않으면 n[i][j] 값을 출력하세요.\n14. [rep_end(2)]\n15. 줄 바꿈을 위해 개행 문자를 출력하세요.\n16. [rep_end(1)]\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int arr[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &arr[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if ((i == j) || (i + j == 8)) { arr[i][j] = ' '; } } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if ((i == j) || (i + j == 8)||j==4||i==4) { printf(\" \"); if (j < 8) { printf(\" \"); } } else { printf(\"%u\", arr[i][j]); if (j < 8) { printf(\" \"); } } } if (i < 8) { printf(\"\\n\"); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요.\n2. unsigned int 형의 9x9 배열 arr를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. arr 배열의 각 요소에 값을 입력받아 저장하세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] i가 j와 같거나 i+j가 8인지 확인하는 조건문을 작성하세요.\n11. 해당 위치의 arr 배열 값을 공백으로 설정하세요.\n12. [cond_end(2)]\n13. [rep_end(2)]\n14. [rep_end(1)]\n15. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n16. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n17. [cond_start(2)] i가 j와 같거나 i+j가 8이거나 j가 4이거나 i가 4인지 확인하는 조건문을 작성하세요.\n18. 공백을 출력하세요.\n19. [cond_start(3)] j가 8보다 작은지 확인하는 조건문을 작성하세요.\n20. 추가로 공백을 출력하세요.\n21. [cond_end(3)]\n22. [cond_end(2)]\n23. [cond_else(2)] 위의 조건을 만족하지 않으면 arr 배열의 값 출력하세요.\n24. [cond_start(3)] j가 8보다 작은지 확인하는 조건문을 작성하세요.\n25. 추가로 공백을 출력하세요.\n26. [cond_end(3)]\n27. [rep_end(2)]\n28. [cond_start(1)] i가 8보다 작은지 확인하는 조건문을 작성하세요.\n29. 줄바꿈을 출력하세요.\n30. [cond_end(1)]\n31. [rep_end(1)]\n32. return 0;으로 프로그램을 종료하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int n; scanf(\"%d\", &n); int arr[8]; for (int i = 7; i >= 0; i--) { int temp = n % 2; arr[i] = temp; n = n / 2; } for (int i = 7; i >= 0; i--) { printf(\"%d\", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. n에 대한 입력을 받으세요.\n4. 정수형 배열 arr을 선언하고 8개의 요소를 준비하세요.\n5. [rep_start(1)] i를 선언해 7부터 0까지 감소하는 for 루프를 작성하세요.\n6. n을 2로 나눈 나머지를 구하여 temp에 저장하세요.\n7. temp 값을 arr[i]에 저장하세요.\n8. n을 2로 나누어 업데이트하세요.\n9. [rep_end(1)]\n10. [rep_start(1)] i를 선언해 7부터 0까지 감소하는 for 루프를 작성하세요.\n11. arr[i]의 값을 출력하세요.\n12. [rep_end(1)]\n13. return 0;으로 프로그램을 종료하세요.\n14. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int A, B; scanf(\"%u %u\", &A, &B); printf(\"%0X\", 0x1000 + A * 20 + B * 4); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 A와 B를 선언하세요.\n3. A와 B에 입력을 받으세요. (정수형, 부호 없는 10진수 입력)\n4. A에 20을 곱하고 B에 4를 곱한 값을 더한 후, 0x1000을 더한 결과를 16진수 형식으로 출력하세요.\n5. return 0;으로 프로그램을 종료하세요.\n6. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ unsigned int A[9][9]; for(int i=0;i<9;i++){ for(int j=0;j<9;j++){ scanf(\"%u \",&A[i][j]); } } for(int i=0;i<9;i++){ for(int j=0;j<9;j++){ if(i == j || i+j == 8|| i == 4 || j ==4){ printf(\" \"); } else{ printf(\"%u \",A[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 2차원 unsigned int 배열 A를 선언하여 9x9 크기로 정의하세요.  \n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n5. scanf 함수를 이용하여 배열 A의 각 요소에 입력을 받으세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i와 j가 같은지, 또는 i+j가 8인지, 또는 i가 4인지, 또는 j가 4인지 확인하는 조건문을 작성하세요.  \n11. 조건이 참이라면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. 조건이 거짓이라면 A[i][j]의 값을 출력하세요.  \n14. [rep_end(2)]  \n15. 줄 바꿈을 위해 printf(\"\\n\")을 호출하세요.  \n16. [rep_end(1)]  \n17. return 0;으로 프로그램을 종료하세요.  \n18. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int a; unsigned int b[100]; unsigned int c; scanf(\"%u\", &a); for (int i = 0; i < a; i++) { scanf(\"%u\", &b[i]); } scanf(\"%u\", &c); for (int i = 0; i < a; i++) { if (b[i] <= c) { b[i] = 0; } } for (int i = 0; i < a; i++) { printf(\"%u \", b[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 a를 선언하세요.  \n3. 최대 100개의 unsigned int형 값을 저장할 수 있는 배열 b를 선언하세요.  \n4. unsigned int형 변수 c를 선언하세요.  \n5. a의 값을 입력받기 위해 scanf를 사용하여 입력을 받으세요.  \n6. [rep_start(1)] i를 0부터 a까지 반복하는 for 루프를 작성하세요.  \n7. b 배열의 i번째 요소에 값을 입력받기 위해 scanf를 사용하세요.  \n8. [rep_end(1)]  \n9. c의 값을 입력받기 위해 scanf를 사용하세요.  \n10. [rep_start(1)] i를 0부터 a까지 반복하는 for 루프를 작성하세요.  \n11. [cond_start(2)] b 배열의 i번째 요소가 c보다 작거나 같은지 확인하는 조건문을 작성하세요.  \n12. b 배열의 i번째 요소가 c보다 작거나 같으면 해당 값을 0으로 설정하세요.  \n13. [cond_end(2)]  \n14. [rep_end(1)]  \n15. [rep_start(1)] i를 0부터 a까지 반복하는 for 루프를 작성하세요.  \n16. printf 함수를 사용하여 b 배열의 i번째 요소를 출력하세요.  \n17. [rep_end(1)]  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%d\", &N); int arr[8] = { 0 }; for (int i = 7; i >= 0; i--) { arr[i] = N % 2; N /= 2; } for (int i = 7; i >= 0; i--) { printf(\"%d\",arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned int형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 배열 arr를 크기 8로 선언하고 모든 값을 0으로 초기화하세요.  \n5. [rep_start(1)] i를 7부터 0까지 감소시키며 반복하는 for 루프를 작성하세요.  \n6. arr[i]에 N을 2로 나눈 나머지를 저장하세요.  \n7. N을 2로 나누어 업데이트하세요.  \n8. [rep_end(1)]  \n9. [rep_start(1)] i를 7부터 0까지 감소시키며 반복하는 for 루프를 작성하세요.  \n10. arr[i]에 저장된 값을 출력하세요.  \n11. [rep_end(1)]  \n12. return 0;으로 프로그램을 종료하세요.  \n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int n = 0; scanf(\"%d\", &n); int a = 102; n = a & n; printf(\"%d\", n); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 0으로 초기화하세요.  \n3. n에 값을 입력 받으세요.  \n4. 정수형 변수 a를 102로 초기화하세요.  \n5. n과 a의 비트 AND 연산을 수행하여 n에 다시 저장하세요.  \n6. n의 값을 출력하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N; scanf(\"%d\", &N); for (int i = 0; i < 8; i++) { printf(\"%d\", N % 2); N = N / 2; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 사용자로부터 입력을 받으세요.  \n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.  \n5. N을 2로 나눈 나머지를 출력하세요.  \n6. N을 2로 나눈 결과로 업데이트하세요.  \n7. [rep_end(1)]  \n8. return 0;으로 프로그램을 종료하세요.  \n9. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int arr[100] = { 0x1000 }; int a = 0; scanf(\"%d\", &a); int x = 4; for (int i = 1; i < 100; i++) { arr[i] = 0x1000; arr[i] = arr[i] + x; x = x + 4; } printf(\"%X\", arr[a]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 배열 arr을 선언하고 첫 번째 요소를 0x1000으로 초기화하세요.\n3. 정수형 변수 a를 선언하고 초기값으로 0을 설정하세요.\n4. a의 값을 입력받으세요.\n5. 정수형 변수 x를 4로 초기화하세요.\n6. [rep_start(1)] i를 선언해 1부터 99까지 반복하는 for 루프를 작성하세요.\n7. arr의 i번째 요소를 0x1000으로 설정하세요.\n8. arr의 i번째 요소에 x 값을 더하세요.\n9. x를 4만큼 증가시키세요.\n10. [rep_end(1)]\n11. arr[a]의 값을 16진수 형식으로 출력하세요.\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { unsigned num = 0; unsigned a[100] = { 0 }; unsigned cut = 0; scanf(\"%u\", &num); for (int i = 0; i < num; i++) { scanf(\"%u\", &a[i]); } scanf(\"%u\", &cut); for (int i = 0; i < num; i++) { if (a[i] <= cut) { a[i] = 0; printf(\"%u \", a[i]); } else { printf(\"%u \", a[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. unsigned num을 0으로 초기화하여 선언하세요.  \n3. unsigned형 배열 a의 크기를 100으로 설정하고 0으로 초기화하세요.  \n4. unsigned cut 변수를 0으로 선언하세요.  \n5. num에 대한 입력을 받기 위해 scanf 함수를 호출하세요.  \n6. [rep_start(1)] i를 선언하여 0부터 num-1까지 반복하는 for 루프를 작성하세요.  \n7. 배열 a의 i번째 요소에 대한 입력을 받기 위해 scanf 함수를 호출하세요.  \n8. [rep_end(1)]  \n9. cut에 대한 입력을 받기 위해 scanf 함수를 호출하세요.  \n10. [rep_start(1)] i를 선언하여 0부터 num-1까지 반복하는 for 루프를 작성하세요.  \n11. [cond_start(2)] a의 i번째 요소가 cut 이하인지 확인하는 조건문을 작성하세요.  \n12. a[i]가 cut 이하라면, a[i]를 0으로 설정하세요.  \n13. a[i]를 0으로 설정한 후, 0을 출력하세요.  \n14. [cond_end(2)]  \n15. [cond_start(2)] a의 i번째 요소가 cut 초과인지 확인하는 조건문을 작성하세요.  \n16. a[i]가 cut 초과라면, a[i]를 출력하세요.  \n17. [cond_end(2)]  \n18. [rep_end(1)]  \n19. return 0;으로 프로그램을 종료하세요.  \n20. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void){ int i; scanf(\"%X\", &i); int idx1 = (i - 0x1000)/20; int idx2 = ((i - 0x1000)/4)%5; printf(\"%d %d\", idx1, idx2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 선언하세요.\n3. i에 16진수 입력을 받으세요.\n4. int형 변수 idx1을 선언하여 i에서 0x1000을 뺀 후 20으로 나눈 값을 저장하세요.\n5. int형 변수 idx2를 선언하여 i에서 0x1000을 뺀 후 4로 나눈 값을 5로 나눈 나머지를 저장하세요.\n6. idx1과 idx2를 출력하세요.\n7. return 0;으로 프로그램을 종료하세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#if 1 #include <stdio.h> int main() { unsigned int arr[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &arr[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i + j == 8 || i == j || i == 4 || j == 4) { printf(\" \"); } else { printf(\"%u \", arr[i][j]); } } printf(\"\\n\"); } return 0; } #endif"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] unsigned int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 9x9 크기의 배열 arr을 선언하세요.  \n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n5. scanf를 이용하여 arr[i][j]에 값을 입력받으세요.  \n6. [rep_end(2)]  \n7. [rep_end(1)]  \n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.  \n10. [cond_start(2)] i + j가 8이거나 i가 j이거나 i가 4이거나 j가 4인지 확인하는 조건문을 작성하세요.  \n11. 조건이 참이라면 공백을 출력하세요.  \n12. [cond_end(2)]  \n13. [cond_start(2)] 조건이 거짓이라면 arr[i][j] 값을 출력하세요.  \n14. arr[i][j] 값을 출력한 후 공백을 추가로 출력하세요.  \n15. [cond_end(2)]  \n16. printf를 사용하여 줄 바꿈을 출력하세요.  \n17. [rep_end(2)]  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N = 0; scanf(\"%d\", &N); int array[9] = { 0 }; int cnt = 0; while (N > 0) { if (N % 2 == 0) { array[cnt] = 0; cnt++; N = N / 2; } else { array[cnt] = 1; cnt++; N = N / 2; } } for (int i = 0; i < 8; i++) { printf(\"%d\", array[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 0으로 초기화하세요.\n3. N에 대해 사용자 입력을 받으세요.\n4. int형 배열 array를 9개의 0으로 초기화하여 선언하세요.\n5. int형 변수 cnt를 0으로 초기화하세요.\n6. [rep_start(1)] N이 0보다 클 때까지 반복하는 while 루프를 작성하세요.\n7. [cond_start(2)] N을 2로 나눈 나머지를 확인하여 짝수인지 판단하는 조건문을 작성하세요.\n8. N이 짝수이면 array[cnt]에 0을 저장하세요.\n9. cnt를 1 증가시키세요.\n10. N을 2로 나누어 N을 업데이트하세요.\n11. [cond_end(2)]\n12. [cond_start(2)] N이 홀수인지 확인하는 조건문을 작성하세요.\n13. N이 홀수이면 array[cnt]에 1을 저장하세요.\n14. cnt를 1 증가시키세요.\n15. N을 2로 나누어 N을 업데이트하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n19. array[i]의 값을 출력하세요.\n20. [rep_end(1)]\n21. return 0;으로 프로그램을 종료하세요.\n22. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> #define UINT unsigned int int main() { UINT n; UINT arr[100]; UINT max; scanf(\"%u\", &n); for (UINT i = 0; i < n; i++) scanf(\"%u\", &arr[i]); scanf(\"%u\", &max); for (UINT i = 0; i < n; i++) { if (arr[i] > max) printf(\"%u \", arr[i]); else printf(\"0 \"); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. UINT 형 변수 n을 선언하세요.\n3. UINT 형 배열 arr[100]를 선언하세요.\n4. UINT 형 변수 max를 선언하세요.\n5. n의 값을 입력받기 위해 scanf를 사용하세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 각 반복에서 arr[i]의 값을 입력받기 위해 scanf를 사용하세요.\n8. [rep_end(1)]\n9. max의 값을 입력받기 위해 scanf를 사용하세요.\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 max보다 큰지 확인하는 조건문을 작성하세요.\n12. arr[i]가 max보다 크면 arr[i]를 출력하세요.\n13. [cond_end(2)]\n14. 그렇지 않으면 0을 출력하세요.\n15. [rep_end(1)]\n16. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int A = 0; unsigned int bit[100] = { 0 }; scanf(\"%u\", &A); int cnt = 1; while (cnt <= 8) { bit[cnt] = A % 2; A = A / 2; cnt++; } for (int i = 1; i <= 8; i++) { printf(\"%u\", bit[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 A를 0으로 초기화하세요.\n3. unsigned int형 배열 bit[100]을 0으로 초기화하세요.\n4. A의 값으로 사용자로부터 unsigned int 입력을 받으세요.\n5. int형 변수 cnt를 1로 초기화하세요.\n6. [rep_start(1)] cnt가 8 이하인 동안 반복하는 while 루프를 작성하세요.\n7. 현재 A를 2로 나눈 나머지를 bit[cnt]에 저장하세요.\n8. A를 2로 나눈 몫으로 업데이트하세요.\n9. cnt를 1 증가시키세요.\n10. [rep_end(1)]\n11. [rep_start(1)] i를 선언해 1부터 8까지 반복하는 for 루프를 작성하세요.\n12. bit[i]의 값을 출력하세요.\n13. [rep_end(1)]\n14. 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n = 0; unsigned int arr[100] = { 0 }; unsigned int t = 0; scanf(\"%u\", &n); for(int i = 0; i < n; i++) { scanf(\"%u\", &arr[i]); } scanf(\"%u\", &t); for (int i = 0; i < n; i++) { if (arr[i] <= t) { arr[i] = 0; } printf(\"%u \", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 0으로 초기화하세요.\n3. unsigned int형 배열 arr[100]을 0으로 초기화하면서 선언하세요.\n4. unsigned int형 변수 t를 0으로 초기화하세요.\n5. n의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 arr[i]에 값을 입력받으세요.\n8. [rep_end(1)]\n9. t의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 t보다 작거나 같은지 확인하는 조건문을 작성하세요.\n12. arr[i]가 t보다 작거나 같다면 arr[i]를 0으로 설정하세요.\n13. [cond_end(2)]\n14. arr[i]를 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); if (N >> 0 & 0x01) N -= 1; if (N >> 3 & 0x01) N -= 8; if (N >> 4 & 0x01) N -= 16; if (N >> 7 & 0x01) N -= 128; printf(\"%d\", N); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. [cond_start(1)] N의 0번째 비트가 1인지 확인하는 조건문을 작성하세요.\n5. N의 0번째 비트가 1이라면 N에서 1을 감소시키세요.\n6. [cond_end(1)]\n7. [cond_start(1)] N의 3번째 비트가 1인지 확인하는 조건문을 작성하세요.\n8. N의 3번째 비트가 1이라면 N에서 8을 감소시키세요.\n9. [cond_end(1)]\n10. [cond_start(1)] N의 4번째 비트가 1인지 확인하는 조건문을 작성하세요.\n11. N의 4번째 비트가 1이라면 N에서 16을 감소시키세요.\n12. [cond_end(1)]\n13. [cond_start(1)] N의 7번째 비트가 1인지 확인하는 조건문을 작성하세요.\n14. N의 7번째 비트가 1이라면 N에서 128을 감소시키세요.\n15. [cond_end(1)]\n16. N의 최종 값을 출력하세요.\n17. return 0;으로 프로그램을 종료하세요.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int cake[9][9]; for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { scanf(\"%u\", &cake[i][j]); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (i == j) { printf(\" \"); } else if (i + j == 8) { printf(\" \"); } else if (j == 4) { printf(\" \"); } else if (i == 4) { printf(\" \"); } else { printf(\"%u \", cake[i][j]); } } printf(\"\\n\"); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 9x9 배열 cake를 선언하세요.\n3. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n4. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n5. scanf를 사용하여 배열 cake의 각 요소에 정수를 입력 받으세요.\n6. [rep_end(2)]\n7. [rep_end(1)]\n8. [rep_start(1)] i를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n9. [rep_start(2)] j를 선언해 0부터 8까지 반복하는 for 루프를 작성하세요.\n10. [cond_start(2)] 현재 i가 j와 같은지 확인하는 조건문을 작성하세요.\n11. i와 j가 같다면 공백을 출력하세요.\n12. [cond_end(2)]\n13. [cond_start(2)] i와 j를 더한 값이 8인지 확인하는 조건문을 작성하세요.\n14. i와 j의 합이 8이라면 공백을 출력하세요.\n15. [cond_end(2)]\n16. [cond_start(2)] j가 4인지 확인하는 조건문을 작성하세요.\n17. j가 4라면 공백을 출력하세요.\n18. [cond_end(2)]\n19. [cond_start(2)] i가 4인지 확인하는 조건문을 작성하세요.\n20. i가 4라면 공백을 출력하세요.\n21. [cond_end(2)]\n22. [cond_start(2)] 위의 조건들이 모두 아니면 배열의 요소를 출력하세요.\n23. 배열 cake의 i, j 위치의 값을 출력하세요.\n24. [cond_end(2)]\n25. printf로 줄 바꿈을 출력하세요.\n26. [rep_end(2)]\n27. [rep_end(1)]\n28. return 0;으로 프로그램을 종료하세요.\n29. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned char n; int arr[8] = { 0, }; scanf(\"%d\", &n); if (n >= 128) { n = n - 128; arr[7] = 1; } if (n >= 64) { n = n - 64; arr[6] = 1; } if (n >= 32) { n = n - 32; arr[5] = 1; } if (n >= 16) { n = n - 16; arr[4] = 1; } if (n >= 8) { n = n - 8; arr[3] = 1; } if (n >= 4) { n = n - 4; arr[2] = 1; } if (n >= 2) { n = n - 2; arr[1] = 1; } if(n==1){ n = n - 1; arr[0] = 1; } for (int i = 0; i < 8; i++) { printf(\"%d\", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char형 변수 n을 선언하세요.\n3. int형 배열 arr를 크기 8로 선언하고, 모든 요소를 0으로 초기화합니다.\n4. n에 값을 입력받으세요.\n5. [cond_start(1)] n이 128 이상인지 확인하는 조건문을 작성하세요.\n6. n이 128 이상이라면 128을 빼고 arr[7]를 1로 설정하세요.\n7. [cond_end(1)]\n8. [cond_start(1)] n이 64 이상인지 확인하는 조건문을 작성하세요.\n9. n이 64 이상이라면 64를 빼고 arr[6]를 1로 설정하세요.\n10. [cond_end(1)]\n11. [cond_start(1)] n이 32 이상인지 확인하는 조건문을 작성하세요.\n12. n이 32 이상이라면 32를 빼고 arr[5]를 1로 설정하세요.\n13. [cond_end(1)]\n14. [cond_start(1)] n이 16 이상인지 확인하는 조건문을 작성하세요.\n15. n이 16 이상이라면 16을 빼고 arr[4]를 1로 설정하세요.\n16. [cond_end(1)]\n17. [cond_start(1)] n이 8 이상인지 확인하는 조건문을 작성하세요.\n18. n이 8 이상이라면 8을 빼고 arr[3]를 1로 설정하세요.\n19. [cond_end(1)]\n20. [cond_start(1)] n이 4 이상인지 확인하는 조건문을 작성하세요.\n21. n이 4 이상이라면 4를 빼고 arr[2]를 1로 설정하세요.\n22. [cond_end(1)]\n23. [cond_start(1)] n이 2 이상인지 확인하는 조건문을 작성하세요.\n24. n이 2 이상이라면 2를 빼고 arr[1]을 1로 설정하세요.\n25. [cond_end(1)]\n26. [cond_start(1)] n이 1인지 확인하는 조건문을 작성하세요.\n27. n이 1이라면 1을 빼고 arr[0]을 1로 설정하세요.\n28. [cond_end(1)]\n29. [rep_start(1)] i를 선언하여 0부터 7까지 반복하는 for 루프를 작성하세요.\n30. arr[i]의 값을 출력하세요.\n31. [rep_end(1)]\n32. return 0;으로 프로그램을 종료하세요.\n33. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { int N; scanf(\"%d\", &N); int B[8]; for (int i = 0; i<8; i++) { B[i] = N % 2; N = N / 2; } for (int i = 0; i < 8; i++) { printf(\"%d\", B[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. 정수형 배열 B를 8개의 요소로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. B[i]에 N을 2로 나눈 나머지를 저장하세요.\n7. N을 2로 나눈 값으로 업데이트하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n10. B[i]의 값을 출력하세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int N; scanf(\"%d\", &N); int arr[8] = { 0 }; int cnt = 0, up = 1; for (int i = 7; i >= 0; i--) { arr[i] = N % 2; N /= 2; if (i == 0 || i == 3 || i == 4 || i == 7)arr[i] = 0; } for (int i = 7; i >= 0; i--) { cnt = cnt + (arr[i] * up); up *= 2; } printf(\"%d\", cnt); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. int형 배열 arr을 8개의 요소로 초기화하여 선언하세요.\n5. int형 변수 cnt와 up을 각각 0과 1로 초기화하세요.\n6. [rep_start(1)] i를 7부터 0까지 감소시키면서 반복하는 for 루프를 작성하세요.\n7. arr[i]에 N을 2로 나눈 나머지를 저장하세요.\n8. N을 2로 나눈 값으로 업데이트하세요.\n9. [cond_start(2)] i가 0, 3, 4, 7 중 하나인지 확인하는 조건문을 작성하세요.\n10. 해당하는 경우 arr[i]의 값을 0으로 설정하세요.\n11. [cond_end(2)]\n12. [rep_end(1)]\n13. [rep_start(1)] i를 7부터 0까지 감소시키면서 반복하는 for 루프를 작성하세요.\n14. cnt에 arr[i]와 up의 곱을 더하세요.\n15. up을 2배로 증가시키세요.\n16. [rep_end(1)]\n17. cnt를 출력하세요.\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int n, iter = 8; int a[iter], k = 1, sum = 0; scanf(\"%d\", &n); for (int i = 0; i < 8; i++) { if (i == 0 || i == 3 || i == 4 || i == 7) { a[i] = 0; } else { a[i] = (n >> i) & 0x01; } sum += k * a[i]; k *= 2; } printf(\"%d\\n\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n과 iter를 선언하고 iter를 8로 초기화하세요.\n3. 정수형 배열 a의 크기를 iter로 설정하고, 변수 k를 1로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. [cond_start(2)] i가 0, 3, 4 또는 7인지 확인하는 조건문을 작성하세요.\n7. i가 위의 값 중 하나일 경우, a[i]에 0을 저장하세요.\n8. [cond_end(2)]\n9. [cond_start(2)] i가 위의 경우가 아닐 때 실행하는 조건문을 작성하세요.\n10. n을 i 비트 오른쪽으로 이동시켜 이진수의 해당 비트를 추출하고 a[i]에 저장하세요.\n11. [cond_end(2)]\n12. sum에 k 곱하기 a[i]를 더하세요.\n13. k를 2배로 증가시키세요.\n14. [rep_end(1)]\n15. sum의 값을 출력하세요.\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { int N; unsigned int arr[100]; unsigned int T; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &arr[i]); } scanf(\"%u\", &T); for (int i = 0; i < N; i++) { if (arr[i] <= T) { printf(\"0 \"); } else { printf(\"%u \", arr[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. 100개의 unsigned int형 요소를 포함하는 배열 arr을 선언하세요.  \n4. unsigned int형 변수 T를 선언하세요.  \n5. N을 입력받기 위해 scanf 함수를 호출하세요.  \n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n7. 배열 arr의 i번째 요소에 값을 입력받기 위해 scanf 함수를 호출하세요.  \n8. [rep_end(1)]  \n9. T를 입력받기 위해 scanf 함수를 호출하세요.  \n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.  \n11. [cond_start(2)] arr[i]가 T보다 작거나 같은지 확인하는 조건문을 작성하세요.  \n12. arr[i]가 T보다 작거나 같다면 0을 출력하세요.  \n13. [cond_end(2)]  \n14. [cond_start(2)] arr[i]가 T보다 큰 경우를 처리하는 조건문을 작성하세요.  \n15. arr[i]를 출력하세요.  \n16. [cond_end(2)]  \n17. [rep_end(1)]  \n18. return 0;으로 프로그램을 종료하세요.  \n19. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main() { int n; scanf(\"%d\", &n); int temp = n & 0x66; printf(\"%d\", temp); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 n을 선언하세요.  \n3. n에 대한 입력을 받으세요.  \n4. n의 비트를 0x66와 AND 연산하여 결과를 temp에 저장하세요.  \n5. temp의 값을 출력하세요.  \n6. return 0;으로 프로그램을 종료하세요.  \n7. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> main() { int n; unsigned int a[100]; unsigned int t; scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%u\", &a[i]); } scanf(\"%u\", &t); for (int i = 0; i < n; i++) { if (a[i] <= t) printf(\"0 \"); else printf(\"%u \", a[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] 반환형이 없는 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 n을 선언하세요.\n3. unsigned int형 배열 a를 크기 100으로 선언하세요.\n4. unsigned int형 변수 t를 선언하세요.\n5. n의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 a의 i번째 요소에 대한 값을 입력받으세요.\n8. [rep_end(1)]\n9. t의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 n-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] a의 i번째 요소가 t보다 작거나 같은지 확인하는 조건문을 작성하세요.\n12. a[i]가 t보다 작거나 같으면 0을 출력하세요.\n13. [cond_end(2)]\n14. 그렇지 않다면 a[i]를 출력하세요.\n15. [rep_end(1)]\n16. 프로그램이 종료됩니다. (main 함수의 끝)\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int n; scanf(\"%u\", &n); for (int i = 0; i < 8; i++) { printf(\"%u\", (n >> i) & 1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. n에 대한 사용자 입력을 받으세요.\n4. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. i번째 비트를 출력하기 위해 n을 i만큼 오른쪽으로 이동시키고, 최하위 비트만 추출하여 출력합니다.\n6. [rep_end(1)]\n7. 프로그램의 종료를 나타내는 return 0; 문으로 끝내세요.\n8. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N; scanf(\"%d\", &N); int list[8]; for (int i = 0; i < 8; i++) { list[i] = N % 2; N = N / 2; } int idx = 1; int sum = 0; for (int i = 0; i < 8; i++) { if (i == 0 || i == 3 || i == 4 || i == 7) { idx = 2 * idx; } else { sum = sum + list[i] * idx; idx = 2 * idx; } } printf(\"%d\", sum); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. 정수형 배열 list를 선언하여 크기를 8로 설정하세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. list[i]에 N을 2로 나눈 나머지를 저장하세요 (N의 이진수의 각 자리를 저장하기 위해).\n7. N을 2로 나눈 결과로 업데이트하세요.\n8. [rep_end(1)]\n9. int형 변수 idx를 1로 초기화하세요 (이진수 자릿수의 가중치를 계산하기 위해 사용).\n10. int형 변수 sum을 0으로 초기화하세요 (결과를 저장하기 위해 사용).\n11. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n12. [cond_start(2)] i가 0, 3, 4, 7 중 하나인지 확인하는 조건문을 작성하세요.\n13. 해당 조건이 참이라면 idx를 두 배로 증가시키세요.\n14. [cond_end(2)]\n15. [cond_start(2)] 그렇지 않다면 sum에 list[i]와 idx를 곱한 값을 더하세요.\n16. idx를 두 배로 증가시키세요. \n17. [cond_end(2)]\n18. [rep_end(1)]\n19. sum을 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int N; scanf(\"%d\", &N); int bit[8] = { 0 }; int i = 0; while (N > 0) { bit[i] = N % 2; i++; N = N / 2; } for (i = 0; i < 8; i++) { printf(\"%d\", bit[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)  \n2. 정수형 변수 N을 선언하세요.  \n3. N에 대한 입력을 받으세요.  \n4. int형 배열 bit을 선언하고 8개의 요소를 0으로 초기화하세요.  \n5. int형 변수 i를 0으로 초기화하세요.  \n6. [rep_start(1)] N이 0보다 큰 동안 반복하는 while 루프를 작성하세요.  \n7. bit[i]에 N을 2로 나눈 나머지를 저장하세요.  \n8. i를 1 증가시키세요.  \n9. N을 2로 나눈 값을 N에 저장하세요.  \n10. [rep_end(1)]  \n11. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.  \n12. bit[i]의 값을 출력하세요.  \n13. [rep_end(1)]  \n14. return 0;으로 프로그램을 종료하세요.  \n15. [func_def_end(1)]  "
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int i = 0; scanf(\"%d\", &i); for (int j = 0; j < 8; j++) { printf(\"%d\", (i >> j) & 0b1); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 0으로 초기화하세요.\n3. i에 대한 입력을 받으세요.\n4. [rep_start(1)] j를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. i의 j번째 비트를 오른쪽으로 이동하고 1과 AND 연산하여 해당 비트를 출력하세요.\n6. [rep_end(1)]\n7. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main(void) { int a1, a2; scanf(\"%d %d\", &a1, &a2); int arr[6][5]; for (int i = 0; i < 6; i++) { for (int j = 0; j < 5; j++) { arr[i][j] = 0x1000 + 0x4 * j + 0x4 * 0x5 * i; } } printf(\"%X\", arr[a1][a2]); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 a1과 a2를 선언하세요.\n3. a1과 a2에 입력을 받으세요.\n4. 6x5 크기의 2차원 배열 arr을 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 5까지 반복하는 for 루프를 작성하세요.\n6. [rep_start(2)] j를 선언해 0부터 4까지 반복하는 for 루프를 작성하세요.\n7. arr[i][j]에 0x1000 + 0x4 * j + 0x4 * 0x5 * i 값을 할당하세요.\n8. [rep_end(2)]\n9. [rep_end(1)]\n10. arr[a1][a2]의 값을 16진수 형식으로 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include<stdio.h> int main() { unsigned char A[8] = { 0 }; unsigned int N = 0; unsigned int N2 = 0; scanf(\"%u\", &N); for (int i = 0; i < 8; i++) { A[i] = N & 0x01; N >>= 1; } N2 = A[1] * 2 + A[2] * 4 + A[5] * 32 + A[6] * 64; printf(\"%u\", N2); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned char 형 배열 A를 8개의 요소로 초기화하여 선언하세요.\n3. unsigned int 형 변수 N과 N2를 0으로 초기화하여 선언하세요.\n4. N에 대해 사용자로부터 양의 정수를 입력받으세요.\n5. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. A[i]에 N의 최하위 비트를 저장하세요. (N & 0x01)\n7. N을 오른쪽으로 1 비트 쉬프트하세요.\n8. [rep_end(1)]\n9. N2에 A 배열의 특정 인덱스를 사용하여 비트 값을 조합하여 저장하세요. (A[1] * 2 + A[2] * 4 + A[5] * 32 + A[6] * 64)\n10. N2의 값을 출력하세요.\n11. return 0;으로 프로그램을 종료하세요.\n12. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { unsigned int N; scanf(\"%u\", &N); unsigned int arr[100]; for (int i = 0; i < N; i++) { scanf(\"%u\", &arr[i]); } unsigned int T; scanf(\"%u\", &T); for (int i = 0; i < N; i++) { if (arr[i] <= T) printf(\"0 \"); else printf(\"%u \", arr[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 선언하세요.\n3. N에 대한 입력을 받으세요.\n4. unsigned int형 배열 arr을 100 크기로 선언하세요.\n5. [rep_start(1)] i를 선언하여 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n6. arr 배열의 i번째 인덱스에 대한 입력을 받으세요.\n7. [rep_end(1)]\n8. unsigned int형 변수 T를 선언하세요.\n9. T에 대한 입력을 받으세요.\n10. [rep_start(1)] i를 선언하여 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] arr[i]가 T 이하인지 확인하는 조건문을 작성하세요.\n12. arr[i]가 T 이하라면 0을 출력하세요.\n13. [cond_end(2)]\n14. arr[i]가 T를 초과하면 arr[i]를 출력하세요.\n15. [rep_end(1)]\n16. return 0;으로 프로그램을 종료하세요.\n17. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { unsigned int n; int k = 0; scanf(\"%u\", &n); for (int i = 0; i < 8; i++) { k = n % 2; printf(\"%d\", k); n = n / 2; } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 n을 선언하세요.\n3. int형 변수 k를 0으로 초기화하세요.\n4. n에 대한 입력을 받으세요.\n5. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. n을 2로 나눈 나머지를 k에 저장하세요.\n7. k의 값을 출력하세요.\n8. n을 2로 나누세요.\n9. [rep_end(1)]\n10. return 0;으로 프로그램을 종료하세요.\n11. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int te; unsigned char tw[8] = {0}; scanf(\"%u\", &te); for (int i = 0; i < 8; i++) { tw[i] = te % 2; te = te / 2; } for (int i = 0; i < 8; i++) { printf(\"%u\", tw[i]); } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 te를 선언하세요.\n3. unsigned char형 배열 tw를 선언하고 8개의 요소를 0으로 초기화하세요.\n4. te에 대한 입력을 받기 위해 scanf 함수를 호출하세요.\n5. [rep_start(1)] i를 0으로 초기화하고 8보다 작은 동안 반복하는 for 루프를 작성하세요.\n6. tw 배열의 i 번째 요소에 te를 2로 나눈 나머지를 저장하세요.\n7. te를 2로 나눈 값으로 업데이트하세요.\n8. [rep_end(1)]\n9. [rep_start(1)] i를 0으로 초기화하고 8보다 작은 동안 반복하는 for 루프를 작성하세요.\n10. tw 배열의 i 번째 요소를 출력하세요.\n11. [rep_end(1)]\n12. return 0;으로 프로그램을 종료하세요.\n13. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "int main() { unsigned int N = 0; unsigned int A[100] = { 0 }; unsigned int T = 0; scanf(\"%u\",&N); for (int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } scanf(\"%u\", &T); for (int i = 0; i < N; i++) { if (A[i] <= T) printf(\"0 \"); else printf(\"%u \", A[i]); } }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. unsigned int형 변수 N을 0으로 초기화하세요.\n3. unsigned int형 배열 A를 크기 100으로 선언하고, 모든 요소를 0으로 초기화하세요.\n4. unsigned int형 변수 T를 0으로 초기화하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 i번째 요소에 값을 입력받으세요.\n8. [rep_end(1)]\n9. T의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] 배열 A의 i번째 요소가 T보다 작거나 같은지 확인하는 조건문을 작성하세요.\n12. A의 i번째 요소가 T보다 작거나 같다면 0을 출력하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] 그렇지 않다면 A의 i번째 요소를 출력하세요.\n15. [cond_end(2)]\n16. [rep_end(1)]\n17. 프로그램이 종료되면 반환값이 없습니다.\n18. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main(void) { int N; scanf(\"%d\", &N); for (int i = 0; i < 8; i++) { if (N & 0x01) { printf(\"1\"); N = N >> 1; } else { printf(\"0\"); N = N >> 1; } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 입력을 받으세요.\n4. [rep_start(1)] i를 0부터 7까지 반복하는 for 루프를 작성하세요.\n5. [cond_start(2)] N의 최하위 비트가 1인지 확인하는 조건문을 작성하세요.\n6. 최하위 비트가 1이라면 \"1\"을 출력하세요.\n7. N을 오른쪽으로 1 비트 시프트하세요.\n8. [cond_end(2)]\n9. [cond_start(2)] 최하위 비트가 0인 경우를 처리하는 조건문을 작성하세요.\n10. 최하위 비트가 0이라면 \"0\"을 출력하세요.\n11. N을 오른쪽으로 1 비트 시프트하세요.\n12. [cond_end(2)]\n13. [rep_end(1)]\n14. return 0;으로 프로그램을 종료하세요.\n15. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include<stdio.h> int main(){ int N; scanf(\"%d\",&N); int B[8]; for(int i=0;i<8;i++){ B[i] = N%2; N = N/2; if(i==0||i==3||i==4||i==7){ B[i] = 0; } } int A=0; for(int i=0;i<8;i++){ for(int j=0;j<i;j++){ B[i] = B[i]*2; } A = A+B[i]; } printf(\"%d\",A); return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. N에 입력을 받으세요.\n4. 정수형 배열 B를 크기 8로 선언하세요.\n5. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n6. B[i]에 N을 2로 나눈 나머지를 할당하여 이진수의 가장 뒤쪽 비트를 저장하세요.\n7. N을 2로 나누어 이진수의 다음 비트로 이동하세요.\n8. [cond_start(2)] i가 0, 3, 4, 7 중 하나인지 확인하는 조건문을 작성하세요.\n9. 조건이 참이라면 B[i]를 0으로 설정하세요.\n10. [cond_end(2)]\n11. [rep_end(1)]\n12. 정수형 변수 A를 0으로 초기화하세요.\n13. [rep_start(1)] i를 선언해 0부터 7까지 반복하는 for 루프를 작성하세요.\n14. [rep_start(2)] j를 선언해 0부터 i-1까지 반복하는 for 루프를 작성하세요.\n15. B[i]에 B[i]를 2배로 곱하세요.\n16. [rep_end(2)]\n17. A에 B[i]를 더하세요.\n18. [rep_end(1)]\n19. A의 값을 출력하세요.\n20. return 0;으로 프로그램을 종료하세요.\n21. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#include <stdio.h> int main() { int i = 0; scanf(\"%d\", &i); printf(\"%X\", 0x1000 + (i * 4)); }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 i를 0으로 초기화하세요.\n3. i에 입력을 받으세요.\n4. 0x1000과 i에 4를 곱한 값을 더한 후, 그 결과를 16진수 형식으로 출력하세요.\n5. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  },
  {
    "conversations": [
      {
        "role": "user",
        "content": "#define _CRT_SECURE_NO_WARNINGS #include <stdio.h> int main() { int N; unsigned int A[100]; unsigned int T; scanf(\"%d\", &N); for (int i = 0; i < N; i++) { scanf(\"%u\", &A[i]); } scanf(\"%u\", &T); for (int i = 0; i < N; i++) { if (A[i] <= T) { printf(\"0 \"); } else { printf(\"%u \", A[i]); } } return 0; }"
      },
      {
        "role": "assistant",
        "content": "1. [func_def_start(1)] int 반환형 main 함수를 정의하세요. (매개변수 없음)\n2. 정수형 변수 N을 선언하세요.\n3. unsigned int형 배열 A의 크기를 100으로 설정하여 선언하세요.\n4. unsigned int형 변수 T를 선언하세요.\n5. N의 값을 입력받으세요.\n6. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n7. 배열 A의 i번째 요소에 대해 값을 입력받으세요.\n8. [rep_end(1)]\n9. T의 값을 입력받으세요.\n10. [rep_start(1)] i를 선언해 0부터 N-1까지 반복하는 for 루프를 작성하세요.\n11. [cond_start(2)] 배열 A의 i번째 요소가 T 이하인지 확인하는 조건문을 작성하세요.\n12. A[i]가 T 이하라면 0을 출력하세요.\n13. [cond_end(2)]\n14. [cond_start(2)] A[i]가 T를 초과하는 경우를 처리하는 조건문을 작성하세요.\n15. A[i]의 값을 출력하세요.\n16. [cond_end(2)]\n17. [rep_end(1)]\n18. return 0;으로 프로그램을 종료하세요.\n19. [func_def_end(1)]"
      }
    ],
    "source": "custom-dataset",
    "score": 4.8
  }
]